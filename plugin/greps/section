acinclude.m4:	[  --enable-initfini-array	use .init_array/.fini_array sections],
acinclude.m4:int (*fp) (void) __attribute__ ((section (".init_array"))) = foo;
acinclude.m4:.section .dtors,"a",%progbits
acinclude.m4:.section .ctors,"a",%progbits
acinclude.m4:.section .fini_array.65530,"a",%progbits
acinclude.m4:.section .init_array.65530,"a",%progbits
acinclude.m4:.section .dtors.64528,"a",%progbits
acinclude.m4:.section .ctors.64528,"a",%progbits
acinclude.m4:.section .fini_array.01005,"a",%progbits
acinclude.m4:.section .init_array.01005,"a",%progbits
acinclude.m4:    [Define .init_array/.fini_array sections are available and working.])
asan.c:  section *fnsec = function_section (current_function_decl);
asan.c:  switch_to_section (fnsec);
asan.c:      /* Don't protect if using user section, often vars placed
asan.c:	 into user section from multiple TUs are then assumed
basic-block.h:   separate sections.  */
basic-block.h:extern void bitmap_intersection_of_succs (sbitmap, sbitmap *, basic_block);
basic-block.h:extern void bitmap_intersection_of_preds (sbitmap, sbitmap *, basic_block);
bb-reorder.c:#include "toplev.h" /* user_defined_section_attribute */
bb-reorder.c:   when partitioning hot and cold basic blocks into separate sections of
bb-reorder.c:     basic blocks into separate sections.  The last round is for all the
bb-reorder.c:	 partitioning hot/cold blocks into separate sections, make sure all
bb-reorder.c:		 that cross section boundaries.  */
bb-reorder.c:   a separate section of the .o file (to cut down on paging and improve
bb-reorder.c:             into the cold section.  */
bb-reorder.c:  /* Mark every edge that crosses between sections.  */
bb-reorder.c:		     this edge remains in the current section boundary
bb-reorder.c:   sections.  Convert them into indirect jumps instead.  */
bb-reorder.c:     is at most one switch between hot/cold sections.  */
bb-reorder.c:   that belongs to a different section, and insert a
bb-reorder.c:   hot and cold text sections.  */
bb-reorder.c:insert_section_boundary_note (void)
bb-reorder.c:  bool switched_sections = false;
bb-reorder.c:	  gcc_assert (!switched_sections);
bb-reorder.c:          switched_sections = true;
bb-reorder.c:     sections of the .o file does not work well with linkonce or with
bb-reorder.c:     user defined section attributes.  Don't call it if either case
bb-reorder.c:	  && !user_defined_section_attribute);
bb-reorder.c:   partitions hot and cold basic blocks into separate sections of the
bb-reorder.c:   to indicate which section they belong in.  This information is
bb-reorder.c:   later used for writing out sections in the .o file.  Because hot
bb-reorder.c:   and cold sections can be arbitrarily large (within the bounds of
bb-reorder.c:   to fix up all edges that cross section boundaries, to make sure the
bb-reorder.c:   legal to fall through across a section boundary.  Whenever a
bb-reorder.c:   fall-through edge crossing a section boundary is encountered, a new
bb-reorder.c:   basic block is inserted (in the same section as the fall-through
bb-reorder.c:   insufficient to cross section boundaries, that is dealt with a
bb-reorder.c:   jump that attempts to cross a section boundary and add a level of
bb-reorder.c:   the same section.  The new basic block contains an unconditional
bb-reorder.c:   jump to the original target, in the other section.
bb-reorder.c:   that jumps attempting to cross section boundaries are really able
bb-reorder.c:   sections of the .o file, to reduce paging and improve cache
bb-reorder.c:   between sections; 2). For those architectures which have "short"
bb-reorder.c:   cross between sections are converted to unconditional branches;
bb-reorder.c:   sections are converted to indirect jumps.
bb-reorder.c:   section.  The new basic block is then put in the same (hot or cold)
bb-reorder.c:   section as the original conditional branch, and the fall_thru edge
bb-reorder.c:   crossing between hot and cold sections.
bb-reorder.c:   A new basic block is added in the same (hot/cold) section as the
bb-reorder.c:   to the original target of the conditional branch (in the other section).
bb-reorder.h:extern void insert_section_boundary_note (void);
bitmap.h:     * set_intersection		: bitmap_intersect_p /
bitmap.h:/* Initialize an iterator to iterate over the intersection of two
bitmap.h:/* Advance to the next nonzero bit in the intersection of
builtins.c:   in a readonly section.  */
builtins.c:  /* Make sure we call decl_readonly_section only for trees it
builtins.c:    return decl_readonly_section (exp, 0);
builtins.c:	 and in the latter case grow .rodata section too much.
builtins.c:	 and in the latter case grow .rodata section too much.
builtins.c:	  /* If src is categorized for a readonly section we can use
cfganal.c:   http://www.cs.rice.edu/~harv/dissertation.pdf in the section on iterative
cfganal.c:/* Intersection and union of preds/succs for sbitmap based data flow
cfganal.c:/* Set the bitmap DST to the intersection of SRC of successors of
cfganal.c:bitmap_intersection_of_succs (sbitmap dst, sbitmap *src, basic_block b)
cfganal.c:/* Set the bitmap DST to the intersection of SRC of predecessors of
cfganal.c:bitmap_intersection_of_preds (sbitmap dst, sbitmap *src, basic_block b)
cfgcleanup.c:     and cold sections.
cfgcleanup.c:     and cold sections.
cfgcleanup.c:	 up jumps that cross between hot/cold sections.
cfgcleanup.c:     and cold sections.
cfgcleanup.c:     and cold sections.
cfgcleanup.c:     and cold sections.
cfgcleanup.c:     and cold sections.
cfgcleanup.c:                 and lead to now cold code in the hot section. This is not easy
cfgexpand.c:  /* Resovle the function section.  Some targets, like ARM EABI rely on knowledge
cfgexpand.c:     of the function section at exapnsion time to predict distance of calls.  */
cfgexpand.c:  resolve_unique_section (current_function_decl, 0, flag_function_sections);
cfg-flags.def:/* Set on blocks that should be put in a hot section.  */
cfg-flags.def:/* Set on blocks that should be put in a cold section.  */
cfg-flags.def:/* Edge crosses between hot and cold sections, when we do partitioning.
cfgrtl.c:    insert_section_boundary_note ();
cfgrtl.c:     and cold sections.
cfgrtl.c:     and cold sections.
cfgrtl.c:      /* Remove the section crossing note from jump at end of
cfgrtl.c:      /* Make sure new block ends up in correct hot/cold section.  */
cfgrtl.c:     and lead to now cold code in the hot section. In some cases this
cfgrtl.c:      /* Any blocks dominated by a block in the cold section
cfgrtl.c:  bool switched_sections = false;
cfgrtl.c:	  if (switched_sections)
cfgrtl.c:            switched_sections = true;
cfgrtl.c:		  error ("EDGE_CROSSING incorrectly set across same section");
cfgrtl.c:		  error ("fallthru edge crosses section boundary in bb %i",
cfgrtl.c:		  error ("EH edge crosses section boundary in bb %i",
cfgrtl.c:		  error ("No region crossing jump at section boundary in bb %i",
cfgrtl.c:	      error ("EDGE_CROSSING missing across section boundary");
cfgrtl.c:            error ("Region crossing jump across same section in bb %i",
cfgrtl.c:              /* We should only switch text sections once.  */
cfgrtl.c:     the cfg layout required moving a block from the hot to the cold section
cfgrtl.c:     and cold sections.
cgraph.c:   linkonce section.  */
cgraph.c:  data = lto_get_section_data (file_data, LTO_section_function_body,
cgraph.c:    fatal_error ("%s: section %s is missing",
cgraph.c:  lto_free_section_data (file_data, LTO_section_function_body, name,
cgraph.h:void varpool_finalize_named_section_flags (varpool_node *node);
cgraphunit.c:      /* Ensure thunks are emitted in their correct sections.  */
cgraphunit.c:      resolve_unique_section (thunk_fndecl, 0, flag_function_sections);
cgraphunit.c:      /* Ensure thunks are emitted in their correct sections.  */
cgraphunit.c:      resolve_unique_section (thunk_fndecl, 0, flag_function_sections);
cgraphunit.c:   to use subsections to make the output functions appear in top-down
cgraphunit.c:      varpool_finalize_named_section_flags (nodes[i].u.v);
ChangeLog:	section anchor.
ChangeLog:	* doc/invoke.texi (-flto): Expand section about
ChangeLog:	* doc/loop.texi: Remove section on the removed lambda framework.
ChangeLog:	* configure.ac (TLS_SECTION_ASM_FLAG): Save as tls_section_flag.
ChangeLog:	* lto-section-in.c (lto_get_section_data): Fix const cast.
ChangeLog:	* lto-section-in.c (lto_get_section_data): Instead do it here
ChangeLog:	for every section.
ChangeLog:	* config/i386/i386-interix.h (i386_pe_unique_section): Don't use
ChangeLog:	* config/darwin.c (darwin_function_section): Adjust return values to
ChangeLog-1997:	* crtstuff.c: Wrap .eh_frame section, use EH_FRAME_SECTION_ASM_OP,
ChangeLog-1997:	* varasm.c (eh_frame_section): New fn if EH_FRAME_SECTION_ASM_OP.
ChangeLog-1997:	* dwarf2out.c (output_call_frame_info): Call named_section.
ChangeLog-1997:	* varasm.c (exception_section): Check EXCEPTION_SECTION first.
ChangeLog-1998:	* output.h (force_data_section): New prototype.
ChangeLog-1998:	* varasm.c (force_data_section): New function to force the
ChangeLog-1998:	data section, regardless of what in_section thinks.
ChangeLog-1998:	* dwarf2out.c (output_call_frame_info): Call force_data_section
ChangeLog-1998:	since varasm may not realize we've changes sections.
ChangeLog-1998:	.sbss section, not .sdata.
ChangeLog-1998:	* mips/mips.c (mips_select_section): Add comment.
ChangeLog-1998:	check for flag_function_sections.
ChangeLog-1998:	* toplev.c: Fix bad patch around flag_data_sections.
ChangeLog-1998:	* flags.h: Add flag_data_sections.
ChangeLog-1998:	* toplev.c: Add option -fdata-sections.  Add flag_data_sections.
ChangeLog-1998:	(compile_file): Error if flag_data_sections not supported.
ChangeLog-1998:	* varasm.c (assemble_variable): Handle flag_data_sections.
ChangeLog-1998:	* invoke.texi: Describe -fdata-sections.
ChangeLog-1998:	* configure.in: Add check for GAS subsection -1 support.
ChangeLog-1998:	SImode is subsection -1 works, else use DImode.
ChangeLog-1998:	subsection -1 works.
ChangeLog-1998:	for exact section attributions.
ChangeLog-1998:	VAR_DECL's in gp addressable sections.
ChangeLog-1998:	(drectve_section): Cover function to implement above.
ChangeLog-1998:	(switch_to_section): Covert function to implement above.
ChangeLog-1998:	(EXTRA_SECTION_FUNCTIONS): Add in_drectve and switch_to_section.
ChangeLog-1998:	(i386_pe_encode_section_info): New function.
ChangeLog-1998:	(i386_pe_unique_section): Strip encoding from name first.
ChangeLog-1998:	section of code just because it contains
ChangeLog-1998:	(toc_section, private_data_section, trap_comparison_operator): Add
ChangeLog-1998:	* dwarf2out.c (stripattributes): Prepend '*' to the section name.
ChangeLog-1998:	(mips_select_rtx_section): Mark parameter `x' with ATTRIBUTE_UNUSED.
ChangeLog-1998:	(EXTRA_SECTION_FUNCTIONS): Add ctors_section and dtors_section.
ChangeLog-1998:	* test_summary: Display section breaks for each entry
ChangeLog-1998:	(eh_frame_section): Likewise.
ChangeLog-1998:	* install.texi: Update section on warnings that can be safely ignored.
ChangeLog-1998:	(mips_select_rtx_section, mips_select_section): Declare as void.
ChangeLog-1998:	* config/i386/winnt.c (i386_pe_unique_section): Put read-only
ChangeLog-1998:	data in the text section unless READONLY_DATA_SECTION is defined.
ChangeLog-1998:	(GCC_OK_SYMBOL): Ensure symbol not in undef section.
ChangeLog-1998:	a function name to a section name.
ChangeLog-1998:	section for non-ELF systems.
ChangeLog-1999:	* tm.texi (Obsolete Register Macros): Delete section.
ChangeLog-1999:	(text_section): Add switches -munint-const-in-rodata and
ChangeLog-1999:	* output.h (const_section, init_section, fini_section): Add
ChangeLog-1999:	* alpha/elf.h (const_section): Delete declaration.
ChangeLog-1999:	* svr4.h (const_section): Likewise.
ChangeLog-1999:	* alpha/alpha-protos.h (literal_section): Add prototype.
ChangeLog-1999:	* output.h (ctors_section, dtors_section, bss_section): Prototype.
ChangeLog-1999:	* alpha/alpha-interix.h (text_section): Delete prototype.
ChangeLog-1999:	* alpha/elf.h (text_section): Likewise.
ChangeLog-1999:	* arm/linux-elf.h (text_section): Likewise.
ChangeLog-1999:	* arm/linux-telf.h (text_section): Likewise.
ChangeLog-1999:	* c4x/c4x.h (text_section): Likewise.
ChangeLog-1999:	* dsp16xx/dsp16xx.h (bss_section): Likewise.
ChangeLog-1999:	* elfos.h (text_section): Likewise.
ChangeLog-1999:	* i386/aix386ng.h (text_section): Likewise.
ChangeLog-1999:	* i386/i386-interix.h (text_section): Likewise.
ChangeLog-1999:	* i386/sco5.h (text_section): Likewise.
ChangeLog-1999:	* i386/svr3gas.h (text_section): Likewise.
ChangeLog-1999:	* nextstep.h (text_section): Likewise.
ChangeLog-1999:	* psos.h (text_section): Likewise.
ChangeLog-1999:	* ptx4.h (text_section): Likewise.
ChangeLog-1999:	* svr3.h (text_section): Likewise.
ChangeLog-1999:	* svr4.h (text_section, ctors_section, dtors_section): Likewise.
ChangeLog-1999:	* config/svr4.h (text_section, ctors_section, dtors_section): Add
ChangeLog-1999:	to .section when outputting a .bss section to deal with multiple
ChangeLog-1999:	.bss input sections (as happens with -fdata-sections)
ChangeLog-1999:	* md.texi (define_peephole2): New section.
ChangeLog-1999:	* md.texi (No Constraints): Delete section.
ChangeLog-1999:	* rs6000.c (rs6000_encode_section_info): If ggc_p, use
ChangeLog-1999:	(ASM_EMIT_BSS): New macro: Emit an entry in the bss section.
ChangeLog-1999:	section.
ChangeLog-1999:	* config/mips/mips.h: Prototype sbss_section.
ChangeLog-1999:	(data_section, memory_address_p, rdata_section,
ChangeLog-1999:	readonly_data_section, simple_epilogue_p, text_section): Delete
ChangeLog-1999:	* varasm.c (named_section): Use ggc_alloc_string.
ChangeLog-1999:	* README: Add section discussing status of ELF ABI.
ChangeLog-1999:	* sbitmap.h (sbitmap_intersection_of_succs): Add prototype.
ChangeLog-1999:	(sbitmap_intersection_of_preds, sbitmap_union_of_succs,
ChangeLog-1999:	* sbitmap.c (sbitmap_intersection_of_succs): New function to compute
ChangeLog-1999:	the intersection of successors with the new flow graph structures.
ChangeLog-1999:	(sbitmap_intersection_of_preds): New function to compute the
ChangeLog-1999:	intersection of predecessors with the new flow graph structures.
ChangeLog-1999:	* arm/pe.c (arm_pe_unique_section): Likewise.
ChangeLog-1999:	* i386/interix.c (i386_pe_unique_section): Likewise.
ChangeLog-1999:	* i386/winnt.c (i386_pe_unique_section): Likewise.
ChangeLog-1999:	(rs6000_encode_section_info): Do not set SYMBOL_REF_FLAG for
ChangeLog-1999:	(rs6000_select_rtx_section): Suppress warning.
ChangeLog-1999:	start of the text section if DWARF2_GENERATE_TEXT_SECTION_LABEL is
ChangeLog-1999:	* dwarf2out.c (output_abbrev_section): Terminate with a zero.
ChangeLog-1999:	* pa/elf.h (BSS_SECTION_ASM_OP): Use .section .bss.
ChangeLog-1999:	* elfos.h (const_section): Output a tab before assembler directives.
ChangeLog-1999:	(ctors_section, dtors_section): Likewise.
ChangeLog-1999:	(mips_select_rtx_section): Put symbolic expressions in the
ChangeLog-1999:	data section, not the read-only data section.
ChangeLog-1999:	on variables in specific sections other than .sbss and .sdata.
ChangeLog-1999:	* mips/mips.c (mips_select_rtx_section): When TARGET_MIPS16, use
ChangeLog-1999:	function_section instead of text_section.
ChangeLog-1999:	(read_only_data_section, private_data_section,
ChangeLog-1999:	read_only_private_data_section): Always align CSECTs to doubleword
ChangeLog-1999:	* rs6000.h (read_only_data_section, private_data_section,
ChangeLog-1999:	read_only_private_data_section, toc_section): Align CSECT on
ChangeLog-1999:	(rs6000_gen_section_name): Initialize variable `last_period'.
ChangeLog-1999:	rs6000_longcall_ref, rs6000_encode_section_info): Const-ify a char*.
ChangeLog-1999:	(m32r_encode_section_info): Likewise.
ChangeLog-1999:	* varasm.c (named_section): Likewise for parameter 'reloc'.
ChangeLog-1999:	dtors_section): Use Pmode == DImode rather than TARGET_LONG64.
ChangeLog-1999:	(m32r_encode_section_info): Call init_idents.
ChangeLog-1999:	* dwarf2out.c (add_AT_lbl_offset): Rename from add_AT_section_offset.
ChangeLog-1999:	text_section_label, debug_line_section_label,
ChangeLog-1999:	debug_info_section_label, abbrev_section_label): New.
ChangeLog-1999:	with section instead of section name itself.
ChangeLog-1999:	(dwarf2out_init): Build internal label names for sections
ChangeLog-1999:	* toplev.c (compile_file): Disable -ffunction-sections and
ChangeLog-1999:	* config/c4x/c4x.c (c4x_emit_move_sequence, c4x_encode_section_info):
ChangeLog-1999:	named_section, decode_reg_name, make_decl_rtl, user_label_prefix):
ChangeLog-1999:	* varasm.c (strip_reg_name, named_section, decode_reg_name,
ChangeLog-2000:	if changing into .bss section.
ChangeLog-2000:	* config/rs6000/rs6000.c (rs6000_unique_section): Use
ChangeLog-2000:	* install.texi: remove i[345]86-*-winnt3.5 section.
ChangeLog-2000:	manpage, and create separate ENVIRONMENT section.
ChangeLog-2000:	a list, to keep track of the sections.
ChangeLog-2000:	a list, to keep track of the sections.
ChangeLog-2000:	(GHS_default_section_names): Allow to be exported.
ChangeLog-2000:	(GHS_current_section_names): Allow to be exported.
ChangeLog-2000:	(ghs_pragma_section): Move to v850-c.c.
ChangeLog-2000:	* rs6000/rs6000.c (rs6000_encode_section_info): Fix string length
ChangeLog-2000:	varasm.c (named_section, assemble_static_space,
ChangeLog-2000:	ia64.c (ia64_encode_section_info),
ChangeLog-2000:	i386.c (load_pic_register), ia64.c (ia64_encode_section_info),
ChangeLog-2000:	rs6000.c (rs6000_encode_section_info): Create string in
ChangeLog-2000:	* config/ia64/ia64.c (ia64_encode_section_info): Disallow decls with
ChangeLog-2000:	(EXTRA_SECTION_FUNCTIONS): Make the .progmem.gcc_sw_table section
ChangeLog-2000:	* gcc.texi, invoke.texi: Add new section discussing language
ChangeLog-2000:	search on the unwind region section.
ChangeLog-2000:	-fdata-sections to override the section attribute of a DECL.
ChangeLog-2000:	* config/ia64/ia64.c (ia64_encode_section_info): Likewise.
ChangeLog-2000:	* config/m32r/m32r.c (m32r_encode_section_info): Likewise.
ChangeLog-2000:	(rs6000_encode_section_info): Likewise.
ChangeLog-2000:	* rs6000/aix.h (ASM_DECLARE_FUNCTION_NAME): Use function_section
ChangeLog-2000:	* config/avr/avr-protos.h, config/avr/avr.c (unique_section,
ChangeLog-2000:	out_shift_with_cnt, ptrreg_to_str, cond_string, encode_section_info):
ChangeLog-2000:	(compute_section_prefix, assign_symbol_names): New fns.
ChangeLog-2000:	* aix.h (ASM_DECLARE_FUNCTION_NAME): Call named_section() or
ChangeLog-2000:	text_section() as appropriate instead of emitting text csect
ChangeLog-2000:	* rs6000.c (rs6000_override_options): Disable -ffunction-sections
ChangeLog-2000:	on AIX if debugging and -fdata-sections always.
ChangeLog-2000:	* cpp.texi: Add @section for assertions.
ChangeLog-2000:	* arm/linux-elf.h (text_section): Delete declaration.
ChangeLog-2000:	* config/rs6000/rs6000.c (rs6000_select_section): Rewrite to
ChangeLog-2000:	(rs6000_unique_section): New function.
ChangeLog-2000:	* config/rs6000/rs6000-protos.h: Add rs6000_unique_section.
ChangeLog-2000:	macros define the name of CTOR and DTOR sections.
ChangeLog-2000:	sections.
ChangeLog-2000:	(ia64_encode_section_info): Silence signed/unsigned warnings.
ChangeLog-2000:	(ASM_OUTPUT_SECTION_NAME): Add code attribute to sections containing
ChangeLog-2000:	(rs6000_select_rtx_section): Likewise.
ChangeLog-2000:	prototype sections.
ChangeLog-2000:	the data section, if NO_PROFILE_COUNTERS is defined.
ChangeLog-2000:	(asm_output_section_name): Add blanks for consistent output.
ChangeLog-2000:	(encode_section_info): Set TREE_READONLY for progmem data to
ChangeLog-2000:	avoid gas warnings about changed section attributes.
ChangeLog-2000:	(progmem_section): Add section attributes.
ChangeLog-2000:	unwind info section.
ChangeLog-2000:	(ia64_section_threshold): Make unsigned.
ChangeLog-2000:	* config/ia64/ia64.c (ia64_encode_section_info): Fix thinko
ChangeLog-2000:	* config/avr/avr.c (asm_output_section_name): bugfix.
ChangeLog-2000:	* config/avr/avr.c (asm_output_section_name): output section
ChangeLog-2000:	* config/avr/libgcc.S (.text.libgcc): declare section attributes.
ChangeLog-2000:	objc_section_init ...
ChangeLog-2000:	cross section of ALL_LINGUAS and LINGUAS.
ChangeLog-2000:	(ctors_section, dtors_section): Prototype.
ChangeLog-2000:	(sbss_section, sdata_section): Prototype.
ChangeLog-2000:	(readonly_section, link_section, literals_section): Prototype.
ChangeLog-2000:	(ctors_section, dtors_section): Prototype.
ChangeLog-2000:	and send it to the eh_data section.
ChangeLog-2000:	exception table for entire compilation unit to eh_data section.
ChangeLog-2000:	Send output to eh_data section.
ChangeLog-2000:	a single function to eh_data section.
ChangeLog-2000:	* varasm.c (eh_frame_section): Revert change to argument list.
ChangeLog-2000:	eh_frame_section as function of no args, not of unspecified args.
ChangeLog-2000:	should be placed in the .bss section.
ChangeLog-2000:	* rs6000/rs6000.c (rs6000_select_section): Treat CONSTRUCTOR like
ChangeLog-2000:	* config/ia64/ia64.c (ia64_encode_section_info): Exit early
ChangeLog-2000:	(ia64_encode_section_info): Likewise.
ChangeLog-2000:	* config/ia64/ia64.c (ia64_encode_section_info): Add check for
ChangeLog-2000:	* config/ia64/ia64.c (ia64_encode_section_info): Handle the case
ChangeLog-2000:	has had its section info changed in such a way as to move it out
ChangeLog-2000:	(EH_FRAME_SECTION_ASM_OP): Define to IA_64.unwind section.
ChangeLog-2000:	* config/ia64/sysv4.h (SELECT_SECTION): Use data_section if
ChangeLog-2000:	const section to output a CONSTRUCTOR based on the same conditions
ChangeLog-2000:	(sbitmap_intersection_of_succs): Minor cleanups.
ChangeLog-2000:	(sbitmap_intersection_of_preds, sbitmap_union_of_succs): Likewise.
ChangeLog-2000:	for entries in the .bss section
ChangeLog-2000:	* varasm.c (named_section): Likewise.
ChangeLog-2000:	* config/avr/avr.c (encode_section_info): sets SYMBOL_REF_FLAG if
ChangeLog-2000:	* rs6000-protos.h (rs6000_select_section): Provide prototype.
ChangeLog-2000:	(rs6000_select_rtx_section): Likewise.
ChangeLog-2000:	(rs6000_encode_section_info): Likewise.
ChangeLog-2000:	(sdata_section): Likewise.
ChangeLog-2000:	(sdata2_section): Likewise.
ChangeLog-2000:	(sbss_section): Likewise.
ChangeLog-2000:	* sysv4.h (rs6000_select_section): Delete prototype.
ChangeLog-2000:	(rs6000_select_rtx_section): Likewise.
ChangeLog-2000:	(rs6000_encode_section_info): Likewise.
ChangeLog-2000:	(sdata_section): Likewise.
ChangeLog-2000:	(sdata2_section): Likewise.
ChangeLog-2000:	(sbss_section): Likewise.
ChangeLog-2000:	* aix.h (toc_section): Use LCTOC..1 under AIX for the start
ChangeLog-2000:	* eabi-ci.asm: Put a label at the start of the .eh_frame section.
ChangeLog-2000:	* eabi-cn.asm: Put a zero at the end of the .eh_frame section.
ChangeLog-2000:	(toc_section): Likewise and .toc pseudo-op.
ChangeLog-2000:	(init_v4_pic): Move it into a section dealing with TOC registers.
ChangeLog-2000:	arm_pe_encode_section_info): Likewise.
ChangeLog-2000:	* m32r/m32r.c (m32r_encode_section_info): Likewise.
ChangeLog-2000:	* mcore/mcore.c (mcore_encode_section_info): Likewise.
ChangeLog-2000:	section naming to that prior to 2000-01-07 patch.
ChangeLog-2000:	* i386/sco5.h (INIT_SECTION_ASM_OP_COFF): Rename section to "ctor".
ChangeLog-2000:	* output.h (tdesc_section): Prototype.
ChangeLog-2000:	that .section directives are always prefixed by a tab.
ChangeLog-2000:	flag_data_sections or UNIQUE_SECTION_P are true.
ChangeLog-2000:	* config/i386/winnt.c (i386_pe_unique_section): Cope with
ChangeLog-2000:	* config/i386/interix.c (i386_pe_unique_section): Cope with
ChangeLog-2000:	(UNIQUE_SECTION_P): Always generate a unique section if
ChangeLog-2000:	flag_data_sections is true.
ChangeLog-2000:	(UNIQUE_SECTION): Also generate unique sections for
ChangeLog-2000:	(ASM_OUTPUT_ALIGNED_BSS): Redefine to use named_section().
ChangeLog-2000:	named_section().
ChangeLog-2000:	(toc_section): Likewise and .toc pseudo-op.
ChangeLog-2001:	* dwarf2out.c (compute_section_prefix): Avoid cast warning.
ChangeLog-2001:	* config/alpha/alpha.h (literal_section): Avoid ASM_OUTPUT_INT.
ChangeLog-2001:	extracted from ASM_OUTPUT_INT in sysv4.h.  Use in_text_section()
ChangeLog-2001:	and in_toc_section() rather than the in_section variable.
ChangeLog-2001:	* config/rs6000/sysv4.h (TOC_SECTION_FUNCTION): Add in_toc_section().
ChangeLog-2001:	(check_and_change_labels): Remove section-change special case.
ChangeLog-2001:	(SECTION_VMS_GLOBAL, SECTION_VMS_INITIALIZE): New section attributes.
ChangeLog-2001:	(vms_section_type_flags, vms_asm_named_section): Handle them.
ChangeLog-2001:	(ranges_section_label): Add.
ChangeLog-2001:	(dwarf2out_init): Initialize ranges_section_label.
ChangeLog-2001:	(dwarf2out_finish): Emit ranges_section_label.
ChangeLog-2001:	description for Trouble section.
ChangeLog-2001:	* config/rs6000/rs6000.c (rs6000_unique_section): Simplify and
ChangeLog-2001:	correct code selecting section.
ChangeLog-2001:	* output.h (rdata_section): Prototype.
ChangeLog-2001:	* h8300.c (h8300_asm_named_section): Wrap with !OBJECT_FORMAT_ELF.
ChangeLog-2001:	* mcore.c (mcore_asm_named_section): Wrap with OBJECT_FORMAT_ELF.
ChangeLog-2001:	* sh.c (sh_asm_named_section): Wrap with !OBJECT_FORMAT_ELF.
ChangeLog-2001:	* sparc.c (sparc_elf_asm_named_section): Wrap with OBJECT_FORMAT_ELF.
ChangeLog-2001:	array, reset the known alignment of the MEM for the section to
ChangeLog-2001:	* elfos.h (SELECT_SECTION): Classify data section.
ChangeLog-2001:	* config/arm/arm.c (arm_elf_asm_named_section): Only build for elf
ChangeLog-2001:	Don't register empty .eh_frame sections.
ChangeLog-2001:	(mmix_unique_section): Const-ify.
ChangeLog-2001:	* doc/install-old.texi: Move some sections out to ...
ChangeLog-2001:	... here.  New files.  Make into chapters rather than sections.
ChangeLog-2001:	initializers into 'const' section
ChangeLog-2001:	* Makefile.in (POD2MAN): Don't include --section=1.
ChangeLog-2001:	--section=1 in calls to $(POD2MAN).
ChangeLog-2001:	the SEE ALSO man page section.
ChangeLog-2001:	and fsf-funding(7) in the SEE ALSO man page section.
ChangeLog-2001:	gfdl(7) and fsf-funding(7) in the SEE ALSO man page section.
ChangeLog-2001:	* doc/gcc.texi, doc/contrib.texi: Move section headings into
ChangeLog-2001:	* alpha/unicosmk.h (common_section, ssib_section): Prototype.
ChangeLog-2001:	* config/alpha/alpha.c (decl_in_text_section): New.
ChangeLog-2001:	(alpha_encode_section_info, alpha_end_function): Likewise.
ChangeLog-2001:	into linkonce sections if possible.
ChangeLog-2001:	* config/rs6000/rs6000.c (rs6000_select_section): Handle
ChangeLog-2001:	* config/rs6000/rs6000.c (rs6000_select_section): Handle
ChangeLog-2001:	* arm/aof.h (aof_text_section, aof_data_section): Don't declare.
ChangeLog-2001:	(common_section): Delete unused variable.
ChangeLog-2001:	* output.h (exports_section): Prototype.
ChangeLog-2001:	(EXTRA_SECTION_FUNCTIONS): Prototype const_section.
ChangeLog-2001:	* mcore.h (switch_to_section): Make static and prototype.
ChangeLog-2001:	* rs6000-protos.h (read_only_data_section,
ChangeLog-2001:	read_only_private_data_section): Prototype.
ChangeLog-2001:	* output.h (sdata_section): Add prototype.
ChangeLog-2001:	* vax-protos.h (const_section): Add prototype.
ChangeLog-2001:	* dwarf2out.c (PTR_SIZE, default_eh_frame_section): Move outside
ChangeLog-2001:	* output.h (default_exception_section, default_eh_frame_section):
ChangeLog-2001:	* darwin-protos.h (constructor_section, destructor_section,
ChangeLog-2001:	mod_init_section, mod_term_section): Prototype.
ChangeLog-2001:	objc_section_init declaration.
ChangeLog-2001:	(EXTRA_SECTION_FUNCTIONS): Prototype objc_section_init.
ChangeLog-2001:	(objc_section_init, try_section_alias): Make static.
ChangeLog-2001:	(alias_section): Make static and hide unused function.
ChangeLog-2001:	* config/darwin-protos.h (darwin_exception_section): Declare.
ChangeLog-2001:	(darwin_eh_frame_section): Declare.
ChangeLog-2001:	* target.h (struct gcc_target): Add asm_out.exception_section,
ChangeLog-2001:	asm_out.eh_frame_section.
ChangeLog-2001:	* output.h (default_exception_section): Declare.
ChangeLog-2001:	(default_eh_frame_section): Declare.
ChangeLog-2001:	(default_eh_frame_section): New function.
ChangeLog-2001:	section.
ChangeLog-2001:	* varasm.c (default_exception_section): Rename from
ChangeLog-2001:	exception_section, remove EXCEPTION_SECTION macro.
ChangeLog-2001:	* config/darwin.h (darwin_eh_frame_section): New function.
ChangeLog-2001:	(nextstep_exception_section): New function.
ChangeLog-2001:	(nextstep_eh_frame_section): New function.
ChangeLog-2001:	* config/i386/i386.c (sco_asm_named_section): Delete.
ChangeLog-2001:	* pe.c (arm_pe_unique_section): Const-ify.
ChangeLog-2001:	(switch_to_section): Add static prototype.
ChangeLog-2001:	* output.h (drectve_section): Prototype.
ChangeLog-2001:	* arm-protos.h (rdata_section, zero_init_section, common_section):
ChangeLog-2001:	* a29k-protos.h (literal_section): Prototype.
ChangeLog-2001:	(EXTRA_SECTION_FUNCTIONS): Add darwin_exception_section.
ChangeLog-2001:	* config/darwin.c (darwin_encode_section_info): Handle case of
ChangeLog-2001:	* varasm.c (set_named_section_flags): Initialize "declared".
ChangeLog-2001:	(named_section_first_declaration): New function.
ChangeLog-2001:	(default_elf_asm_named_section): Use it.
ChangeLog-2001:	* output.h (named_section_first_declaration): New.
ChangeLog-2001:	the gas section-name-as-label feature.
ChangeLog-2001:	(i386 and x86-64 Options): Rename i386 options section.
ChangeLog-2001:	handle_section_attribute, handle_aligned_attribute,
ChangeLog-2001:	(mips_asm_file_start): Add new section to pass abi to gdb.
ChangeLog-2001:	* avr.c (output_movsisf, encode_section_info): Likewise.
ChangeLog-2001:	* avr.c (avr_regnames, encode_section_info): Likewise.
ChangeLog-2001:	* elfos.h (const_section): Likewise.
ChangeLog-2001:	* mips.c (mips_output_conditional_branch, mips_unique_section):
ChangeLog-2001:	* configure.in: Check whether assembler supports section merging.
ChangeLog-2001:	* varasm.c (variable_section, output_constant_pool): Pass alignment
ChangeLog-2001:	(mergeable_string_section): New.
ChangeLog-2001:	(mergeable_constant_section): New.
ChangeLog-2001:	(default_elf_asm_named_section): Output SECTION_MERGE and
ChangeLog-2001:	* output.h (mergeable_string_section): New.
ChangeLog-2001:	(mergeable_constant_section): New.
ChangeLog-2001:	Define if assembler has working .subsection -1 support.
ChangeLog-2001:	Put constant into special SHF_MERGE sections if the linker should
ChangeLog-2001:	Put constant into special SHF_MERGE sections if the linker should
ChangeLog-2001:	has working .subsection -1 support.
ChangeLog-2001:	* config/arm/arm.c (arm_elf_asm_named_section): Output SECTION_MERGE
ChangeLog-2001:	* config/sparc/sparc.c (sparc_elf_asm_named_section): Use
ChangeLog-2001:	default_elf_asm_named_section for SHF_MERGE sections.
ChangeLog-2001:	unicosmk_defer_case_vector, unicosmk_unique_section,
ChangeLog-2001:	unicosmk_output_align, unicosmk_text_section, unicosmk_data_section,
ChangeLog-2001:	unicosmk_asm_named_section, unicosmk_insert_attributes,
ChangeLog-2001:	unicosmk_section_type_flags, symbolic_operand,
ChangeLog-2001:	unicosmk_section_type_flags, unicosmk_unique_section,
ChangeLog-2001:	unicosmk_add_call_info_word, unicosmk_text_section,
ChangeLog-2001:	unicosmk_data_section, unicosmk_extern_list, unicosmk_extern_head,
ChangeLog-2001:	(alpha_encode_section_info): New.
ChangeLog-2001:	(darwin_encode_section_info): Ditto.
ChangeLog-2001:	i386_pe_asm_named_section.
ChangeLog-2001:	independent text section if !JUMP_TABLES_IN_TEXT_SECTION.  Use
ChangeLog-2001:	of CRT_END section.  Tidy ifdefs.
ChangeLog-2001:	their own section, instead of scattered around.
ChangeLog-2001:	(default_dtor_section_asm_out_destructor): Use assemble_align.
ChangeLog-2001:	(default_named_section_asm_out_constructor): Likewise.
ChangeLog-2001:	(default_ctor_section_asm_out_constructor): Likewise.
ChangeLog-2001:	(current_section_name, current_section_flags): New.
ChangeLog-2001:	(ASM_OUTPUT_ALIGNED_LOCAL): Use bss_section.
ChangeLog-2001:	(mips_asm_file_start): Remove extra .section directive.  Use
ChangeLog-2001:	(mips_unique_section): Use const char * as needed for warnings.
ChangeLog-2001:	(iris6_asm_named_section_1): Renamed from iris6_asm_named_section;
ChangeLog-2001:	(iris6_asm_named_section): New.
ChangeLog-2001:	(iris_section_align_entry_eq, iris_section_align_entry_hash): New.
ChangeLog-2001:	(iris6_asm_output_align, iris6_section_align_1): New.
ChangeLog-2001:	* varasm.c (text_section): Allow TEXT_SECTION to override the
ChangeLog-2001:	section after emitting the function.
ChangeLog-2001:	* varasm.c (named_section_flags): Remove align parameter.
ChangeLog-2001:	* target.h (target.asm_out.named_section): Remove align parameter.
ChangeLog-2001:	(get_named_section_flags, set_named_section_flags): New.
ChangeLog-2001:	(named_section_flags): Use them.
ChangeLog-2001:	(named_section): Do decl vs section flags check here...
ChangeLog-2001:	(default_section_type_flags): ... not here.
ChangeLog-2001:	(resolve_unique_section): Mark reloc unused.
ChangeLog-2001:	* varasm.c (data_section): Fix typo in comment.
ChangeLog-2001:	* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Fix
ChangeLog-2001:	(rs6000_elf_section_type_flags): Actually return a value.
ChangeLog-2001:	(s390_final_chunkify): Don't start a new literal pool on section
ChangeLog-2001:	(default_named_section_asm_out_destructor): New.
ChangeLog-2001:	(dtors_section, default_dtor_section_asm_out_destructor): New.
ChangeLog-2001:	(default_named_section_asm_out_constructor): New.
ChangeLog-2001:	(ctors_section, default_ctor_section_asm_out_constructor): New.
ChangeLog-2001:	(__CTOR_LIST__): Use attribute section when possible.
ChangeLog-2001:	config/svr3.h pertaining to section manipulation.
ChangeLog-2001:	* defaults.h (JCR_SECTION_NAME): Define if we have named section
ChangeLog-2001:	* config/mips/mips.c (mips_unique_section): New. Copied from
ChangeLog-2001:	* config/mips/mips-protos.h (mips_unique_section): New
ChangeLog-2001:	* config/mips/elf.h (UNIQUE_SECTION): Use mips_unique_section.
ChangeLog-2001:	* config/sh/sh.c (sh_asm_named_section): Fix typo in align
ChangeLog-2001:	* target.h (gcc_target): Add asm_out.named_section,
ChangeLog-2001:	section_type_flags, have_named_sections.
ChangeLog-2001:	* c-common.c (decl_attributes): Check targetm.have_named_sections
ChangeLog-2001:	* varasm.c (exception_section): Likewise.
ChangeLog-2001:	(output_call_frame_info): Use named_section_flags.
ChangeLog-2001:	* varasm.c (in_eh_frame, eh_frame_section): Remove.
ChangeLog-2001:	(named_section_flags): New.
ChangeLog-2001:	(named_section): Use it and targetm.section_type_flags.
ChangeLog-2001:	(resolve_unique_section): New.
ChangeLog-2001:	(default_section_type_flags): New.
ChangeLog-2001:	(default_no_named_section, default_elf_asm_named_section): New.
ChangeLog-2001:	(default_coff_asm_named_section, default_pe_asm_named_section): New.
ChangeLog-2001:	(__EH_FRAME_BEGIN__, __FRAME_END__): Use attribute section.
ChangeLog-2001:	* config/nextstep.h: Error until named sections implemented.
ChangeLog-2001:	* config/a29k/a29k.c (a29k_asm_named_section): New.
ChangeLog-2001:	(vms_section_type_flags, vms_asm_named_section): New.
ChangeLog-2001:	* config/arm/arm.c (arm_elf_asm_named_section): New.
ChangeLog-2001:	* config/avr/avr.c (asm_output_section_name): Remove.
ChangeLog-2001:	* config/c4x/c4x.c (c4x_asm_named_section): New.
ChangeLog-2001:	* config/h8300/h8300.c (h8300_asm_named_section): New.
ChangeLog-2001:	* config/i386/i386.c (sco_asm_named_section): New.
ChangeLog-2001:	(i386_pe_section_type_flags): New.
ChangeLog-2001:	(i386_pe_asm_named_section): New.
ChangeLog-2001:	* config/m68k/m68k.c (m68k_coff_asm_named_section): New.
ChangeLog-2001:	* config/mcore/mcore.c (mcore_asm_named_section): New.
ChangeLog-2001:	* config/mips/mips.c (iris6_asm_named_section): New.
ChangeLog-2001:	* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): New.
ChangeLog-2001:	(xcoff_asm_named_section): New.
ChangeLog-2001:	* config/sh/sh.c (sh_asm_named_section): New.
ChangeLog-2001:	* config/sparc/sparc.c (sparc_elf_asm_named_section): New.
ChangeLog-2001:	* config/m68hc11/larith.asm (_exit): Split in several sub-sections
ChangeLog-2001:	section.
ChangeLog-2001:	(__do_global_ctors): New for constructors in specific install section.
ChangeLog-2001:	(__map_data_section): Map data sections before running constructors.
ChangeLog-2001:	(CTORS_SECTION_ASM_OP): Define to put in readonly section.
ChangeLog-2001:	* dwarf2out.c (compute_section_prefix): Localize use of ``p''.
ChangeLog-2001:	(darwin_encode_section_info):  Call it and update_non_lazy_ptrs
ChangeLog-2001:	flag_function_sections for XCOFF.
ChangeLog-2001:	Remove saved_in_section and associated no-op code.
ChangeLog-2001:	reword necessary packages section.  Delete 4.x assembler bug info.
ChangeLog-2001:	* config/elfos.h (UNIQUE_SECTION): Enable .bss section with
ChangeLog-2001:	* config/elfos.h (UNIQUE_SECTION): Enable .bss section.
ChangeLog-2001:	the conditionally compiled section.
ChangeLog-2001:	* config/darwin.c (darwin_encode_section_info): Don't mark any
ChangeLog-2001:	chapter about various build hints and history.  Add section
ChangeLog-2001:	section.
ChangeLog-2001:	(DEBUG_MACINFO_SECTION): New. DWARF2 macro info section name.
ChangeLog-2001:	(DEBUG_MACINFO_SECTION_LABEL): New. DWARF2 macro info section label.
ChangeLog-2001:	(macinfo_section_label): New. DWARF2 macro info section label.
ChangeLog-2001:	for the section.
ChangeLog-2001:	case for flag_no_mach_text_sections.
ChangeLog-2001:	* config/darwin.c (flag_no_mach_text_sections): Remove.
ChangeLog-2001:	section.
ChangeLog-2001:	* doc/extend.texi (Pragmas): New section.
ChangeLog-2001:	(Specific, alpha*-*-osf*): Removed old section, obsolete.
ChangeLog-2001:	* config/darwin.c (darwin_encode_section_info):  Rewrite to simplify
ChangeLog-2001:	(m32r_encode_section_info): Cast return of
ChangeLog-2001:	Move definition in the RTX_CODE section.
ChangeLog-2001:	(darwin_encode_section_info): New function.
ChangeLog-2001:	(Thumb Options): Delete; merged into above section.
ChangeLog-2001:	section pointer alignment.
ChangeLog-2001:	generic configuration section to handle *-*-freebsd*.  Also,
ChangeLog-2001:	(i[34567]86-*-freebsd* in machine-specific section): Use it.
ChangeLog-2001:	(alpha*-*-freebsd* in machine-specific section): Likewise.
ChangeLog-2001:	(Installing GNU CC on the Sun): Remove section.
ChangeLog-2001:	.debug_loc section or not.
ChangeLog-2001:	(__init_bss_section, __map_data_section): Optimize for 68HC12.
ChangeLog-2001:	max-delay-slot-live-search' and reorder --param section.
ChangeLog-2001:	* invoke.texi: Add a section documenting Objective-C options.
ChangeLog-2001:	* invoke.texi: Update section on Link Options accordingly.
ChangeLog-2001:	functions in named sections -- data items can still go into unique
ChangeLog-2001:	sections, but they have normal names (ie $LIT$ and $DATA$).
ChangeLog-2001:	* rtl.h (bss_section): Likewise.
ChangeLog-2001:	(toc_section): Ditto.
ChangeLog-2001:	* rtl.texi (COMPARE): Clarify documentation and reference section
ChangeLog-2001:	* config/i386/cygwin.h: Declare ctor_section, dtor_section
ChangeLog-2001:	drectve_section, switch_to_section.
ChangeLog-2001:	* dwarf2out.c (compute_section_prefix): Use lbasename instead
ChangeLog-2001:	* config/avr/avr.c (pttreg_to_str, unique_section): Likewise.
ChangeLog-2001:	* extend.texi (Attribute Syntax): New section.
ChangeLog-2001:	* pa-64.h (text_section): Remove declaration.
ChangeLog-2001:	(Standards): Link to section of manual mentioning gcj/Java
ChangeLog-2001:	* config/ia64/ia64-protos.h (sdata_section, sbbs_section): Add
ChangeLog-2001:	(ia64_encode_section_info): New local string.  Use for ggc_alloc_string
ChangeLog-2001:	pic_label_name in a linkonce section.
ChangeLog-2001:	(encode_section_info): Optimize if/else.
ChangeLog-2001:	(Service): Refer to the Bug Reporting section instead of
ChangeLog-2001:	* extend.texi:  Move C++-extension-related node from the C section
ChangeLog-2001:	into the C++ section.
ChangeLog-2001:	* invoke.texi: Add manpage sections BUGS and AUTHOR.  Use
ChangeLog-2002:	(alpha_encode_section_info): Likewise.  Handle -msmall-text.
ChangeLog-2002:	the text section.
ChangeLog-2002:	(i386_pe_encode_section_info): Call gen_fastcall_suffix() if a symbol
ChangeLog-2002:	* doc/invoke.texi: Add new "Darwin Options" section.
ChangeLog-2002:	* except.c (default_exception_section): Move variable into the
ChangeLog-2002:	(i386_pe_encode_section_info): Likewise.
ChangeLog-2002:	section ensure each constant is padded to multiple of entity size.
ChangeLog-2002:	* varasm.c (default_exception_section): Move to...
ChangeLog-2002:	* except.c (default_exception_section): ... here. Make
ChangeLog-2002:	* dwarf2out.c (default_eh_frame_section): Make .eh_frame read-only
ChangeLog-2002:	when linking read-only and read-write sections together.
ChangeLog-2002:	cleanup_counts_index, index_counts_file, struct section_reference,
ChangeLog-2002:	(categorize_decl_for_section): Don't use mergeable sections if
ChangeLog-2002:	Reset counter if flag_function_sections.
ChangeLog-2002:	(output_comp_unit, compute_section_prefix, is_type_die, break_out_includes,
ChangeLog-2002:	output_mi_thunk; make static; always use function_section.
ChangeLog-2002:	* varasm.c (default_section_type_flags_1): Set SECTION_NOTYPE for
ChangeLog-2002:	init array sections.
ChangeLog-2002:	(default_elf_asm_named_section): Mind SECTION_NOTYPE.
ChangeLog-2002:	* config/arm/arm.c (arm_elf_asm_named_section): Likewise.  Also
ChangeLog-2002:	(ix86_encode_section_info): Don't ever generate TLSGD or TLSLD for
ChangeLog-2002:	* doc/extend.texi: Delete "Naming Types" section.  Change all
ChangeLog-2002:	cross-references to that section to refer to "Typeof" instead.
ChangeLog-2002:	* predict.c (choose_function_section): Avoid choice for linkonce functions.
ChangeLog-2002:	* doc/vms.texi: Blow away false include file section.
ChangeLog-2002:	(mips_encode_section_info): Keep track of local strings.
ChangeLog-2002:	* config/alpha/alpha.c (alpha_encode_section_info): Use
ChangeLog-2002:	* config/ia64/ia64.c (ia64_encode_section_info): Likewise.
ChangeLog-2002:	* config/i386/i386.c (ix86_encode_section_info): Likewise.
ChangeLog-2002:	* varasm.c (force_data_section): Remove.
ChangeLog-2002:	text_section.
ChangeLog-2002:	text section.
ChangeLog-2002:	function-sections and data-sections functionality on AIX.
ChangeLog-2002:	i386_pe_dllimport_name_p, i386_pe_unique_section,
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_elf_encode_section_info): Use
ChangeLog-2002:	(rs6000_xcoff_encode_section_info): Likewise.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section): Append
ChangeLog-2002:	(rs6000_xcoff_unique_section): Only set section name for public
ChangeLog-2002:	(rs6000_xcoff_section_type_flags): Store log2 alignment in flags.
ChangeLog-2002:	(rs6000_xcoff_section_type_flags): New function.
ChangeLog-2002:	(rs6000_elf_section_type_flags): Call default_section_type_flags_1
ChangeLog-2002:	(rs6000_xcoff_select_section): Use decl_readonly_section_1 to
ChangeLog-2002:	* frv.c (frv_unique_section, frv_select_section,
ChangeLog-2002:	frv_select_rtx_section): Delete.
ChangeLog-2002:	* frv.c (frv_encode_section_info): Fix error in last change.
ChangeLog-2002:	(rs6000_elf_encode_section_info): ATTRIBUTE_UNUSED.
ChangeLog-2002:	(rs6000_elf_select_section): Call default_elf_select_section_1.
ChangeLog-2002:	(rs6000_elf_unique_section): Call default_unique_section_1.
ChangeLog-2002:	(rs6000_xcoff_asm_named_section): Determine storage mapping class.
ChangeLog-2002:	(rs6000_xcoff_select_section): Update based on defaults.
ChangeLog-2002:	(rs6000_xcoff_unique_section): Set to basic name if not common.
ChangeLog-2002:	targetm.have_srodata_section if SDATA_EABI.
ChangeLog-2002:	frv_select_section, frv_select_rtx_section,
ChangeLog-2002:	frv_encode_section_info, frv_unique_section): Delete.
ChangeLog-2002:	encode_section_info): Update to match target hook specification.
ChangeLog-2002:	(function_prologue, function_epilogue, encode_section_info):
ChangeLog-2002:	* target.h (gcc_target): Add have_srodata_section member.
ChangeLog-2002:	* varasm.c (section_category): Add SECCAT_SRODATA.
ChangeLog-2002:	(categorize_decl_for_section): Return SECCAT_SRODATA for sdata if
ChangeLog-2002:	(decl_readonly_section_1): True for SECCAT_SRODATA also.
ChangeLog-2002:	(default_elf_select_section_1): Map SECCAT_SRODATA to .sdata2.
ChangeLog-2002:	(default_unique_section_1): Likewise.
ChangeLog-2002:	xtensa_multibss_section_type_flags.
ChangeLog-2002:	* config/xtensa/xtensa.c (xtensa_multibss_section_type_flags): Define.
ChangeLog-2002:	in new "builtins.c" section.  Place the build_range_type prototype
ChangeLog-2002:	* varasm.c (default_section_type_flags): Append _1 to name with
ChangeLog-2002:	(decl_readonly_section): Likewise.
ChangeLog-2002:	(default_elf_select_section): Likewise.
ChangeLog-2002:	(default_unique_section): Likewise.
ChangeLog-2002:	(categorize_decl_for_section): Add shlib parameter to use in place
ChangeLog-2002:	section.  Mention that it is enabled by -Wall.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_elf_select_section): Treat
ChangeLog-2002:	(rs6000_elf_unique_section): Likewise.
ChangeLog-2002:	(rs6000_xcoff_asm_named_section): Rename.
ChangeLog-2002:	* dwarf2out.c (default_eh_frame_section, output_die_symbol): Use
ChangeLog-2002:	* rs6000.c (output_mi_thunk): Return to function section on
ChangeLog-2002:	* v850.c (v850_select_section): Mark parameter with
ChangeLog-2002:	(machopic_select_section): Use parentheses around && within ||.
ChangeLog-2002:	* avr.h (progmem_section): Likewise.
ChangeLog-2002:	drectve_section): Define.
ChangeLog-2002:	* config/frv/frv.c (frv_encode_section_info): Likewise.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_gen_section_name): Use xmalloc
ChangeLog-2002:	(decl_readonly_section): Declare.
ChangeLog-2002:	* varasm.c (decl_readonly_section): New.
ChangeLog-2002:	(default_section_type_flags, default_select_section): Use it.
ChangeLog-2002:	* config/arm/pe.c (arm_pe_unique_section): Likewise.
ChangeLog-2002:	* config/i386/interix.c (i386_pe_unique_section): Likewise.
ChangeLog-2002:	* config/i386/winnt.c (i386_pe_unique_section): Likewise.
ChangeLog-2002:	* config/mcore/mcore.c (mcore_unique_section): Likewise.
ChangeLog-2002:	* config/mips/mips.c (mips_unique_section): Likewise.
ChangeLog-2002:	.section prefix.
ChangeLog-2002:	--gc-sections if -r.
ChangeLog-2002:	(mips_asm_file_start): Don't emit mdebug.<ABI> sections on IRIX 5/6.
ChangeLog-2002:	Misc cleanups and revisions to the vector extensions section.
ChangeLog-2002:	(avr_section_type_flags): New, handle .noinit* sections.
ChangeLog-2002:	* config/avr/libgcc.S (_exit): Split in .fini9 and .fini0 sections.
ChangeLog-2002:	(alpha_encode_section_info): Handle TLS symbols.
ChangeLog-2002:	into linkonce sections.
ChangeLog-2002:	* config/fr30/fr30.h (BSS_SECTION_ASM_OP): Use ".section .bss"
ChangeLog-2002:	(TARGET_ASM_NAMED_SECTION): Now default_coff_asm_named_section
ChangeLog-2002:	* sh.c (sh_asm_named_section): Don't declare / define.
ChangeLog-2002:	(ia64_encode_section_info): Handle tls symbols.
ChangeLog-2002:	(ix86_encode_section_info): Rename from i386_; handle tls decls.
ChangeLog-2002:	* doc/extend.texi (C99 Thread-Local Edits): New subsection.
ChangeLog-2002:	(C++98 Thread-Local Edits): New subsection.
ChangeLog-2002:	* varasm.c (default_section_type_flags): Check for VAR_DECL
ChangeLog-2002:	* varasm.c (default_section_type_flags): Handle tls data and
ChangeLog-2002:	default sections.
ChangeLog-2002:	(default_unique_section): Handle tls sections.
ChangeLog-2002:	(default_section_type_flags): Handle .tdata and .tbss.
ChangeLog-2002:	(default_elf_asm_named_section): Handle SECTION_TLS.
ChangeLog-2002:	(categorize_decl_for_section): Handle DECL_THREAD_LOCAL.
ChangeLog-2002:	* config/alpha/alpha.c (alpha_encode_section_info): Use the new hook.
ChangeLog-2002:	* config/cris/cris.c (cris_encode_section_info): Likewise.
ChangeLog-2002:	* config/i386/i386.c (i386_encode_section_info): Likewise.
ChangeLog-2002:	* config/ia64/ia64.c (ia64_encode_section_info): Likewise.
ChangeLog-2002:	* config/sh/sh.c (sh_encode_section_info): Likewise.
ChangeLog-2002:	* config/avr/avr.c (avr_encode_section_info): Correct prototype.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_xcoff_unique_section): Mark
ChangeLog-2002:	* target.h (encode_section_info): New.
ChangeLog-2002:	(switch_to_section): Replace in_rdata case with in_readonly_data.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_elf_encode_section_info): Rename
ChangeLog-2002:	from rs6000_encode_section_info; make static.
ChangeLog-2002:	(rs6000_xcoff_encode_section_info): New.
ChangeLog-2002:	(vms_select_section): Fix typo.
ChangeLog-2002:	* target.h (select_rtx_section): New.
ChangeLog-2002:	(default_select_rtx_section, default_elf_select_rtx_section): New.
ChangeLog-2002:	* config/darwin.c (machopic_select_rtx_section): ... here.
ChangeLog-2002:	* config/nextstep.c (machopic_select_rtx_section): ... here.
ChangeLog-2002:	(nextstep_select_section): Rename variable to avoid macro clash.
ChangeLog-2002:	* config/alpha/alpha.c (alpha_elf_select_rtx_section): ... here.
ChangeLog-2002:	* config/ia64/ia64.c (ia64_select_rtx_section): ... here.
ChangeLog-2002:	(ia64_aix_select_rtx_section): New.
ChangeLog-2002:	* config/mips/mips.c (mips_select_rtx_section): Make static.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_xcoff_select_rtx_section): ... here.
ChangeLog-2002:	(rs6000_elf_select_rtx_section): Rename from rs6000_select_rtx_section;
ChangeLog-2002:	make static, fall back to default_elf_select_rtx_section.
ChangeLog-2002:	* config/sparc/sparc.c (sparc_aout_select_rtx_section): ... here.
ChangeLog-2002:	* config/romp/romp.c (romp_select_rtx_section): New.
ChangeLog-2002:	* config/s390/s390.c (s390_select_rtx_section): New.
ChangeLog-2002:	(xtensa_select_rtx_section): New.
ChangeLog-2002:	(ASM_OUTPUT_POOL_PROLOGUE): Update call to resolve_unique_section.
ChangeLog-2002:	* varasm.c (enum in_section): Add in_readonly_data.
ChangeLog-2002:	(text_section, data_section): Tidy.
ChangeLog-2002:	(readonly_data_section): Use READONLY_DATA_SECTION_ASM_OP if present.
ChangeLog-2002:	config/sparc/sysv4.h (SELECT_RTX_SECTION): Use readonly_data_section.
ChangeLog-2002:	* config/m32r/m32r.c (m32r_select_section): Likewise.
ChangeLog-2002:	* config/m88k/m88k.c (m88k_select_section): Likewise.
ChangeLog-2002:	* config/mips/mips.c (mips_select_rtx_section): Likewise.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_select_rtx_section): Likewise.
ChangeLog-2002:	(rs6000_elf_select_section): Likewise.
ChangeLog-2002:	* config/v850/v850.c (v850_select_section): Likewise.
ChangeLog-2002:	(i386_pe_unique_section): Always use .rdata prefix.
ChangeLog-2002:	* config/pa/som.h (readonly_data): Always switch to read-only section.
ChangeLog-2002:	* config/sparc/sparc.c (sparc_aout_select_section): Fixed typo.
ChangeLog-2002:	* target.h (select_section, unique_section): New.
ChangeLog-2002:	* varasm.c (resolve_unique_section): Use hooks instead of macros.
ChangeLog-2002:	(variable_section, output_constant_def_contents): Likewise.
ChangeLog-2002:	(default_select_section, default_unique_section): New.
ChangeLog-2002:	(categorize_decl_for_section, default_elf_select_section): New.
ChangeLog-2002:	* config/darwin.h (ALIAS_SECTION, try_section_alias): Remove.
ChangeLog-2002:	* config/darwin.c (machopic_select_section): ... here.
ChangeLog-2002:	* config/nextstep.c (nextstep_select_section): ... here.
ChangeLog-2002:	* config/alpha/alpha.c (unicosmk_unique_section): Make static.
ChangeLog-2002:	(alpha_encode_section_info): Use it.
ChangeLog-2002:	(avr_unique_section): Rename from unique_section; make static.
ChangeLog-2002:	(ia64_encode_section_info): Use it.  Reorganize overlarge conditional.
ChangeLog-2002:	(ia64_aix_select_section, ia64_aix_unique_section): New.
ChangeLog-2002:	* config/m32r/m32r.c (m32r_select_section): Take align argument.
ChangeLog-2002:	* config/m88k/m88k.c (m88k_select_section): ... here.
ChangeLog-2002:	(mcore_unique_section): Make static.
ChangeLog-2002:	* config/mips/mips.c (mips_select_section): Add align argument.
ChangeLog-2002:	* config/mmix/mmix.c (mmix_select_section): Remove.
ChangeLog-2002:	(mmix_unique_section): Remove.
ChangeLog-2002:	* config/pa/pa.c (pa_select_section): ... here.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_elf_select_section): Rename
ChangeLog-2002:	from rs6000_select_section and make static.
ChangeLog-2002:	(rs6000_elf_unique_section): Similarly.
ChangeLog-2002:	(rs6000_xcoff_select_section): From xcoff.h.
ChangeLog-2002:	(rs6000_xcoff_unique_section): Likewise.
ChangeLog-2002:	* config/sparc/sparc.c (sparc_aout_select_section): ... here.
ChangeLog-2002:	* config/v850/v850.c (v850_select_section): ... here.
ChangeLog-2002:	* config/vax/vax.c (vms_select_section): ... here.
ChangeLog-2002:	* sbitmap.c (sbitmap_intersection_of_succs,
ChangeLog-2002:	sbitmap_intersection_of_preds, sbitmap_union_of_succs,
ChangeLog-2002:	* config/alpha/alpha.c (alpha_encode_section_info): Do not abort.
ChangeLog-2002:	* predict.c (choose_function_section): New function.
ChangeLog-2002:	* varasm.c (resolve_unique_section): Add third parameter
ChangeLog-2002:	flag_function_or_data_sections and use it instead of
ChangeLog-2002:	flag_function_sections.
ChangeLog-2002:	(assemble_start_function): Pass flag_function_sections.
ChangeLog-2002:	(asm_emit_uninitialised): Pass flag_data_sections.
ChangeLog-2002:	* config/mips/elf64.h (UNIQUE_SECTION): Use mips_unique_section.
ChangeLog-2002:	* config/mips/mips.c (mips_unique_section): Strip encoding from
ChangeLog-2002:	handle_mode_attribute, handle_section_attribute,
ChangeLog-2002:	handle_mode_attribute, handle_section_attribute,
ChangeLog-2002:	* config/m68hc11/larith.asm (__map_data_section): Fix condition
ChangeLog-2002:	section, not the specific environment variable, for consistency.
ChangeLog-2002:	Do resolve_unique_section before shared data clause.
ChangeLog-2002:	* config/rs6000/rs6000.c (rs6000_select_rtx_section): Put symbolic
ChangeLog-2002:	sections.
ChangeLog-2002:	section, return zero.
ChangeLog-2002:	(__map_data_section): Optimize 68hc11 case.
ChangeLog-2002:	* varasm.c (assemble_variable): Call resolve_unique_section before
ChangeLog-2002:	(cris_encode_section_info): Consider MODULE_LOCAL_P when encoding
ChangeLog-2002:	to function_section before writing out the constant pool.
ChangeLog-2002:	* mcore.c (regno_reg_class, mcore_unique_section): Likewise.
ChangeLog-2002:	parameter to mmix_encode_section_info.
ChangeLog-2002:	* config/mmix/mmix.c (mmix_encode_section_info): If new parameter
ChangeLog-2002:	* config/mmix/mmix-protos.h (mmix_encode_section_info): Tweak
ChangeLog-2002:	initializers in the bss section.
ChangeLog-2002:	* config/alpha/alpha.c (alpha_encode_section_info): Examine
ChangeLog-2002:	* config/ia64/ia64.c (ia64_encode_section_info): Handle
ChangeLog-2002:	(mmix_encode_section_info): Set SYMBOL_REF_FLAG on rtx:es that
ChangeLog-2002:	* varasm.c (named_section): Obey SECTION_OVERRIDE.
ChangeLog-2002:	(EH_FRAME_IN_DATA_SECTION): Define and update comment on init sections.
ChangeLog-2002:	* doc/configfiles.texi: Make a subsubsection.  Update.
ChangeLog-2002:	* doc/makefile.texi: Make a subsection.
ChangeLog-2002:	* config/mmix/mmix.c (mmix_encode_section_info): Correct condition
ChangeLog-2003:	asm_output_section_name.
ChangeLog-2003:	* config/ip2k/ip2k.c (asm_output_section_name): Remove.
ChangeLog-2003:	* config/mn10300/mn10300.c (mn10300_encode_section_info): Fix
ChangeLog-2003:	* README.Portability: Remove K+R section.
ChangeLog-2003:	* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Don't
ChangeLog-2003:	(attr_alt_subset_p, attr_alt_subset_of_compl_p, attr_alt_intersection,
ChangeLog-2003:	section names.
ChangeLog-2003:	* pa.c (pa_select_section): Use new style declaration.
ChangeLog-2003:	(L__compat): New section providing forwarding stubs for
ChangeLog-2003:	* config/mips/mips.c (iris6_asm_named_section_1): Changed guard to
ChangeLog-2003:	(iris6_asm_named_section): Likewise.
ChangeLog-2003:	(iris_section_align_entry_eq): Likewise.
ChangeLog-2003:	(iris_section_align_entry_hash): Likewise.
ChangeLog-2003:	(iris6_section_align_1): Likewise.
ChangeLog-2003:	(iris6_section_type_flags): Likewise.
ChangeLog-2003:	(iris_section_align_htab): Likewise.
ChangeLog-2003:	[TARGET_IRIX] (irix_asm_named_section): Handle O32 ABI with and
ChangeLog-2003:	Don't emit .section directives for O32 ABI.
ChangeLog-2003:	(i386_pe_asm_named_section): Fix formatting.
ChangeLog-2003:	(SBSS_SECTION_FUNCTION, sbss_section): Remove.
ChangeLog-2003:	(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Change sbss_section to
ChangeLog-2003:	named_section.
ChangeLog-2003:	separate sections.
ChangeLog-2003:	(switch_to_section): Handle in_readonly_data.
ChangeLog-2003:	* config/i386/winnt.c (i386_pe_asm_named_section): Handle
ChangeLog-2003:	* dwarf2out.c (default_eh_frame_section): Split into ...
ChangeLog-2003:	(named_section_eh_frame_section, collect2_eh_frame_section): ... new
ChangeLog-2003:	* output.h (named_section_eh_frame_section): Declare.
ChangeLog-2003:	(collect2_eh_frame_section): Likewise.
ChangeLog-2003:	* config/darwin-protos.h (objc_image_info_section):
ChangeLog-2003:	* config.gcc (widely ported systems section): Mostly alphabetize
ChangeLog-2003:	* config.gcc (widely ported systems section): Reindent and clean up.
ChangeLog-2003:	(SECTION_FUNCTION): Add objc_image_info_section.
ChangeLog-2003:	the section giving $with_cpu defaults by target.
ChangeLog-2003:	* varasm.c (mergeable_string_section): Likewise.
ChangeLog-2003:	(mergeable_constant_section): Likewise.
ChangeLog-2003:	* config/darwin.c (machopic_select_rtx_section): Fix check for PIC code.
ChangeLog-2003:	* config/xtensa/xtensa.c (xtensa_multibss_section_type_flags): Add
ChangeLog-2003:	function in a different section than the current one.
ChangeLog-2003:	Move "-Wold-style-definition" to the C-only section.
ChangeLog-2003:	* config/darwin.c (machopic_select_rtx_section): Use
ChangeLog-2003:	const_data_section for things that might require relocation.
ChangeLog-2003:	* config/m68k/m68k.c (m68k_coff_asm_named_section): Restore
ChangeLog-2003:	(s390_select_rtx_section): Likewise.
ChangeLog-2003:	(tdesc_section): Add prototype.
ChangeLog-2003:	* gcc/config/m68k/m68k.c (m68k_coff_asm_named_section): remove unused
ChangeLog-2003:	(ia64_encode_section_info): Likewise.
ChangeLog-2003:	(ia64_encode_section_info): Likewise.
ChangeLog-2003:	have no .section support.
ChangeLog-2003:	(mips_select_section): Use default_select_section for such targets.
ChangeLog-2003:	BUILT_IN_LLABS): Move to miscellaneous section.
ChangeLog-2003:	(i386_pe_section_type_flags): Remove error_with_decl here too.
ChangeLog-2003:	* varasm.c (named_section): Likewise.
ChangeLog-2003:	section from local labels section.
ChangeLog-2003:	(handle_section_attribute): Likewise.
ChangeLog-2003:	* config/darwin.c (machopic_select_section): Use decl_readonly_section
ChangeLog-2003:	(mmix_get_hard_reg_initial_val): Tweak section head comment.
ChangeLog-2003:	* config/mn10300/mn10300.c (mn10300_encode_section_info): Fix
ChangeLog-2003:	* config/mn10300/mn10300.c (mn10300_encode_section_info):
ChangeLog-2003:	(ASM_OUTPUT_ALIGNED_BSS): Use named_section rather than sbss_section.
ChangeLog-2003:	(EXTRA_SECTION_FUNCTIONS): Remove sdata_section.  Remove the handling
ChangeLog-2003:	of in_sdata from current_section_name and current_section_flags.
ChangeLog-2003:	* config/mips/mips.h (sdata_section, sbss_section): Remove prototypes.
ChangeLog-2003:	(mips_select_rtx_section): Call named_section rather than
ChangeLog-2003:	(mips_select_section): Use default_elf_section_section for everything
ChangeLog-2003:	(mips_encode_section_info): Remove small data handling.
ChangeLog-2003:	(mips_unique_section): Delete.
ChangeLog-2003:	(iris6_section_type_flags): New function.
ChangeLog-2003:	* doc/extend.texi: Delete entire section on multiline strings.
ChangeLog-2003:	Rewrite section on __FUNCTION__ etc now that these are
ChangeLog-2003:	(i386_pe_encode_section_info): Warn if the dllimport attribute
ChangeLog-2003:	DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO section.
ChangeLog-2003:	the text section.
ChangeLog-2003:	GCOV_COUNTER_V_DELTA): New counter sections.
ChangeLog-2003:	* varasm.c (resolve_unique_section): Remove prototype.  No longer
ChangeLog-2003:	* tree.h (resolve_unique_section): New prototype.
ChangeLog-2003:	(gcc_cv_as_subsections, gcc_cv_as_hidden, gcc_cv_as_leb128)
ChangeLog-2003:	* libgcc2.c: Delete sysV68 L_trampoline section.
ChangeLog-2003:	iris6_asm_named_section, iris6_asm_file_start): Remove code for
ChangeLog-2003:	section names.
ChangeLog-2003:	* doc/install.texi (Prerequisites): New section documenting
ChangeLog-2003:	* mklibgcc.in: Propagate .note.GNU-stack section if needed into
ChangeLog-2003:	* config.gcc: Reorganize --with-cpu section.  Remove an
ChangeLog-2003:	* config/rs6000/ppc-asm.h: Move __powerpc64__ section before
ChangeLog-2003:	_CALL_AIXDESC section.
ChangeLog-2003:	* config/arm/arm-protos.h: Remove unused rdate_section prototype.
ChangeLog-2003:	* config/frv/frv-protos.h: Remove unused const_section
ChangeLog-2003:	* doc/gcc.texi: Remove vms.texi section.
ChangeLog-2003:	necessary declarations.  Add section to capture HOST_WIDE_INT.
ChangeLog-2003:	* config/i386/winnt.c (i386_pe_encode_section_info): Enable
ChangeLog-2003:	bugs section.
ChangeLog-2003:	Use .skip instead of data8 for .bss section to make Intel
ChangeLog-2003:	__do_global_ctors_aux in .init_array section instead of
ChangeLog-2003:	(rs6000_elf_encode_section_info): Don't set SYMBOL_FLAG_SMALL_V4.
ChangeLog-2003:	(rs6000_elf_in_small_data_p): Add extra section names.  Add
ChangeLog-2003:	* config/darwin.c (darwin_encode_section_info): Call
ChangeLog-2003:	default_encode_section_info.
ChangeLog-2003:		(mips_encode_section_info): Don't take symbol visibility into
ChangeLog-2003:		(mips_encode_section_info): Factor out DECL_RTL accesses.  Reverse
ChangeLog-2003:		(mips_encode_section_info): For TARGET_ABICALLS, use SYMBOL_REF_FLAG
ChangeLog-2003:		(mips_encode_section_info): Keep track of local strings.
ChangeLog-2003:	(rs6000_xcoff_encode_section_info): Remove.
ChangeLog-2003:	(rs6000_elf_encode_section_info): Call default_encode_section_info for
ChangeLog-2003:	* target.h (select_section): Don't mention TREE_CST_RTL in comment.
ChangeLog-2003:	* doc/tm.texi (encode_section_info): Don't talk about TREE_CST_RTL.
ChangeLog-2003:	(set_purpose, label_for_tag, build_counter_section_fields,
ChangeLog-2003:	build_counter_section_value, build_counter_section_data_fields,
ChangeLog-2003:	build_counter_section_data_values, build_function_info_fields,
ChangeLog-2003:	(find_counters_section): Remove.
ChangeLog-2003:	(struct section_info, struct profile_info): Remove.
ChangeLog-2003:	(find_counters_section): Remove.
ChangeLog-2003:	(struct gcov_counter_section): Remove.
ChangeLog-2003:	struct gcov_counter_section_data): Remove.
ChangeLog-2003:	(compute_branch_probablilities): Remove find_counters_section
ChangeLog-2003:	* target.h (encode_section_info): Add new argument carrying
ChangeLog-2003:	to encode_section_info.
ChangeLog-2003:	(default_encode_section_info): Take and use RTL argument,
ChangeLog-2003:	* output.h: Update prototype of default_encode_section_info.
ChangeLog-2003:	Update calls to encode_section_info.
ChangeLog-2003:	default_encode_section_info.
ChangeLog-2003:	* README.Portability: Move to a new section and obsolete K+R
ChangeLog-2003:	(decl_in_text_section): Remove.
ChangeLog-2003:	(alpha_encode_section_info): Remove.
ChangeLog-2003:	sections, rather than decl_in_text_section results.
ChangeLog-2003:	* config/xtensa/xtensa.c (xtensa_encode_section_info): Remove.
ChangeLog-2003:	(v850_encode_section_info): Call default_encode_section_info.
ChangeLog-2003:	* config/stormy16/stormy16.c (xstormy16_encode_section_info): Kill.
ChangeLog-2003:	* config/sparc/sparc.c (sparc_encode_section_info): Remove.
ChangeLog-2003:	(sh_encode_section_info): Remove.
ChangeLog-2003:	(s390_encode_section_info): Use default_encode_section_info
ChangeLog-2003:	* config/ns32k/ns32k.c (ns32k_encode_section_info): Remove.
ChangeLog-2003:	* config/mcore/mcore.c (mcore_encode_section_info): Don't set
ChangeLog-2003:	(m32r_select_section): Remove.
ChangeLog-2003:	(m32r_encode_section_info): Use SYMBOL_REF_FLAGS.
ChangeLog-2003:	(encode_section_info): Remove.
ChangeLog-2003:	* varasm.c (default_encode_section_info): Don't set
ChangeLog-2003:	* config/i370/i370.c (i370_encode_section_info): Remove.
ChangeLog-2003:	(h8300_encode_section_info): Set SYMBOL_REF_FLAGS.
ChangeLog-2003:	(frv_encode_section_info): Remove.
ChangeLog-2003:	(frv_in_small_data_p): Merge tests from encode_section_info.
ChangeLog-2003:	(cris_encode_section_info): Remove.
ChangeLog-2003:	* config/c4x/c4x.c (c4x_encode_section_info): Remove.
ChangeLog-2003:	* config/avr/avr.c (avr_encode_section_info): Remove.
ChangeLog-2003:	* arc.c (arc_encode_section_info): Remove.
ChangeLog-2003:	(ia64_encode_section_info): Remove.
ChangeLog-2003:	(alpha_encode_section_info): Use default_encode_section_info.
ChangeLog-2003:	(unicosmk_unique_section): Use default_strip_name_encoding.
ChangeLog-2003:	* doc/bugreport.texi: Fix paragraph breaking between sections
ChangeLog-2003:	(ix86_encode_section_info, ix86_strip_name_encoding): Remove.
ChangeLog-2003:	* config/i386/winnt.c (i386_pe_encode_section_info): Replace
ChangeLog-2003:	bits "copied from i386.h" with default_encode_section_info.
ChangeLog-2003:	(default_encode_section_info): New.
ChangeLog-2003:	-ffunction-sections and -fdata-sections.  Document -static, -nolibdld
ChangeLog-2003:	(s390_encode_section_info): Mark symbols with forced 1-byte
ChangeLog-2003:	(struct section_reference, struct da_index_entry): Remove.
ChangeLog-2003:	assemblers don't like wrong section-types).
ChangeLog-2003:	section of h8300.md
ChangeLog-2003:	the general section for HPUX into specific sections for
ChangeLog-2003:	(m68hc11_encode_section_info): Mark symbol as far if needed; set
ChangeLog-2003:	(rs6000_xcoff_encode_section_info): #ifdef TARGET_XCOFF.
ChangeLog-2003:	(rs6000_elf_select_section): Comment reason for shlib being
ChangeLog-2003:	(rs6000_elf_unique_section): Likewise.
ChangeLog-2003:	(rs6000_elf_encode_section_info): Test !TARGET_AIX as well as ABI_AIX.
ChangeLog-2003:	(i386_pe_encode_section_info): Here. Remove DLL_IMPORT_PREFIX,
ChangeLog-2003:	(machopic_select_section): Change references of flag_pic to
ChangeLog-2003:	* gcov-io.h (struct counter_section, struct counter_section_data): New.
ChangeLog-2003:	(struct function_info): n_arc_counts field removed, n_counter_sections,
ChangeLog-2003:	counter_sections fields added.
ChangeLog-2003:	n_counter_sections, counter_sections fields added.
ChangeLog-2003:	profile sections.
ChangeLog-2003:	(struct section_info): New.
ChangeLog-2003:	count_edges_instrumented_now fields removed, n_sections, section_info
ChangeLog-2003:	(find_counters_section): Declare.
ChangeLog-2003:	n_counter_sections, counter_sections fields added.
ChangeLog-2003:	(set_purpose, label_for_tag, build_counter_section_fields,
ChangeLog-2003:	build_counter_section_value, build_counter_section_data_fields,
ChangeLog-2003:	build_counter_section_data_value, build_function_info_fields,
ChangeLog-2003:	(find_counters_section): New function.
ChangeLog-2003:	sections.
ChangeLog-2003:	(sh_encode_section_info): Handle TLS case.
ChangeLog-2003:	* config/rs6000/rs6000.c (rs6000_encode_section_info): Do not
ChangeLog-2003:	test size if named section.
ChangeLog-2003:	* predict.c (choose_function_section): Choose sections correctly.
ChangeLog-2003:	* doc/install.texi: Squeeze and streamline section on
ChangeLog-2003:	* config/ia64/ia64.c (ia64_rwreloc_section_type_flags): New.
ChangeLog-2003:	out of this section.  Group floating point flags together.
ChangeLog-2003:	* config/ia64/ia64.c (ia64_rwreloc_select_rtx_section): Rename
ChangeLog-2003:	from ia64_aix_select_rtx_section.
ChangeLog-2003:	(ia64_rwreloc_select_section): Simlarly; use default*_1 function
ChangeLog-2003:	(ia64_rwreloc_unique_section): Similarly.
ChangeLog-2003:	(s390_encode_section_info): Encode TLS model.
ChangeLog-2003:	* gcc.texi: Adjust title of gcov section.
ChangeLog-2003:	* config/rs6000/rs6000.c (rs6000_gen_section_name): Do not include
ChangeLog-2003:	file extension in section name.
ChangeLog-2003:	* configure.in (linker read-only and read-write section mixing):
ChangeLog-2003:	(in_section): Likewise.
ChangeLog-2003:	(set_named_section_flags): Use GGC to allocate struct in_named_entry.
ChangeLog-2003:	* config/rs6000/rs6000.c (rs6000_elf_encode_section_info):
ChangeLog-2003:	* config/alpha/alpha.c (alpha_encode_section_info): Adjust symbol_str
ChangeLog-2003:	* config/darwin-protos.h:  Add prototypes for new section functions.
ChangeLog-2004:	a custom section is requested.
ChangeLog-2004:	* config/pa/pa.c (pa_select_section): Allow uninitialized variables in
ChangeLog-2004:	* configure.ac: Move TL_AC_GCC_VERSION into initialization section.
ChangeLog-2004:	sure that the pointed-to sets have a common intersection.
ChangeLog-2004:	* varasm.c (default_encode_section_info): Don't set SYMBOL_FLAG_SMALL
ChangeLog-2004:	* varasm.c (default_elf_select_section_1): Only pass DECL_P decl
ChangeLog-2004:	to named_section.
ChangeLog-2004:	* varasm.c (default_elf_select_section_1): Pass decl to named_section.
ChangeLog-2004:	* doc/extend.texi (SPARC VIS Built-in Functions): New section.
ChangeLog-2004:	* dwarf2out.c (named_section_eh_frame_section): Check
ChangeLog-2004:	* except.c (default_exception_section): Likewise.
ChangeLog-2004:	* config/i386/i386.c (i386_solaris_elf_named_section): Mark with
ChangeLog-2004:	* config/i386/i386.c (i386_solaris_elf_named_section): New
ChangeLog-2004:	* varasm.c (get_named_section_flags, decl_tls_model): Make
ChangeLog-2004:	* output.h: Remove the prototype for get_named_section_flags.
ChangeLog-2004:	"*pool_entry", "pool_align", "pool_section_start",
ChangeLog-2004:	"pool_section_end", "main_pool", "reload_base_31", "pool"):
ChangeLog-2004:	* varasm.c (function_section): If DECL is NULL_TREE, don't try
ChangeLog-2004:	data_section on every section change.
ChangeLog-2004:	(EXTRA_SECTIONS): Add a bunch of new extra sections.
ChangeLog-2004:	* config/darwin.c (darwin_encode_section_info): A symbol is defined
ChangeLog-2004:	(textcoal_section): Delete.
ChangeLog-2004:	(datacoal_section): Delete.
ChangeLog-2004:	(machopic_select_section): Handle functions.
ChangeLog-2004:	(darwin_asm_named_section): Add a tab.
ChangeLog-2004:	(darwin_section_type_flags): Delete.
ChangeLog-2004:	(darwin_unique_section): Delete contents.
ChangeLog-2004:	* config/darwin-protos.h (darwin_section_type_flags): Delete.
ChangeLog-2004:	(text_coal_section): New.
ChangeLog-2004:	(text_unlikely_section): New.
ChangeLog-2004:	(text_unlikely_coal_section): New.
ChangeLog-2004:	(const_coal_section): New.
ChangeLog-2004:	(data_coal_section): New.
ChangeLog-2004:	(const_data_coal_section): New.
ChangeLog-2004:	* varasm.c (function_section): Honour
ChangeLog-2004:	* dbxout.c (dbxout_source_file): Don't change sections while
ChangeLog-2004:	* config/mips/mips.c (mips_function_rodata_section): New function.
ChangeLog-2004:	Use gen_pool_align, gen_pool_section_start/end instead of
ChangeLog-2004:	("pool_align", "pool_section_start", "pool_section_end": New insns.
ChangeLog-2004:	* doc/extend.texi (MIPS Paired-Single Support): New section.
ChangeLog-2004:	* sbitmap.c (sbitmap_intersection_of_succs): Likewise.
ChangeLog-2004:	(sbitmap_insersection_of_preds): Likewise.
ChangeLog-2004:	section.
ChangeLog-2004:	* config/s390/s390.c (s390_select_rtx_section): Remove.
ChangeLog-2004:	* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section): Update
ChangeLog-2004:	* varasm.c (default_function_rdodata_section): Make sure to pass
ChangeLog-2004:	along a decl for a link-once section.
ChangeLog-2004:	* output.h (named_section_flags): Make it a macro.
ChangeLog-2004:	(named_section_real): New function.
ChangeLog-2004:	(default_no_named_section): Add decl parameter.
ChangeLog-2004:	(default_elf_asm_named_section): Likewise.
ChangeLog-2004:	(default_coff_asm_named_section): Likewise.
ChangeLog-2004:	(default_pe_asm_named_section): Likewise.
ChangeLog-2004:	* target.h (gcc_target): Adjust type of named_section.
ChangeLog-2004:	* varasm.c (named_section_flags): Rename to named_section_real.
ChangeLog-2004:	(default_no_named_section): Add decl parameter.
ChangeLog-2004:	(default_elf_asm_named_section): Use COMDAT, if available.  Deal
ChangeLog-2004:	(default_coff_asm_named_section): Add decl parameter.
ChangeLog-2004:	(default_pe_asm_named_section): Likewise.
ChangeLog-2004:	* config/alpha/alpha.c (vms_asm_named_section): Add decl
ChangeLog-2004:	(unicosmk_asm_named_section): Likewise.
ChangeLog-2004:	* config/arm/arm.c (arm_elf_asm_named_section): Remove.
ChangeLog-2004:	* config/c4x/c4x.c (c4x_asm_named_section): Add decl parameter.
ChangeLog-2004:	* config/cris/cris-protos.h (cris_target_asm_named_section):
ChangeLog-2004:	* config/cris/cris.c (cris_target_asm_named_section):
ChangeLog-2004:	* config/darwin/darwin-protos.h (darwin_asm_named_section):
ChangeLog-2004:	* config/darwin/darwin.c (darwin_asm_named_section): Likewise.
ChangeLog-2004:	* config/h8300/h8300.c (h8300_asm_named_section): Likewise.
ChangeLog-2004:	* config/i386/i386-protos.h (i386_pe_asm_named_section):
ChangeLog-2004:	* config/i386/winnt.c (i386_pe_asm_named_section): Likewise.
ChangeLog-2004:	* config/m68k/m68k.c (m68k_coff_asm_named_section): Likewise.
ChangeLog-2004:	* config/mcore/mcore.c (mcore_asm_named_section): Likewise.
ChangeLog-2004:	* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section):
ChangeLog-2004:	* config/sparc/sparc.c (sparce_elf_asm_named_section): Likewise.
ChangeLog-2004:	* output.h (unlikely_section_label): Delete declaration.
ChangeLog-2004:	(unlikely_text_section_name): Likewise.
ChangeLog-2004:	* varasm.c (unlikely_section_label_printed): Make static.
ChangeLog-2004:	(unlikely_section_label): Likewise.
ChangeLog-2004:	(unlikely_text_section_name): Likewise.
ChangeLog-2004:	attr_alt_intersection, attr_alt_union, optimize_attrs, gen_insn,
ChangeLog-2004:	* config/avr/avr.c (avr_unique_section): Delete prototype and
ChangeLog-2004:	(reswords): Add blank line before @@ifobjc section, for clarity.
ChangeLog-2004:	* config/darwin.c (darwin_make_decl_one_only): Allocate section
ChangeLog-2004:	mark_bb_for_unlikely_executed_section,
ChangeLog-2004:	separate section; these are call-backs.
ChangeLog-2004:	(override_options): Remove !TARGET_GAS and !have_named_sections code.
ChangeLog-2004:	(mips_select_rtx_section): Remove !have_named_sections code.
ChangeLog-2004:	(mips_select_section): Delete.
ChangeLog-2004:	(i386_pe_encode_section_info): Adjust for call to new function.
ChangeLog-2004:	* config/pa/pa-protos.h (readonly_data, one_only_readonly_data_section,
ChangeLog-2004:	one_only_data_section): Rename to som_readonly_data_section,
ChangeLog-2004:	som_one_only_readonly_data_section and som_one_only_data_section.
ChangeLog-2004:	(som_text_section_asm_op): Replace ONE_ONLY_TEXT_SECTION_ASM_OP,
ChangeLog-2004:	(pa_select_section): Use renamed section functions.
ChangeLog-2004:	(READONLY_DATA_SECTION): Use som_readonly_data_section.
ChangeLog-2004:	(mips_file_start): Tidy guard for ABI sections.  Remove use of
ChangeLog-2004:	(irix_asm_named_section_1, irix_asm_named_section)
ChangeLog-2004:	(irix_section_align_entry, irix_section_align_htab)
ChangeLog-2004:	(irix_orig_asm_out_file, irix_section_align_entry_eq)
ChangeLog-2004:	(irix_section_align_entry_hash, irix_asm_output_align)
ChangeLog-2004:	(irix_file_start, irix_section_align_1, copy_file_data)
ChangeLog-2004:	(irix_file_end, irix_section_type_flags): Delete.
ChangeLog-2004:	* config/mips/irix-crti.asm (__gcc_init): Move to .gcc_init section.
ChangeLog-2004:	Use standard section syntax.  Remove protective "jr $31".
ChangeLog-2004:	* config/mips/irix-crtn.asm: Adjust sections accordingly.
ChangeLog-2004:	* config/i386/cygming.h (switch_to_section): Fix typo (change
ChangeLog-2004:	in_unlikely_text_section to in_unlikely_executed_text).
ChangeLog-2004:	(darwin_encode_section_info): Likewise.
ChangeLog-2004:	(rotate_loop): Don't copy blocks that end in a section
ChangeLog-2004:	crossing edges if the architecture supports named sections.
ChangeLog-2004:	(mark_bb_for_unlikely_executed_section): Modify to always
ChangeLog-2004:	partitioning work if the architecture supports named sections.
ChangeLog-2004:	supports named sections.
ChangeLog-2004:	* c-common.c (handle_section_attribute): Initialize new global
ChangeLog-2004:	variable, user_defined_section_attribute, to true if user has
ChangeLog-2004:	forward edges that cross section boundaries.
ChangeLog-2004:	sections.
ChangeLog-2004:	attempting to cross section boundaries.
ChangeLog-2004:	architecture supports named sections.
ChangeLog-2004:	happens if architecture supports named sections and it's not
ChangeLog-2004:	condition that fallthru edges are not allowed to cross section
ChangeLog-2004:	change calls to text_section into calls to function_section; add code
ChangeLog-2004:	sections.
ChangeLog-2004:	(if_convert): Add targetm.have_named_sections to test.
ChangeLog-2004:	* output.h (unlikely_section_label): Extern declaration for new global
ChangeLog-2004:	(unlikely_text_section_name): Likewise.
ChangeLog-2004:	user_defined_section_attribute, to false.
ChangeLog-2004:	function: Don't call if the user defined the section attribute, and
ChangeLog-2004:	* predict.c (choose_function_section): Return immediately if we
ChangeLog-2004:	* toplev.c (user_defined_section_attribute): New global variable.
ChangeLog-2004:	* toplev.h (user_defined_section_attribute): Extern declaration
ChangeLog-2004:	* varasm.c (unlikely_section_label): New global variable.
ChangeLog-2004:	(unlikely_text_section_name): New global variable.
ChangeLog-2004:	(unlikely_text_section): Add code to initialize
ChangeLog-2004:	unlikely_text_section_name if necessary; modify to use
ChangeLog-2004:	unlikely_text_section_name and unlikely_section_label; also to use
ChangeLog-2004:	named_section properly.
ChangeLog-2004:	(in_unlikely_text_section): Modify to work correctly with
ChangeLog-2004:	named_section and to use unlikely_text_section_name.
ChangeLog-2004:	(named_section): Add code to work properly with cold section.
ChangeLog-2004:	(function_section): Clean up if-statement.
ChangeLog-2004:	* config/darwin.c (darwin_asm_named_section): Return to original
ChangeLog-2004:	* config/arm/pe.h (switch_to_section): Add case for
ChangeLog-2004:	* config/i386/cygming.h (switch_to_section): Likewise.
ChangeLog-2004:	* config/mcore/mcore.h (switch_to_section): Likewise.
ChangeLog-2004:	(xstormy16_encode_section_info): Encode below100 symbols.
ChangeLog-2004:	__cstring_object and __image_info sections with the no_dead_strip
ChangeLog-2004:	(i386_pe_encode_section_info): Likewise, when overriding
ChangeLog-2004:	* java/gcj.texi: Add subsection on signal usage.
ChangeLog-2004:	* output.h (default_function_rodata_section,
ChangeLog-2004:	default_no_function_rodata_section): New prototypes.
ChangeLog-2004:	* target.h (struct gcc_target): Add asm_out.function_rodata_section.
ChangeLog-2004:	* varasm.c (default_function_rodata_section,
ChangeLog-2004:	default_no_function_rodata_section): New functions.
ChangeLog-2004:	targetm.asm_out.function_rodata_section instead of
ChangeLog-2004:	readonly_data_section.
ChangeLog-2004:	* doc/md.texi (Predicates): New section with complete
ChangeLog-2004:	* config/ia64/ia64.h: Declare ia64_section_threshold.
ChangeLog-2004:	has a section attribute and -mlong-calls is in effect.
ChangeLog-2004:	has a section attribute.
ChangeLog-2004:	* varasm.c (unlikely_section_label): New global variable.
ChangeLog-2004:	(unlikely_text_section_name): New global variable.
ChangeLog-2004:	(text_section): Remove alignment statement.
ChangeLog-2004:	(unlikely_text_section): Remove alignment statement; use
ChangeLog-2004:	unlikely_section_label rather than hard-coded string.
ChangeLog-2004:	(assemble_start_function): Initialize unlikely_section_label and
ChangeLog-2004:	unlikely_text_section_name;  make sure cold section is properly
ChangeLog-2004:	aligned at start of function; output unlikely_section_label if
ChangeLog-2004:	(ggc-none.o, errors.o): Move rule to generators section;
ChangeLog-2004:	(min-insn-modes.o): Move rule to generators section; remove
ChangeLog-2004:	* doc/invoke.texi: In the MIPS options section, remove the passage
ChangeLog-2004:	* doc/extend.texi (Solaris Pragmas): New section.
ChangeLog-2004:	* pa-protos.h (som_text_section_asm_op, one_only_readonly_data_section,
ChangeLog-2004:	readonly_data, one_only_data_section, forget_section): New prototypes.
ChangeLog-2004:	* pa.c (pa_init_machine_status, som_text_section_asm_op): New
ChangeLog-2004:	(pa_select_section): Add one-only (COMDAT) support.
ChangeLog-2004:	(TEXT_SECTION_ASM_OP): Call som_text_section_asm_op.
ChangeLog-2004:	* doc/extend.texi (Target Format Checks): New section.
ChangeLog-2004:	(sh_file_start): Create a definition of the .directive section.
ChangeLog-2004:	* bb-reorder.c (mark_bb_for_unlikely_executed_section,
ChangeLog-2004:	(categorize_decl_for_section): Honor flag_zero_initialized_in_bss
ChangeLog-2004:	section title.
ChangeLog-2004:	FUNCTION_ARG_CALLEE_COPIES section.
ChangeLog-2004:	cross-reference to section title.
ChangeLog-2004:	default_encode_section_info): Likewise.
ChangeLog-2004:	* config/i386/winnt.c (i386_pe_encode_section_info): Smash rtlname's
ChangeLog-2004:	into one section "Symbol-Renaming Pragmas"; clarify; document
ChangeLog-2004:	* config/sparc/sparc.c (sparc_aout_select_rtx_section): Remove.
ChangeLog-2004:	* fortran/gfortran.texi: Remove section "Compiling and testing",
ChangeLog-2004:	* config/mips/mips.c (struct irix_section_align_entry): Fix
ChangeLog-2004:	* doc/extend.texi (Offsetof): Move from C++ section to C section
ChangeLog-2004:	decl_readonly_section only on trees it can handle.
ChangeLog-2004:	section when generating EABI code.
ChangeLog-2004:	(mips_select_section: Remove -membedded-pic handling.
ChangeLog-2004:	(mips_encode_section_info): Delete.
ChangeLog-2004:	in .init_array section to ...
ChangeLog-2004:	to "Not triggered by any -O level" section.  Adjust commentary
ChangeLog-2004:	(mips_select_section, mips_encode_section_info): Remove mips16
ChangeLog-2004:	* varasm.c (unlikely_text_section): Use assemble_align instead of
ChangeLog-2004:	in_text_unlikely_section to in_unlikely_text_section.
ChangeLog-2004:	* config/mips/iris5.h (current_section_flags): Add
ChangeLog-2004:	* varasm.c (text_section): Use TEXT_SECTION_ASM_OP and
ChangeLog-2004:	(unlikely_text_section): Check targetm.have_named_sections
ChangeLog-2004:	* config/mips/iris5.h (current_section_name): Add
ChangeLog-2004:	(mark_bb_for_unlikely_executed_section): New function.
ChangeLog-2004:	that cross section boundaries.
ChangeLog-2004:	cross section boundaries.
ChangeLog-2004:	jumps that cross section boundaries.
ChangeLog-2004:	section boundaries.
ChangeLog-2004:	cross section boundaries.
ChangeLog-2004:	ends up in correct (hot or cold) section.  Modify to disallow
ChangeLog-2004:	crosses section boundaries.
ChangeLog-2004:	cross section boundaries.
ChangeLog-2004:	ends up in correct section, with correct notes attached.
ChangeLog-2004:	section.
ChangeLog-2004:	doesn't incorrectly change sections.
ChangeLog-2004:	in partitioning hot/cold basic blocks into separate sections.
ChangeLog-2004:	section partitioning.
ChangeLog-2004:	whether basic block belongs in hot or cold section, and to make sure
ChangeLog-2004:	the current basic block is being written to the appropriate section.
ChangeLog-2004:	correct section.
ChangeLog-2004:	one of the branches has a jump that crosses between sections.
ChangeLog-2004:	* output.h (unlikely_text_section): New extern function declaration.
ChangeLog-2004:	(in_unlikely_text_section): New extern function declaration.
ChangeLog-2004:	cross between section boundaries.
ChangeLog-2004:	indicating the basic block containing it belongs in the cold section.
ChangeLog-2004:	between hot and cold sections.
ChangeLog-2004:	(unlikely_section_label_printed): New global variable, used for
ChangeLog-2004:	determining when to output section name labels for cold sections.
ChangeLog-2004:	(in_section): Add in_unlikely_executed_text to enum data structure.
ChangeLog-2004:	(text_section): Modify code to use SECTION_FORMAT_STRING and
ChangeLog-2004:	(unlikely_text_section): New function.
ChangeLog-2004:	(in_unlikely_text_section): New function.
ChangeLog-2004:	(function_section): Add code to make sure beginning of function is
ChangeLog-2004:	written into correct section (hot or cold).
ChangeLog-2004:	the correct section.
ChangeLog-2004:	(assemble_zeros): Add in_unlikely_text_section as an 'or' condition
ChangeLog-2004:	to an if statement that was checking 'in_text_section'.
ChangeLog-2004:	(assemble_variable): Add 'in_unlikely_text_section' as an 'or'
ChangeLog-2004:	condition to an if statement that was checking 'in_text_section'.
ChangeLog-2004:	(default_section_type_flags_1): Add check: if in cold section
ChangeLog-2004:	* config/darwin.c (darwin_asm_named_section): Modify to use
ChangeLog-2004:	'!in_unlikely_text_section' as an 'and' condition to an if statement
ChangeLog-2004:	that was already checking '!in_text_section'.
ChangeLog-2004:	* config/darwin.c (darwin_encode_section_info): When the decl has
ChangeLog-2004:	* config/ia64/ia64.c (ia64_encode_section_info): Don't prod
ChangeLog-2004:	variable as being allocated from within page0 section.
ChangeLog-2004:	(m68hc11_encode_section_info): Lookup "page0" attribute.
ChangeLog-2004:	* config/darwin-protos.h (darwin_unique_section): Declare.
ChangeLog-2004:	(darwin_asm_named_section): Likewise.
ChangeLog-2004:	(darwin_section_type_flags): Likewise.
ChangeLog-2004:	(darwin_encode_section_info): Don't treat weak functions as defined.
ChangeLog-2004:	(darwin_asm_named_section): Likewise.
ChangeLog-2004:	(darwin_section_type_flags): Likewise.
ChangeLog-2004:	(darwin_unique_section): Likewise.
ChangeLog-2004:	(darwin_eh_frame_section): Give __eh_frame section the coalesced flag.
ChangeLog-2004:	* config/sparc/sparc.c (sparc_aout_select_section): Remove.
ChangeLog-2004:	(sparc_aout_select_rtx_section): Don't check
ChangeLog-2004:	add section comment.
ChangeLog-2004:	* configure.ac: Add some comments delineating sections of code.
ChangeLog-2004:	symbols in sections named by the user.
ChangeLog-2004:	argument passed to decl_readonly_section.
ChangeLog-2004:	* config/darwin.c (machopic_select_section): Likewise.
ChangeLog-2004:	* config/arm/pe.c (arm_pe_encode_section_info): Likewise.
ChangeLog-2004:	* config/iq2000/iq2000.c (iq2000_select_section): Likewise.
ChangeLog-2004:	* config/mips/mips.c (mips_select_section): Likewise.
ChangeLog-2004:	(mips_encode_section_info): Likewise.
ChangeLog-2004:	* config/pa/pa.c (pa_select_section): Likewise.
ChangeLog-2004:	* config/v850/v850.c (v850_select_section): Likewise.
ChangeLog-2004:	--with-system-zlib documentation to new section for
ChangeLog-2004:	Added section for Java-specific options.
ChangeLog-2004:	* config/h8300/h8300.md: Move movsf patterns into one section
ChangeLog-2004:	section of the file.
ChangeLog-2004:	(add_location_or_const_value_attribute): Use text_section_label,
ChangeLog-2004:	* varasm.c (data_section): Don't use SHARED_SECTION_ASM_OP.
ChangeLog-2004:	* config/sparc/sparc.c (sparc_elf_asm_named_section): Emit
ChangeLog-2004:	"#tls" for thread-local sections.
ChangeLog-2004:	* varasm.c (bss_section): Don't use SHARED_BSS_SECTION_ASM_OP.
ChangeLog-2004:	* varasm.c (text_section): Don't use TEXT_SECTION.
ChangeLog-2004:	variables in the appropriate bss section.
ChangeLog-2004:	(read_only_data_section): Add void argument.
ChangeLog-2004:	(private_data_section): Same.
ChangeLog-2004:	(read_only_private_data_section): Same.
ChangeLog-2004:	(toc_section): Same.
ChangeLog-2004:	(mips_encode_section_info): Don't use SYMBOL_REF_FLAG to distinguish
ChangeLog-2005:	* varasm.c (get_section): Use gcc_assert.
ChangeLog-2005:	* config/darwin.h: Don't include darwin-sections.def to declare
ChangeLog-2005:	global variables; instead create darwin_section_enum.
ChangeLog-2005:	(darwin_section_enum): New.
ChangeLog-2005:	(darwin_sections): New.
ChangeLog-2005:	* config/darwin.c: Don't include darwin-sections.def to define
ChangeLog-2005:	(darwin_sections): New.
ChangeLog-2005:	(output_objc_section_asm_op): Rewrite to take advantage of
ChangeLog-2005:	darwin_sections.
ChangeLog-2005:	(darwin_init_sections): Rewrite to use darwin_sections.
ChangeLog-2005:	(machopic_output_indirection): Update for darwin_sections array.
ChangeLog-2005:	(machopic_select_section): Likewise.
ChangeLog-2005:	(machopic_select_rtx_section): Likewise.
ChangeLog-2005:	* varasm.c (default_unique_section_1): Use special section
ChangeLog-2005:	* final.c (final_scan_insn): Flip in_cold_section_p when changing
ChangeLog-2005:	between the hot and cold sections.  Use current_function_section
ChangeLog-2005:	to get the new section.
ChangeLog-2005:	* dwarf2out.c (output_line_info): Use in_cold_section_p to
ChangeLog-2005:	(dwarf2out_init, dwarf2out_finish): Use switch_to_section.
ChangeLog-2005:	* varasm.c (last_text_section): Delete.
ChangeLog-2005:	(in_cold_section_p): New variable.
ChangeLog-2005:	(hot_function_section): New function.
ChangeLog-2005:	(current_function_section): Pass in_cold_section_p as the
ChangeLog-2005:	reloc argument to select_section.  Use it to decide between
ChangeLog-2005:	unlikely_function_section and hot_function_section.
ChangeLog-2005:	(assemble_start_function): Use switch_to_section.  Set
ChangeLog-2005:	in_cold_section_p instead of last_text_section.
ChangeLog-2005:	(assemble_end_function): Use switch_to_section.
ChangeLog-2005:	(switch_to_section): Don't set last_text_section.
ChangeLog-2005:	* config/darwin/darwin.c (machopic_select_section): Trust the reloc
ChangeLog-2005:	argument to make the right choice between hot and cold sections.
ChangeLog-2005:	* config/i386/i386.c (x86_64_elf_select_section): If DECL is not
ChangeLog-2005:	DECL_P, call get_section rather than get_named_section.  Supply
ChangeLog-2005:	section flags to it.
ChangeLog-2005:	(output_deferred_plabels): Put plabels in readonly data section when
ChangeLog-2005:	(som_output_text_section_asm_op): Use .NSUBSPA to output debug
ChangeLog-2005:	(som_output_comdat_data_section_asm_op): New function.
ChangeLog-2005:	(pa_som_asm_init_sections): Use som_output_comdat_data_section_asm_op
ChangeLog-2005:	instead of output_section_asm_op for COMDAT sections.
ChangeLog-2005:	* except.c (switch_to_exception_section): Only define if
ChangeLog-2005:	* output.h (init_section, fini_section): Delete.
ChangeLog-2005:	* varasm.c (init_section, fini_section): Delete.
ChangeLog-2005:	* dwarf2out.c (default_eh_frame_section): Delete, moving handling
ChangeLog-2005:	(switch_to_eh_frame_section): ...here.  Try to set eh_frame_section
ChangeLog-2005:	* except.c (default_exception_section): Delete, moving most
ChangeLog-2005:	(switch_to_exception_section): ...this new function.  Set
ChangeLog-2005:	exception_section if it is still null, then switch to it.
ChangeLog-2005:	(output_function_exception_table): Use switch_to_exception_section.
ChangeLog-2005:	* varasm.c (exception_section, eh_frame_section): Update comments.
ChangeLog-2005:	(get_section): Hoist use of SECTION_NAMED.
ChangeLog-2005:	(init_varasm_once): Don't set exception_section and eh_frame_section.
ChangeLog-2005:	* output.h (default_exception_section): Delete.
ChangeLog-2005:	(default_eh_frame_section): Delete.
ChangeLog-2005:	* config/darwin.h: Guard section variables with #ifndef USED_FOR_TARGET.
ChangeLog-2005:	* config/avr/avr.h (progmem_section): Guard with #ifndef IN_LIBGCC2.
ChangeLog-2005:	* coretypes.h (section): Provide dummy definition for target files.
ChangeLog-2005:	* config/darwin.h: Guard section variables with #ifndef IN_LIBGCC2.
ChangeLog-2005:	* config/alpha/alpha.c (alpha_start_function): Use switch_to_section.
ChangeLog-2005:	(alpha_elf_select_rtx_section): Return the selected section rather
ChangeLog-2005:	set in_section to NULL.
ChangeLog-2005:	(vms_asm_out_constructor): Use switch_to_section.
ChangeLog-2005:	(unicosmk_output_common): Set in_section to NULL instead of calling
ChangeLog-2005:	the dummy common_section function.
ChangeLog-2005:	(unicosmk_text_section): Delete in favor of...
ChangeLog-2005:	(unicosmk_output_text_section_asm_op): ...this new function.
ChangeLog-2005:	(unicosmk_data_section): Delete in favor of...
ChangeLog-2005:	(unicosmk_output_data_section_asm_op): ...this new function.
ChangeLog-2005:	(unicosmk_init_sections): New function.
ChangeLog-2005:	(unicosmk_output_deferred_case_vectors): Use switch_to_section.
ChangeLog-2005:	(unicosmk_output_ssib): Set in_section to NULL instead of calling
ChangeLog-2005:	the dummy ssib_section function.
ChangeLog-2005:	(unicosmk_section_buf): Delete.
ChangeLog-2005:	* config/alpha/alpha-protos.h (unicosmk_text_section): Delete.
ChangeLog-2005:	(unicosmk_data_section): Delete.
ChangeLog-2005:	* config/alpha/elf.h (ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.
ChangeLog-2005:	(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, sbss_section, sdata_section)
ChangeLog-2005:	(common_section, COMMON_SECTION, ssib_section, SSIB_SECTION): Delete.
ChangeLog-2005:	(ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.
ChangeLog-2005:	(link_section, literals_section): Delete.
ChangeLog-2005:	set in_section to NULL.
ChangeLog-2005:	(ASM_OUTPUT_COMMON): Set in_section to NULL rather than calling
ChangeLog-2005:	the dummy common_section function.
ChangeLog-2005:	* config/arm/aout.h (ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.
ChangeLog-2005:	between readonly_data_section and text_section to check whether
ChangeLog-2005:	read-only data is being put in the text section.
ChangeLog-2005:	(arm_output_function_epilogue): Use switch_to_section.
ChangeLog-2005:	(thumb_call_via_reg): Replace call to in_text_section with
ChangeLog-2005:	a comparison between in_section and text_section.
ChangeLog-2005:	(arm_file_end): Use switch_to_section.
ChangeLog-2005:	(aof_text_section): Delete in favor of...
ChangeLog-2005:	(aof_output_text_section_asm_op): ...this new function.
ChangeLog-2005:	(aof_data_section): Delete in favor of...
ChangeLog-2005:	(aof_output_data_section_asm_op): ...this new function.
ChangeLog-2005:	(aof_asm_init_sections): New function.
ChangeLog-2005:	(zero_init_section): Moved from config/arm/aof.h.
ChangeLog-2005:	(aof_dump_imports, aof_file_start): Use switch_to_section.
ChangeLog-2005:	* config/arm/arm-protos.h (aof_text_section, aof_data_section): Delete.
ChangeLog-2005:	(common_section): Delete.
ChangeLog-2005:	* config/arm/pe.h (ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.
ChangeLog-2005:	(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the
ChangeLog-2005:	global switch_to_section function instead of the old port-local one.
ChangeLog-2005:	(drectve_section): Redefine as a macro.
ChangeLog-2005:	(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use get_named_section and
ChangeLog-2005:	switch_to_section.
ChangeLog-2005:	* config/avr/avr.c (progmem_section): New variable.
ChangeLog-2005:	(avr_output_progmem_section_asm_op): New function.
ChangeLog-2005:	(avr_asm_init_sections): New function.
ChangeLog-2005:	(avr_output_addr_vec_elt): Use switch_to_section.
ChangeLog-2005:	* config/avr/avr.h (progmem_section): Declare.
ChangeLog-2005:	(ASM_OUTPUT_CASE_LABEL): Use switch_to_section.
ChangeLog-2005:	* config/avr/avr-protos.h (progmem_section): Delete.
ChangeLog-2005:	* config/bfin/bfin.h (ASM_OUTPUT_LOCAL): Use switch_to_section.
ChangeLog-2005:	* config/darwin-sections.def: New file.
ChangeLog-2005:	* config/darwin.c: Define all sections in darwin-sections.def.
ChangeLog-2005:	(output_objc_section_asm_op, darwin_init_sections): New functions.
ChangeLog-2005:	(machopic_output_indirection): Use switch_to_section.
ChangeLog-2005:	(machopic_select_section): Return the selected section rather than
ChangeLog-2005:	inline conditional expressions.  Update the tests of last_text_section
ChangeLog-2005:	(machopic_select_rtx_section): Return the selected section rather than
ChangeLog-2005:	(darwin_file_end): Use switch_to_section.
ChangeLog-2005:	* config/darwin.h: Use darwin-sections.def to declare sections.
ChangeLog-2005:	* config/darwin-protos.h (darwin_init_sections): Declare.
ChangeLog-2005:	(machopic_picsymbol_stub_section, machopic_picsymbol_stub1_section)
ChangeLog-2005:	(machopic_symbol_stub_section, machopic_symbol_stub1_section): Delete.
ChangeLog-2005:	(machopic_lazy_symbol_ptr_section, machopic_nl_symbol_ptr_section)
ChangeLog-2005:	(constructor_section, destructor_section, mod_init_section): Delete.
ChangeLog-2005:	(mod_term_section): Delete.
ChangeLog-2005:	(darwin_exception_section, darwin_eh_frame_section): Delete.
ChangeLog-2005:	(machopic_select_section): Return a section.
ChangeLog-2005:	(machopic_select_rtx_section): Likewise.
ChangeLog-2005:	(text_coal_section, text_unlikely_section, text_unlikely_coal_section)
ChangeLog-2005:	(const_section, const_coal_section, const_data_section): Delete.
ChangeLog-2005:	(const_data_coal_section, data_coal_section, cstring_section): Delete.
ChangeLog-2005:	(literal4_section, literal8_section, constructor_section): Delete.
ChangeLog-2005:	(mod_init_section, mod_term_section, destructor_section): Delete.
ChangeLog-2005:	(objc_class_section, objc_meta_class_section, objc_category_section)
ChangeLog-2005:	(objc_class_vars_section, objc_instance_vars_section): Delete.
ChangeLog-2005:	(objc_cls_meth_section, objc_inst_meth_section): Delete.
ChangeLog-2005:	(objc_cat_cls_meth_section, objc_cat_inst_meth_section): Delete.
ChangeLog-2005:	(objc_selector_refs_section, objc_selector_fixup_section): Delete.
ChangeLog-2005:	(objc_symbols_section, objc_module_info_section): Delete.
ChangeLog-2005:	(objc_image_info_section, objc_protocol_section): Delete.
ChangeLog-2005:	(objc_string_object_section, objc_constant_string_object_section)
ChangeLog-2005:	(objc_class_names_section, objc_meth_var_names_section): Delete.
ChangeLog-2005:	(objc_meth_var_types_section, objc_cls_refs_section): Delete.
ChangeLog-2005:	(machopic_lazy_symbol_ptr_section, machopic_nl_symbol_ptr_section)
ChangeLog-2005:	(machopic_symbol_stub_section, machopic_picsymbol_stub_section)
ChangeLog-2005:	(darwin_exception_section, darwin_eh_frame_section): Delete.
ChangeLog-2005:	* config/t-darwin (darwin.o): Depend on config/darwin-sections.def.
ChangeLog-2005:	* config/frv/frv.c (frv_asm_out_constructor): Use switch_to_section.
ChangeLog-2005:	(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use switch_to_section and
ChangeLog-2005:	get_named_section.
ChangeLog-2005:	(ASM_OUTPUT_CASE_LABEL): Use switch_to_section.
ChangeLog-2005:	* config/frv/frv-protos.h (fixup_section, sdata_section, sbss_section)
ChangeLog-2005:	(data_section): Delete.
ChangeLog-2005:	(drectve_section): Redefine as a macro that sets in_section after
ChangeLog-2005:	in_text_section with comparison between in_section and text_section.
ChangeLog-2005:	* config/i386/i386.c (x86_64_elf_select_section): Return the section
ChangeLog-2005:	rather than emitting assembly code.  Use get_named_section.
ChangeLog-2005:	(x86_output_aligned_bss, ix86_file_end): Use switch_to_section and
ChangeLog-2005:	get_named_section.
ChangeLog-2005:	(machopic_output_stub): Use switch_to_section.
ChangeLog-2005:	* config/i386/nwld.c (nwld_named_section_asm_out_constructor)
ChangeLog-2005:	(nwld_named_section_asm_out_destructor): Use get_section and
ChangeLog-2005:	switch_to_section.
ChangeLog-2005:	* config/ia64/ia64.c (ia64_select_rtx_section): Return the section
ChangeLog-2005:	(ia64_rwreloc_select_section): Likewise.
ChangeLog-2005:	(ia64_rwreloc_select_rtx_section): Likewise.
ChangeLog-2005:	* config/ia64/ia64-protos.h (sdata_section, sbss_section): Delete.
ChangeLog-2005:	switch_to_section.
ChangeLog-2005:	* config/iq2000/iq2000.c (iq2000_select_rtx_section): Return the
ChangeLog-2005:	section rather than emitting assembly code.
ChangeLog-2005:	(iq2000_select_section): Likewise.
ChangeLog-2005:	* config/iq2000/iq2000.h (rdata_section, sdata_section): Delete.
ChangeLog-2005:	(sbss_section): Delete.
ChangeLog-2005:	* config/m32r/m32r.h (ASM_OUTPUT_ALIGNED_BSS): Use switch_to_section
ChangeLog-2005:	and get_named_section.
ChangeLog-2005:	* config/m32r/m32r-protos.h (sbss_section, sdata_section): Delete.
ChangeLog-2005:	in_section to NULL.
ChangeLog-2005:	(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.
ChangeLog-2005:	(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the
ChangeLog-2005:	global switch_to_section function instead of the old port-local one.
ChangeLog-2005:	(MCORE_EXPORT_NAME): Emit ".section .drectve" directly, then set
ChangeLog-2005:	in_section to NULL.
ChangeLog-2005:	(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the
ChangeLog-2005:	global switch_to_section function instead of the old port-local one.
ChangeLog-2005:	(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.
ChangeLog-2005:	(mips_output_aligned_bss): Use switch_to_section and get_named_section.
ChangeLog-2005:	(mips_output_aligned_decl_common): Use switch_to_section.
ChangeLog-2005:	(mips_select_rtx_section): Return the section rather than emitting
ChangeLog-2005:	assembly code.  Use get_named_section.
ChangeLog-2005:	(mips_function_rodata_section: Likewise get_section.
ChangeLog-2005:	(build_mips16_function_stub): Use switch_to_section.
ChangeLog-2005:	* config/mips/mips.h (ASM_OUTPUT_IDENT): Use switch_to_section.
ChangeLog-2005:	(mmix_asm_output_aligned_local): Use switch_to_section.
ChangeLog-2005:	* config/pa/pa.c (som_readonly_data_section, som_one_only_data_section)
ChangeLog-2005:	(som_one_only_readonly_data_section): New variables.
ChangeLog-2005:	(pa_output_function_epilogue): Set in_section to NULL instead of
ChangeLog-2005:	calling forget_section.
ChangeLog-2005:	(output_deferred_plabels): Use select_section.
ChangeLog-2005:	(pa_asm_output_mi_thunk): Likewise.  Set in_section to NULL instead
ChangeLog-2005:	of calling forget_section.
ChangeLog-2005:	(pa_asm_output_aligned_local): Use select_section.
ChangeLog-2005:	(som_text_section_asm_op): Delete in favor of...
ChangeLog-2005:	(som_output_text_section_asm_op): ...this new function.
ChangeLog-2005:	(pa_som_asm_init_sections): New function.
ChangeLog-2005:	(pa_select_section): Return the section rather than emitting
ChangeLog-2005:	* config/pa/pa-protos.h (som_text_section_asm_op): Delete.
ChangeLog-2005:	(som_readonly_data_section, som_one_only_readonly_data_section)
ChangeLog-2005:	(som_one_only_data_section, forget_section): Delete.
ChangeLog-2005:	* config/rs6000/rs6000.c (read_only_data_section): New variable.
ChangeLog-2005:	(private_data_section, read_only_private_data_section): New variables.
ChangeLog-2005:	(sdata2_section, toc_section): New variables.
ChangeLog-2005:	(rs6000_file_start): Use switch_to_section.
ChangeLog-2005:	(rs6000_assemble_integer): Use comparisons against in_section
ChangeLog-2005:	instead of calling in_toc_section and in_text_section.  Use
ChangeLog-2005:	unlikely_text_section_p.
ChangeLog-2005:	(rs6000_elf_output_toc_section_asm_op): New function, derived
ChangeLog-2005:	from the old rs6000/sysv4.h toc_section function.
ChangeLog-2005:	(rs6000_elf_asm_init_sections): New function.
ChangeLog-2005:	(rs6000_elf_select_rtx_section, rs6000_elf_select_section): Return
ChangeLog-2005:	the section rather than emitting assembly code.
ChangeLog-2005:	(machopic_output_stub): Use switch_to_section.
ChangeLog-2005:	(toc_section): Delete dummy function.
ChangeLog-2005:	switch_to_section and get_section.
ChangeLog-2005:	(rs6000_xcoff_output_readonly_section_asm_op): New function.
ChangeLog-2005:	(rs6000_xcoff_output_readwrite_section_asm_op): New function.
ChangeLog-2005:	(rs6000_xcoff_output_toc_section_asm_op): New function, derived from
ChangeLog-2005:	the old rs6000/xcoff.h toc_section function.
ChangeLog-2005:	(rs6000_xcoff_asm_init_sections): New function.
ChangeLog-2005:	(rs6000_xcoff_select_section, rs6000_xcoff_select_rtx_section): Return
ChangeLog-2005:	the section rather than emitting assembly code.
ChangeLog-2005:	(rs6000_xcoff_file_start): Use switch_to_section.
ChangeLog-2005:	* config/rs6000/rs6000-protos.h (toc_section, sdata_section): Delete.
ChangeLog-2005:	(sdata2_section, sbss_section, private_data_section): Delete.
ChangeLog-2005:	(read_only_data_section, read_only_private_data_section): Delete.
ChangeLog-2005:	(ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.
ChangeLog-2005:	(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.  Set in_section
ChangeLog-2005:	to NULL rather than no_section.
ChangeLog-2005:	* config/sh/sh.c (sh_file_start): Use switch_to_section.
ChangeLog-2005:	* config/sparc/sparc.c (emit_pic_helper): Use switch_to_section.
ChangeLog-2005:	from call to current_function_section.
ChangeLog-2005:	(bss100_section): New variable.
ChangeLog-2005:	(xstormy16_asm_output_aligned_common): Use switch_to_section.
ChangeLog-2005:	(xstormy16_asm_init_sections): New function.
ChangeLog-2005:	switch_to_section and get_section.
ChangeLog-2005:	(xstormy16_output_addr_vec): Use switch_to_section.  Remove argument
ChangeLog-2005:	from calls to current_function_section.
ChangeLog-2005:	* config/stormy16/stormy16-protos.h (bss100_section): Delete.
ChangeLog-2005:	* config/svr3.h (ASM_OUTPUT_LOCAL): Use switch_to_section.
ChangeLog-2005:	(rosdata_section, rozdata_section, tdata_section, zdata_section)
ChangeLog-2005:	(zbss_section): New variables.
ChangeLog-2005:	(v850_output_aligned_bss): Use switch_to_section.
ChangeLog-2005:	(v850_asm_init_sections): New function.
ChangeLog-2005:	(v850_select_section): Return the section rather than emitting
ChangeLog-2005:	* config/v850/v850-protos.h (sdata_section, rosdata_section): Delete.
ChangeLog-2005:	(sbss_section, tdata_section, zdata_section, rozdata_section): Delete.
ChangeLog-2005:	(zbss_section): Delete.
ChangeLog-2005:	* config/vax/vaxv.h (ASM_OUTPUT_LOCAL): Use switch_to_section.
ChangeLog-2005:	* config/vx-common.h (vxworks_exception_section): Delete.
ChangeLog-2005:	* config/xtensa/xtensa.c (xtensa_select_rtx_section): Return the
ChangeLog-2005:	section rather than emitting assembly code.
ChangeLog-2005:	switch_to_section.
ChangeLog-2005:	* coretypes.h (section): New union and typedef.
ChangeLog-2005:	* dbxout.c (FORCE_TEXT): Use switch_to_section.  Remove argument
ChangeLog-2005:	from call to current_function_section.
ChangeLog-2005:	(dbxout_symbol_location): Use switch_to_section.
ChangeLog-2005:	* dwarf2out.c (named_section_eh_frame_section): Delete, moving
ChangeLog-2005:	(default_eh_frame_section): ...here.  Return a section.
ChangeLog-2005:	(collect2_eh_frame_section): Delete, moving most of the code into..
ChangeLog-2005:	(switch_to_eh_frame_section): ...this new function.
ChangeLog-2005:	(debug_info_section, debug_abbrev_section, debug_aranges_section)
ChangeLog-2005:	(debug_macinfo_section, debug_line_section, debug_loc_section)
ChangeLog-2005:	(debug_pubnames_section, debug_str_section, debug_ranges_section): New
ChangeLog-2005:	(output_call_frame_info): Call switch_to_eh_frame_section instead of
ChangeLog-2005:	eh_frame_section.  Use switch_to_section and get_section.
ChangeLog-2005:	(dwarf2out_begin_prologue): Use switch_to_section.
ChangeLog-2005:	(AT_string_form): Check the flags in debug_str_section instead of
ChangeLog-2005:	(output_comp_unit): Use switch_to_section, get_section, and
ChangeLog-2005:	debug_info_section.
ChangeLog-2005:	(output_line_info, secname_for_decl): Use unlikely_text_section_p.
ChangeLog-2005:	(dwarf2out_begin_block): Use switch_to_section.  Remove argument
ChangeLog-2005:	from call to current_function_section.
ChangeLog-2005:	(dwarf2out_var_location): Use unlikely_text_section_p.
ChangeLog-2005:	(dwarf2out_source_line): Use switch_to_section.  Remove argument
ChangeLog-2005:	from call to current_function_section.
ChangeLog-2005:	(dwarf2out_define, dwarf2out_undef: Use switch_to_section and
ChangeLog-2005:	debug_macinfo_section.
ChangeLog-2005:	(dwarf2out_init): Initialize the new section variables.  Use them
ChangeLog-2005:	instead of calls to named_section_flags.  Use switch_to_section.
ChangeLog-2005:	(output_indirect_string): Use switch_to_section and debug_str_section.
ChangeLog-2005:	(dwarf2out_finish): Use switch_to_section and the new section
ChangeLog-2005:	* except.c (default_exception_section): Return the section instead
ChangeLog-2005:	(output_function_exception_table): Use the global exception_section
ChangeLog-2005:	variable instead of the target hook.  Use switch_to_section.  Remove
ChangeLog-2005:	argument from call to current_function_section.
ChangeLog-2005:	text section is the same as readonly_data_section.
ChangeLog-2005:	(profile_function): Use switch_to_section.  Remove argument from
ChangeLog-2005:	call to current_function_section.
ChangeLog-2005:	(final_scan_insn): Likewise.  Update use of last_text_section.
ChangeLog-2005:	* output.h (text_section, data_section, readonly_data_section)
ChangeLog-2005:	(ctors_section, dtors_section, bss_section, init_section)
ChangeLog-2005:	(fini_section, sdata_section): Turn into section pointers.
ChangeLog-2005:	(in_text_section, in_unlikely_text_section, exports_section)
ChangeLog-2005:	(drectve_section, named_section, mergeable_string_section)
ChangeLog-2005:	(last_text_section_name): Delete.
ChangeLog-2005:	(default_exception_section, default_eh_frame_section): Return sections.
ChangeLog-2005:	(section_common, named_section, unnamed_section): New structures.
ChangeLog-2005:	(unnamed_section_callback): New typedef.
ChangeLog-2005:	(section): New union.
ChangeLog-2005:	(sbss_section, exception_section, eh_frame_section): New variables.
ChangeLog-2005:	(in_section, last_text_section): Turn into section pointers.
ChangeLog-2005:	(get_unnamed_section, get_section, get_named_section): New functions.
ChangeLog-2005:	(mergeable_constant_section, function_section): Return a section.
ChangeLog-2005:	(unlikely_text_section): Likewise.
ChangeLog-2005:	(current_function_section): Likewise.  Remove the decl argument.
ChangeLog-2005:	(unlikely_text_section_p, switch_to_section): New functions.
ChangeLog-2005:	(output_section_asm_op): New function.
ChangeLog-2005:	(set_named_section_flags, named_section_flags, named_section_real)
ChangeLog-2005:	(named_section_first_declaration): Delete.
ChangeLog-2005:	(default_select_section, default_elf_select_section): Return a section.
ChangeLog-2005:	(default_elf_select_section_1, default_function_rodata_section)
ChangeLog-2005:	(default_no_function_rodata_section, default_select_rtx_section)
ChangeLog-2005:	(default_elf_select_rtx_section): Likewise.
ChangeLog-2005:	* rtl.h (in_data_section): Delete.
ChangeLog-2005:	* sdbout.c (sdbout_one_type): Use switch_to_section.
ChangeLog-2005:	* target.h (init_sections): New hook.
ChangeLog-2005:	(exception_section, eh_frame_section): Delete.
ChangeLog-2005:	(select_section, select_rtx_section, function_rodata_section): Return
ChangeLog-2005:	a section rather than emitting assembly code.
ChangeLog-2005:	* varasm.c (text_section, data_section, readonly_data_section)
ChangeLog-2005:	(ctors_section, dtors_section, bss_section, init_section)
ChangeLog-2005:	(fini_section): Turn into section pointers.
ChangeLog-2005:	(sdata_section, sbss_section, exception_section): New variables.
ChangeLog-2005:	(eh_frame_section): New variable.
ChangeLog-2005:	(in_section): Make global and turn into a section pointer.
ChangeLog-2005:	(last_text_section): Turn into a section pointer.
ChangeLog-2005:	(unnamed_sections): New variable.
ChangeLog-2005:	(in_named_name, last_text_section_name): Delete.
ChangeLog-2005:	(section_htab): New variable, replacing...
ChangeLog-2005:	(section_entry_eq, section_entry_hash): New functions, based on...
ChangeLog-2005:	(get_unnamed_section, get_section): New functions.
ChangeLog-2005:	(unlikely_text_section): Return a section instead of emitting
ChangeLog-2005:	(in_text_section, in_unlikely_text_section, in_data_section): Delete.
ChangeLog-2005:	(get_named_section_flags, named_section_first_declaration): Delete.
ChangeLog-2005:	(unlikely_text_section_p): New function.
ChangeLog-2005:	(named_section_real, named_section): Delete.
ChangeLog-2005:	(get_named_section): New function.
ChangeLog-2005:	(asm_output_bss, asm_output_aligned_bss): Use switch_to_section.
ChangeLog-2005:	(function_section): Return a section rather than emitting
ChangeLog-2005:	(current_function_section): Likewise.  Remove argument.  Use
ChangeLog-2005:	last_text_section if nonnull, otherwise use function_section.
ChangeLog-2005:	(default_function_rodata_section): Return a section rather than
ChangeLog-2005:	emitting assembly code.  Use get_section.
ChangeLog-2005:	(default_no_function_rodata_section): Return a section rather than
ChangeLog-2005:	(variable_section): Use switch_to_section and get_named_section.
ChangeLog-2005:	(mergeable_string_section): Return a section rather than emitting
ChangeLog-2005:	assembly code.  Use get_section.  Make static.  Don't take special
ChangeLog-2005:	(mergeable_constant_section): Return a section rather than emitting
ChangeLog-2005:	assembly code.  Use get_section.
ChangeLog-2005:	(default_named_section_asm_out_destructor): Use switch_to_section
ChangeLog-2005:	and get_section.
ChangeLog-2005:	(default_dtor_section_asm_out_destructor): Use switch_to_section.
ChangeLog-2005:	(default_named_section_asm_out_constructor): Use switch_to_section
ChangeLog-2005:	and get_section.
ChangeLog-2005:	(default_ctor_section_asm_out_constructor): Use switch_to_section.
ChangeLog-2005:	(assemble_start_function): Likewise.  Set last_text_section to
ChangeLog-2005:	NULL rather than no_section.  Change the type of save_section.
ChangeLog-2005:	(assemble_zeros, assemble_variable): Use the section flags to detect
ChangeLog-2005:	whether or not a section is text.
ChangeLog-2005:	(assemble_static_space): Use switch_to_section.
ChangeLog-2005:	(output_constant_def_contents): Use switch_to_section and
ChangeLog-2005:	get_named_section.
ChangeLog-2005:	(output_constant_pool_1): Use switch_to_section.  Use the section
ChangeLog-2005:	flags to see whether sections contain mergeable data.
ChangeLog-2005:	(init_varasm_once): Initialize section_htab instead of in_named_htab.
ChangeLog-2005:	Initialize new section variables.  Call TARGET_ASM_INIT_SECTIONS.
ChangeLog-2005:	(default_elf_asm_named_section): Use SECTION_DECLARED to detect
ChangeLog-2005:	whether a section has already been declared.
ChangeLog-2005:	(default_select_section, default_elf_select_section): Return a
ChangeLog-2005:	section rather than emitting assembly code.
ChangeLog-2005:	(default_elf_select_section_1): Likewise.  Use bss_section for
ChangeLog-2005:	SECCAT_BSS if nonnull.  Use get_named_section.
ChangeLog-2005:	(default_select_rtx_section): Return a section rather than
ChangeLog-2005:	(default_elf_select_rtx_section): Likewise.  Use get_named_section.
ChangeLog-2005:	(file_end_indicate_exec_stack): Use switch_to_section and get_section.
ChangeLog-2005:	(output_section_asm_op, switch_to_section): New functions.
ChangeLog-2005:	* vmsdbgout.c (vmsdbgout_finish): Use switch_to_section and
ChangeLog-2005:	get_named_section.
ChangeLog-2005:	* doc/tm.texi: Expand the introduction to the sections documentation.
ChangeLog-2005:	* config/darwin.c (machopic_select_section): It's not defined
ChangeLog-2005:	* config/darwin.c (darwin_encode_section_info): static weakref
ChangeLog-2005:	flag_unsafe_math_optimizations section.
ChangeLog-2005:	small data sections.
ChangeLog-2005:	compiling at the intersection of C and C++.
ChangeLog-2005:	(arm_encode_section_info): Call default_encode_section_info.
ChangeLog-2005:	* dwarf2out.c (have_switched_text_sections): New boolean variable.
ChangeLog-2005:	(dwarf2out_switch_text_section): Set it to true instead of
ChangeLog-2005:	(output_loc_list): Additionally test have_switched_text_sections.
ChangeLog-2005:	insert_section_boundary_note.
ChangeLog-2005:	switch to the function's section before emitting the .size directive.
ChangeLog-2005:	* bb-reorder.c (insert_section_boundary_note): Staticify.
ChangeLog-2005:	(rest_of_handle_reorder_blocks): Call insert_section_boundary_note.
ChangeLog-2005:	* output.h (insert_section_boundary_note): Delete.
ChangeLog-2005:	peculiarity of GOT/TOC section usage.
ChangeLog-2005:	* tree-vrp.c (vrp_meet): Fix the intersection of equivalence
ChangeLog-2005:	(i386_pe_encode_section_info): Replace override of ambiguous
ChangeLog-2005:	named sections TREE_READONLY.
ChangeLog-2005:	Collect all the fails into a single section failed_to_convert,
ChangeLog-2005:	* config/darwin.c (machopic_select_section): Remove the hack to
ChangeLog-2005:	* config/stormy16/stormy16.c (xstormy16_encode_section_info):
ChangeLog-2005:	Call default_encode_section_info.
ChangeLog-2005:	(ix86_encode_section_info): Likewise.
ChangeLog-2005:	simplify code since the bss100_section cass is the only case
ChangeLog-2005:	(xstormy16_encode_section_info): Encode below100 attribute
ChangeLog-2005:	* config/mips/mips.c (mips_encode_section_info, mips_attribute_table,
ChangeLog-2005:	* output.h (enum section_category): Export from varasm.c
ChangeLog-2005:	(categorize_decl_for_section): Likewise.
ChangeLog-2005:	* varasm.c (enum section_category): Kill.
ChangeLog-2005:	(categorize_decl_for_section): Make global.
ChangeLog-2005:	* i386.c (ix86_section_threshold): New static variable.
ChangeLog-2005:	(ix86_in_large_data_p, ix86_encode_section_info,
ChangeLog-2005:	x86_64_elf_unique_section,
ChangeLog-2005:	x86_64_elf_select_section): New functions.
ChangeLog-2005:	* doc/extend.texi (Raw read/write Functions): New section.
ChangeLog-2005:	* doc/extend.texi (MIPS DSP Built-in Functions): New section.
ChangeLog-2005:	* doc/trouble.texi: Update section on handling of empty loops.
ChangeLog-2005:	(ghs_pragma_section): Likewise.
ChangeLog-2005:	(ghs_pragma_section): Likewise.
ChangeLog-2005:	* doc/extend.texi (Blackfin Built-in Functions): New section.
ChangeLog-2005:	the new structures.  Don't update RTL, section name, weak status,
ChangeLog-2005:	(add_location_or_const_value_attribute): Don't check section name
ChangeLog-2005:	(pa_encode_section_info): Call default handler to handle common
ChangeLog-2005:	sections.
ChangeLog-2005:	(default_encode_section_info): Use DECL_TLS_MODEL instead of
ChangeLog-2005:	(default_section_type_flags_1): Likewise.
ChangeLog-2005:	(categorize_decl_for_section): Likewise.
ChangeLog-2005:	* config/darwin.c (machopic_select_section): constant ObjC string
ChangeLog-2005:	(gen_regparm_prefix): Adjust to match i386_nlm_encode_section_info.
ChangeLog-2005:	(i386_nlm_encode_section_info): Adjust to match WinNT's changes.
ChangeLog-2005:	DWARF2_DEBUGGING_INFO section.
ChangeLog-2005:	* varasm.c (initialize_cold_section_name): Fix alloca buffer overflow.
ChangeLog-2005:	intersection of the two equivalence sets.
ChangeLog-2005:	(i386_pe_encode_section_info): Likewise.
ChangeLog-2005:	(m68hc11_encode_section_info): Likewise.
ChangeLog-2005:	output statement section.
ChangeLog-2005:	* dwarf2out.c (dwarf2out_switch_text_section): Likewise.
ChangeLog-2005:	* varasm.c (initialize_cold_section_name):  Add gcc_assert;
ChangeLog-2005:	(unlikely_text_section): Add check for flag_function_sections.
ChangeLog-2005:	(assemble_start_function): Move call to resolve_section, so it
ChangeLog-2005:	comes before first call to unlikely_text_section.
ChangeLog-2005:	(assemble_end_function): Add test and call to function_section
ChangeLog-2005:	("movsi"): Ditto.  Unquote preparation statement section.
ChangeLog-2005:	(mov<V32:mode> expander): Move to the top of the V32 section.
ChangeLog-2005:	xstormy16_encode_section_info, xstormy16_print_operand_address,
ChangeLog-2005:	s390_encode_section_info, s390_cannot_force_const_mem,
ChangeLog-2005:	* varasm.c (default_function_rodata_section): Put .rodata section in
ChangeLog-2005:	(default_elf_asm_named_section): Rename HAVE_GAS_COMDAT_GROUP to
ChangeLog-2005:	(default_unique_section_1): Don't use .gnu.linkonce when COMDAT is
ChangeLog-2005:	unicosmk_initial_elimination_offset, unicosmk_unique_section,
ChangeLog-2005:	* config/mcore/mcore.h (switch_to_section): Likewise.
ChangeLog-2005:	* config/m32r/m32r.c (m32r_encode_section_info): Use gcc_assert
ChangeLog-2005:	* config/avr/avr.c (avr_output_addr_vec_elt): Use special section
ChangeLog-2005:	Remove targetm.have_named_sections test.
ChangeLog-2005:	(insert_section_boundary_note): Likewise.
ChangeLog-2005:	* dbxout.c (dbxout_function_end): Get hot/cold section labels from
ChangeLog-2005:	(cold_text_section_label): New static global variable.
ChangeLog-2005:	(dwarf2out_switch_text_section): Get hot/cold section labels from
ChangeLog-2005:	(output_aranges): Use cold_text_section_label and cold_end_label;
ChangeLog-2005:	(output_line_info): Get cold section label from function struct; test
ChangeLog-2005:	(dwarf2out_init): Generate cold_text_section_label and cold_end_label;
ChangeLog-2005:	write out cold_text_section_label if partition flag is set.
ChangeLog-2005:	section labels: hot_section_label, cold_section_label,
ChangeLog-2005:	hot_section_end_label and cold_section_end_label; also add new field
ChangeLog-2005:	for cold text section name, unlikely_text_section_name.
ChangeLog-2005:	!targetm.have_named_sections.
ChangeLog-2005:	* output.h (hot_section_label): Remove.
ChangeLog-2005:	(hot_section_end_label): Remove.
ChangeLog-2005:	(cold_section_end_label): Remove.
ChangeLog-2005:	(unlikely_section_label): Remove.
ChangeLog-2005:	(unlikely_text_section_name): Remove.
ChangeLog-2005:	* varasm.c (unlikely_section_label): Remove.
ChangeLog-2005:	(hot_section_label): Remove.
ChangeLog-2005:	(hot_section_end_label): Remove.
ChangeLog-2005:	(cold_section_end_label): Remove.
ChangeLog-2005:	(unlikely_text_section_name): Remove.
ChangeLog-2005:	(initialize_cold_section_name): Modify to call
ChangeLog-2005:	targetm.strip_name_encoding; to store cold section name in current
ChangeLog-2005:	function struct, if it exists; and to only use the decl_section_name
ChangeLog-2005:	if flag_named_sections is true.
ChangeLog-2005:	(unlikely_text_section): Modify to get section name out of current
ChangeLog-2005:	(in_unlikely_text_section): Likewise.
ChangeLog-2005:	(named_section): Modify to get/put cold section name in current function
ChangeLog-2005:	(function_section): Change 'bool unlikely' to 'int reloc'; check
ChangeLog-2005:	targetm.have_named_sections before calling named_section.
ChangeLog-2005:	(current_function_section): Likewise.
ChangeLog-2005:	(assemble_start_function): Modify to get/put unlikely_text_section_name
ChangeLog-2005:	in current function struct; modify to get hot/cold section labels
ChangeLog-2005:	test partitioning flag before writing out hot section label.
ChangeLog-2005:	hot/cold section labels.
ChangeLog-2005:	(default_section_type_flags_1): Get cold text section name from
ChangeLog-2005:	cold text section if there is not a current function struct.
ChangeLog-2005:	* config/darwin.c (darwin_encode_section_info): Always set
ChangeLog-2005:	* varasm.c (named_section, default_assemble_integer,
ChangeLog-2005:	* varasm.c (assemble_start_function): Remove reset of in_section.
ChangeLog-2005:	* doc/extend.texi (Atomic Builtins): New section
ChangeLog-2005:	frees unlikely_text_section_name,
ChangeLog-2005:	flag before writing out section labels.
ChangeLog-2005:	writing out section labels.
ChangeLog-2005:	(insert_section_boundary_note): Revert my patch from April 9.
ChangeLog-2005:	(cold_text_section_label): Revert my patch from April 9.
ChangeLog-2005:	(dwarf2out_switch_text_section): Revert my patch from April 9.
ChangeLog-2005:	* output.h (unlikely_section_label, hot_section_label,
ChangeLog-2005:	hot_section_end_label, cold_section_end_label,
ChangeLog-2005:	unlikely_text_section_name): Revert my patch from April 9.
ChangeLog-2005:	* varasm.c (unlikely_section_label, hot_section_label,
ChangeLog-2005:	hot_section_end_label, cold_section_end_label,
ChangeLog-2005:	unlikely_text_section_name): Revert my patch from April 9.
ChangeLog-2005:	(initialize_cold_section_name): Revert my patch from April 9.
ChangeLog-2005:	(unlikely_text_section): Revert my patch from April 9.
ChangeLog-2005:	(in_unlikely_text_section): Revert my patch from April 9.
ChangeLog-2005:	(named_section): Revert my patch from April 9.
ChangeLog-2005:	(function_section): Revert my patch from April 9.
ChangeLog-2005:	(current_function_section): Revert my patch from April 9.
ChangeLog-2005:	(default_section_type_flags_1): Revert my patch from April 9.
ChangeLog-2005:	Remove targetm.have_named_sections test.
ChangeLog-2005:	(insert_section_boundary_note): Likewise.
ChangeLog-2005:	* dbxout.c (dbxout_function_end): Get hot/cold section labels from
ChangeLog-2005:	(cold_text_section_label): New static global variable.
ChangeLog-2005:	(dwarf2out_switch_text_section): Get hot/cold section labels from
ChangeLog-2005:	(output_aranges): Use cold_text_section_label and cold_end_label;
ChangeLog-2005:	(output_line_info): Get cold section label from function struct.
ChangeLog-2005:	(get_subprogram_die): Get hot/cold section labels from function struct.
ChangeLog-2005:	(dwarf2out_init): Generate cold_text_section_label and cold_end_label;
ChangeLog-2005:	write out cold_text_section_label if partition flag is set.
ChangeLog-2005:	section labels: hot_section_label, cold_section_label,
ChangeLog-2005:	hot_section_end_label and cold_section_end_label; also add new field
ChangeLog-2005:	for cold text section name, unlikely_text_section_name.
ChangeLog-2005:	!targetm.have_named_sections.
ChangeLog-2005:	* output.h (hot_section_label): Remove.
ChangeLog-2005:	(hot_section_end_label): Remove.
ChangeLog-2005:	(cold_section_end_label): Remove.
ChangeLog-2005:	(unlikely_section_label): Remove.
ChangeLog-2005:	(unlikely_text_section_name): Remove.
ChangeLog-2005:	unlikely_text_section_name.
ChangeLog-2005:	* varasm.c (unlikely_section_label): Remove.
ChangeLog-2005:	(hot_section_label): Remove.
ChangeLog-2005:	(hot_section_end_label): Remove.
ChangeLog-2005:	(cold_section_end_label): Remove.
ChangeLog-2005:	(unlikely_text_section_name): Remove.
ChangeLog-2005:	(initialize_cold_section_name): Modify to call
ChangeLog-2005:	targetm.strip_name_encoding; to store cold section name in current
ChangeLog-2005:	function struct, if it exists; and to only use the decl_section_name
ChangeLog-2005:	if flag_named_sections is true.
ChangeLog-2005:	(unlikely_text_section): Modify to get section name out of current
ChangeLog-2005:	(in_unlikely_text_section): Likewise.
ChangeLog-2005:	(named_section): Modify to get/put cold section name in current function
ChangeLog-2005:	(function_section): Change 'bool unlikely' to 'int reloc'; check
ChangeLog-2005:	targetm.have_named_sections before calling named_section.
ChangeLog-2005:	(current_function_section): Likewise.
ChangeLog-2005:	(assemble_start_function): Modify to get/put unlikely_text_section_name
ChangeLog-2005:	in current function struct; modify to get hot/cold section labels
ChangeLog-2005:	test partitioning flag before writing out hot section label.
ChangeLog-2005:	hot/cold section labels.
ChangeLog-2005:	(default_section_type_flags_1): Modify to use array instead of
ChangeLog-2005:	 char* for unlikely_text_section_name; set flags correctly for
ChangeLog-2005:	 cold text section if there is not a current function decl.
ChangeLog-2005:	* config.host: Add a section for generic hosts, and a subsection
ChangeLog-2005:	* doc/invoke.texi (Blackfin Options): New section.
ChangeLog-2005:	* doc/md.texi (Blackfin family): New section to document constraints.
ChangeLog-2005:	* passes.c (rest_of_handle_final): NULL unlikely_text_section_name
ChangeLog-2005:	(i386_pe_asm_named_section): Handle sections generated by
ChangeLog-2005:	(mark_bb_for_unlikely_executed_section): Remove function.
ChangeLog-2005:	(insert_section_boundary_note): New function.
ChangeLog-2005:	* dbxout.c (FORCE_TEXT): Replace function_section with
ChangeLog-2005:	current_function_section.
ChangeLog-2005:	function, switch_text_section.
ChangeLog-2005:	hot and cold sections.
ChangeLog-2005:	for new debug_hooks funciton, switch_text_section..
ChangeLog-2005:	switch_text_section.
ChangeLog-2005:	dw_fde_hot_section_label, dw_fde_hot_section_end_label,
ChangeLog-2005:	dw_fde_unlikely_section_label, dw_fde_unlikely_section_end_label and
ChangeLog-2005:	dw_fde_switched_sections.
ChangeLog-2005:	sections in the middle; if so, use appropriate extra hot and cold
ChangeLog-2005:	section labels to compute size deltas for the hot and cold sections.
ChangeLog-2005:	(dwarf2out_switch_text_section): New function (invoked through
ChangeLog-2005:	(dwarf2_debug_hooks): Initialize switch_text_section function to be
ChangeLog-2005:	dwarf2out_switch_text_section.
ChangeLog-2005:	(struct var_loc_node): Add new field, section_label.
ChangeLog-2005:	(output_aranges): Add code to check whether in hot or cold section and
ChangeLog-2005:	(output_line_info): Add code to check which section we're in and
ChangeLog-2005:	(dwarf2out_begin_block): Change call to function_section into call to
ChangeLog-2005:	current_function_section.
ChangeLog-2005:	section and use the appropriate label.
ChangeLog-2005:	function_section into call to current_function_section.
ChangeLog-2005:	to cold section, except for the single time
ChangeLog-2005:	debug_hooks->switch_text_sections; replace appropriate calls to
ChangeLog-2005:	function_section with calls to current_function_section.
ChangeLog-2005:	* output.h (current_function_section): Add new function decl.
ChangeLog-2005:	(insert_section_boundary_note): Likewise.
ChangeLog-2005:	(enum in_section): Move this declaration here from varasm.c.
ChangeLog-2005:	(unlikely_section_label): Likewise.
ChangeLog-2005:	(unlikely_text_section_name): Likewise.
ChangeLog-2005:	(last_text_section_name): New global variable.
ChangeLog-2005:	(last_text_section): Likewise.
ChangeLog-2005:	(hot_section_label): Likewise.
ChangeLog-2005:	(hot_section_end_label): Likewise.
ChangeLog-2005:	(cold_section_end_label): Likewise.
ChangeLog-2005:	* passes.c (rest_of_handle_final): Free unlikely_text_section_name.
ChangeLog-2005:	switch_text_section.
ChangeLog-2005:	(unlikely_section_label_printed): Remove global variable.
ChangeLog-2005:	(unlikely_section_label): Make global variable not be static any more.
ChangeLog-2005:	(unlikely_text_section_name): Likewise.
ChangeLog-2005:	(hot_section_end_label): New global variable (not static)
ChangeLog-2005:	(hot_section_label): Likewise.
ChangeLog-2005:	(cold_section_end_label): Likewise..
ChangeLog-2005:	(last_text_section): New global variable, not static.
ChangeLog-2005:	(last_text_section_name): New global variable, not static.
ChangeLog-2005:	(initialize_cold_section_name): New function.
ChangeLog-2005:	(enum in_section): Move declaration to output.h.
ChangeLog-2005:	(text_section): Update last_text_section.
ChangeLog-2005:	(unlikely_text_section): Replace code to determine cold section name
ChangeLog-2005:	with call to initialize_cold_section_name; Add code to update
ChangeLog-2005:	last_text_section; remove code for printing out label.
ChangeLog-2005:	(named_section_real): Add code to update last_text_section and
ChangeLog-2005:	last_text_section_name as appropriate.
ChangeLog-2005:	(function_section): Change test for 'unlikely' to depend on
ChangeLog-2005:	current_function_section).
ChangeLog-2005:	(current_function_section): New function.
ChangeLog-2005:	unlikely_text_section_name; initialize hot_section_end_label;
ChangeLog-2005:	print hot and cold section labels at the start of the function;
ChangeLog-2005:	ast_text_section; add call to insert_section_boundary_note.
ChangeLog-2005:	(assemble_end_function): Add code to write out hot and cold section
ChangeLog-2005:	switch_text_section.
ChangeLog-2005:	* config/darwin.c (machopic_select_section): Replace incorrect
ChangeLog-2005:	function in base_funs; update reloc for cold sections if necessary.
ChangeLog-2005:	last_text_section if appropriate.
ChangeLog-2005:	(text_unlikely_section): Remove.
ChangeLog-2005:	is emitted in the right section.
ChangeLog-2005:	* doc/extend.texi (Weak Pragmas): New section.
ChangeLog-2005:	* doc/invoke.texi: Add 8540 to list of cpus in rs6000 cpu section.
ChangeLog-2005:	* varasm.c (named_section_real, named_section, make_decl_rtl,
ChangeLog-2005:	default_no_named_section, default_elf_select_section_1,
ChangeLog-2005:	default_unique_section_1): Likewise.
ChangeLog-2005:	* varasm.c (named_section): Use xstrdup rather than doing it by
ChangeLog-2005:	* config/darwin.c (machopic_select_rtx_section): Don't put relocatable
ChangeLog-2005:	expressions in the .literal8 section.
ChangeLog-2005:	(ix86_preferred_reload_class): Rewrite fp-constant section, with
ChangeLog-2005:	* config/rs6000/rs6000.c (rs6000_file_start): Create toc section
ChangeLog-2005:	(rs6000_emit_load_toc_table): Don't create toc_section here.
ChangeLog-2005:	* config/darwin.c (machopic_select_section): Use TYPE_SIZE_UNIT instead
ChangeLog-2005:	* varasm.c (default_section_type_flags_1): Don't set SECTION_SMALL.
ChangeLog-2005:	(ia64_rwreloc_section_type_flags): Delete.
ChangeLog-2005:	(ia64_section_type_flags): New function.
ChangeLog-2005:	* config/ia64/ia64.c (ia64_in_small_data_p): Also handle the section
ChangeLog-2005:	names resulting from -ffunction-sections/-fdata-sections and linkonce
ChangeLog-2005:	* varasm.c (default_section_type_flags_1): Also set SECTION_SMALL
ChangeLog-2005:	based on the section name. Rearrange the section name comparison logic
ChangeLog-2005:	slightly so that each section name is compared against at most once.
ChangeLog-2006:	(sbitmap_intersection_of_succs): Ditto.
ChangeLog-2006:	(sbitmap_intersection_of_preds): Ditto.
ChangeLog-2006:	are kept for .gnu.linkonce.t sections if COMDAT groups are disabled.
ChangeLog-2006:	* config/darwin.c (machopic_select_section): Rewrite.
ChangeLog-2006:	(darwin_text_section): New.
ChangeLog-2006:	(darwin_rodata_section): Ditto.
ChangeLog-2006:	(darwin_mergeable_string_section): Ditto.
ChangeLog-2006:	(darwin_mergeable_constant_section): Ditto.
ChangeLog-2006:	* config/darwin-sections.def: Add SECTION_STRINGS for cstring_section.
ChangeLog-2006:	(spu_encode_section_info): New.
ChangeLog-2006:	record_gcc_switches_section fields.
ChangeLog-2006:	(expand_omp_sections): Same.
ChangeLog-2006:	(expand_omp_sections): Handle NULL region->cond or region->exit.
ChangeLog-2006:	section to general section.  Remove documentation for
ChangeLog-2006:	* dwarf2out.c (debug_pubtypes_section): New static global variable.
ChangeLog-2006:	pubtype_table vectors; also initialize debug_pubtypes_section.
ChangeLog-2006:	  * config/sh/crt1.asm (vbr_start): Move to new section .test.vbr.
ChangeLog-2006:	* lib1funcs.asm [__ELF__ && __linux__]: Emit .note.GNU-stack section
ChangeLog-2006:	from priority argument.  Use different section for non-default
ChangeLog-2006:	* except.c (switch_to_exception_section): Do not cache the section
ChangeLog-2006:	if named sections are supported and HAVE_LD_EH_GC_SECTIONS is defined
ChangeLog-2006:	and flag_function_sections is set.
ChangeLog-2006:	different sections.  On x86/Solaris, GAS does but Solaris as doesn't.
ChangeLog-2006:	different sections, i.e. we're using the native solaris assembler.
ChangeLog-2006:	* dwarf2out.c (switch_to_eh_frame_section): Update for removal
ChangeLog-2006:	* except.c (switch_to_exception_section): Add 'const char*' param.
ChangeLog-2006:	If named sections are supported and HAVE_LD_EH_GC_SECTIONS is defined
ChangeLog-2006:	and flag_function_sections is set, use a function-specific section.
ChangeLog-2006:	Adjust call to switch_to_exception_section.
ChangeLog-2006:	* doc/invoke.texi (Score Options): New section.
ChangeLog-2006:	* doc/md.texi (Score family): New section to document constraints.
ChangeLog-2006:	* doc/gcov.texi: Add formatting to "Invoking gcov" section head.
ChangeLog-2006:	(default_encode_section_info): Don't add SYMBOL_FLAG_TLS_SHIFT
ChangeLog-2006:	* config/darwin.c (machopic_select_rtx_section): Add CONST_VECTOR
ChangeLog-2006:	* config/darwin.c (machopic_select_rtx_section): Add TARGET_64BIT
ChangeLog-2006:	* config/darwin.c (machopic_select_section): Support literal16.
ChangeLog-2006:	(machopic_select_rtx_section): Ditto.
ChangeLog-2006:	* config/darwin-sections.def: Ditto.
ChangeLog-2006:	(dwarf2out_switch_text_section): Reset the current label to avoid
ChangeLog-2006:	using advance_loc4 over section boundaries.
ChangeLog-2006:	the alignment of global arrays when -fsection-anchors is enabled.
ChangeLog-2006:	(PowerPC Variable Attributes): New section.
ChangeLog-2006:	* toplev.c (process_options): Don't give -ffunction-sections may
ChangeLog-2006:	(i386_pe_encode_section_info): ...here.
ChangeLog-2006:	section from the "Options for Code Generation Conventions".
ChangeLog-2006:	* varasm.c (mergeable_string_section): Check for embedded NULs and
ChangeLog-2006:	section.  Reorder elements to avoid padding.  Remove unused
ChangeLog-2006:	* config/mips/mips.c (mips_file_start): Create special section
ChangeLog-2006:	-fsection-anchors on darwin for now.
ChangeLog-2006:	* config/ia64/ia64.c (ia64_select_rtx_section): Check TARGET_NO_SDATA.
ChangeLog-2006:	* crtstuff.c (__dso_handle): Set section from
ChangeLog-2006:	section for ppc.
ChangeLog-2006:	* omp-low.c (lower_omp_sections): Call maybe_catch_exception
ChangeLog-2006:	TARGET_NO_FP_IN_TOC for section anchors.
ChangeLog-2006:	(optimization_options): Enable section anchors for all
ChangeLog-2006:	calculating section information.
ChangeLog-2006:	to hash table twice when the debug_str section has SECTION_MERGE.
ChangeLog-2006:	(sh_symbian_encode_section_info): Likewise.
ChangeLog-2006:	* tree-cfg.c (make_edges, make_omp_sections_edges, move_stmt_r,
ChangeLog-2006:	(expand_omp_sections): Similarly, with GOMP_sections_end.
ChangeLog-2006:	(lower_omp_sections): Expand with OMP_CONTINUE, do not collect
ChangeLog-2006:	(make_omp_sections_edges): Remove.
ChangeLog-2006:	* dwarf2out.c (output_call_frame_info): Create debug_frame_section
ChangeLog-2006:	(output_abbrev_section): Likewise.
ChangeLog-2006:	section.  Delete PA_CXA_FINALIZE_STUB and PA_JV_REGISTERCLASSES_STUB
ChangeLog-2006:	Move the version numbers of DejaGnu here from the testing section
ChangeLog-2006:	subsection.
ChangeLog-2006:	(make_omp_sections_edges): Don't set EDGE_ABNORMAL.
ChangeLog-2006:	* dwarf2asm.h (dw2_asm_output_offset): Add section parameter.
ChangeLog-2006:	* dwarf2asm.c (dw2_asm_output_offset): Add base section parameter.
ChangeLog-2006:	* dwarf2out.c (debug_frame_section): New.
ChangeLog-2006:	(output_call_frame_info): Use debug_frame_section.  Pass it to
ChangeLog-2006:	(output_die): Pass appropriate section to dw2_asm_output_offset.
ChangeLog-2006:	if not EH section; simplify.
ChangeLog-2006:	(FRAME_BEGIN_LABEL): Must start with 'L' in debug section.
ChangeLog-2006:	of ptr into the ENABLE_CHECKING section.
ChangeLog-2006:	(default_encode_section_info): Preserve SYMBOL_FLAG_HAS_BLOCK_INFO
ChangeLog-2006:	* target.h (have_switchable_bss_sections): New hook.
ChangeLog-2006:	* varasm.c (tls_comm_section, comm_section, lcomm_section)
ChangeLog-2006:	(bss_noswitch_section): New variables.
ChangeLog-2006:	(get_unnamed_section): Add SECTION_UNNAMED to the flags.
ChangeLog-2006:	(get_noswitch_section): New function.
ChangeLog-2006:	(get_block_for_section): Allow SECT to be null.
ChangeLog-2006:	(unlikely_text_section_p): Use SECTION_STYLE.
ChangeLog-2006:	(get_variable_section): Move earlier in file.  Take a new argument,
ChangeLog-2006:	Return one of the new *_sections in such cases.
ChangeLog-2006:	(change_symbol_section): Remove in favor of...
ChangeLog-2006:	sections.  Check whether SYMBOL_REF_BLOCK is null.
ChangeLog-2006:	(init_varasm_once): Initialize the new section variables.
ChangeLog-2006:	(categorize_decl_for_section): Use bss_initializer_p.
ChangeLog-2006:	(switch_to_section): Use SECTION_STYLE.  Abort for SECTION_NOSWITCH.
ChangeLog-2006:	(unnamed_section): Mention SECTION_UNNAMED in comment.
ChangeLog-2006:	(named_section): Likewise SECTION_NAMED.
ChangeLog-2006:	(noswitch_section_callback): New type.
ChangeLog-2006:	(noswitch_section): New structure.
ChangeLog-2006:	(section): Add a noswitch_section alternative.
ChangeLog-2006:	(tls_comm_section, comm_section, lcomm_section): Declare.
ChangeLog-2006:	(bss_noswitch_section, have_global_bss_p): Declare.
ChangeLog-2006:	* config/darwin-sections.def (cstring_section):
ChangeLog-2006:	(literal4_section): Likewise.
ChangeLog-2006:	(literal8_section): Likewise.
ChangeLog-2006:	(objc_selector_refs_section): Likewise.
ChangeLog-2006:	(objc_cls_refs_section): Likewise.
ChangeLog-2006:	i.e. config/ARCH/FILE.  Change i386 section to refer to
ChangeLog-2006:	config/i386/predicates.md; update that section to match docstrings.
ChangeLog-2006:	definition macros to their own section, clearly mark as obsolete.
ChangeLog-2006:	@table @code ... @end table to M32C subsection.
ChangeLog-2006:	* tree.h (variable_section): Delete.
ChangeLog-2006:	* varasm.c (variable_section): Delete.
ChangeLog-2006:	(Anchored Addresses): New section.
ChangeLog-2006:	* doc/invoke.texi (-fsection-anchors): Document.
ChangeLog-2006:	(target_supports_section_anchors_p): New function.
ChangeLog-2006:	(process_options): Check that -fsection-anchors is only used on
ChangeLog-2006:	* common.opt (-fsection-anchors): New switch.
ChangeLog-2006:	(hash_section, object_block_entry_eq, object_block_entry_hash)
ChangeLog-2006:	(use_object_blocks_p, get_block_for_section, create_block_symbol)
ChangeLog-2006:	(use_blocks_for_decl_p, change_symbol_section): New functions.
ChangeLog-2006:	(get_variable_section): New function, split out from assemble_variable.
ChangeLog-2006:	use_blocks_for_decl_p say so.  Use change_symbol_section if the
ChangeLog-2006:	Use get_variable_section and assemble_variable_contents.
ChangeLog-2006:	(get_constant_alignment, get_constant_section, get_constant_size): New
ChangeLog-2006:	for block symbols; just pass them to place_section_symbol.
ChangeLog-2006:	Use get_constant_section and get_constant_alignment.
ChangeLog-2006:	Don't switch sections here.
ChangeLog-2006:	Switch sections here instead.  Don't output anything for block symbols;
ChangeLog-2006:	(default_encode_section_info): Keep the old SYMBOL_FLAG_IN_BLOCK.
ChangeLog-2006:	(place_block_symbol, get_section_anchor, output_object_block)
ChangeLog-2006:	* output.h (output_section_symbols): Declare.
ChangeLog-2006:	(place_section_symbol, get_section_anchor, default_asm_output_anchor)
ChangeLog-2006:	* doc/invoke.texi (GNU/Linux Options): New section.
ChangeLog-2006:	* varasm.c (function_section): Check for section name before
ChangeLog-2006:	calling select_section on targets that define
ChangeLog-2006:	unlikely_text_section instead of hot_function_section if
ChangeLog-2006:	(expand_omp_sections): Likewise.
ChangeLog-2006:	(lower_omp_sections): Rename from expand_omp_sections.
ChangeLog-2006:	* tree-cfg.c (make_omp_sections_edges): New.
ChangeLog-2006:	c_parser_omp_sections_scope, c_parser_omp_sections,
ChangeLog-2006:	unlikely_test_section_p test.
ChangeLog-2006:	* dwarf2out.c (have_switched_text_section): Delete.
ChangeLog-2006:	(have_multiple_function_sections): New.
ChangeLog-2006:	(dwarf2out_switch_text_section): Set have_multiple_function_sections.
ChangeLog-2006:	(output_loc_list): Use have_multiple_function_sections.
ChangeLog-2006:	(dwarf2out_begin_function): Set have_multiple_function_sections if
ChangeLog-2006:	Check function_section rather than DECL_SECTION_NAME.
ChangeLog-2006:	(dwarf2out_finish): Use have_multiple_function_sections.
ChangeLog-2007:	* config/pa/pa.c (pa_encode_section_info): If !first, preserve
ChangeLog-2007:	* bb-reorder.c (insert_section_boundary_note): Clear
ChangeLog-2007:	* config/mmix/mmix.c (mmix_encode_section_info): Remove duplicate
ChangeLog-2007:	* config/mmix/mmix.c (mmix_encode_section_info): Use alloca to
ChangeLog-2007:	(c_parser_omp_sections_scope): Likewise.
ChangeLog-2007:	* config/avr/avr.h: Do not include progmem_section definition when
ChangeLog-2007:	(mips_section_threshold, sym_lineno, set_noat, mips_branch_likely)
ChangeLog-2007:	(mips_section_threshold): Rename to...
ChangeLog-2007:	* libgcc-std.ver: Add fixed-point routines to GCC_4.3.0 section.
ChangeLog-2007:	to both ".section"s.
ChangeLog-2007:	(mips_encode_section_info): Don't set SYMBOL_FLAG_MIPS16_FUNC.
ChangeLog-2007:	(mips_select_rtx_section): Use mips_rtx_constant_in_small_data_p
ChangeLog-2007:	and default_elf_select_rtx_section.
ChangeLog-2007:	(mips_in_small_data_p): Honor section attributes for MIPS16 too.
ChangeLog-2007:	expand_omp_for_static_chunk, expand_omp_for, expand_omp_sections):
ChangeLog-2007:	(mips_encode_section_info): Check for mips16 function, and set
ChangeLog-2007:	* config/mmix/mmix.c (mmix_encode_section_info): Supply a TYPE for
ChangeLog-2007:	(rs6000_xcoff_output_readonly_section_asm_op):
ChangeLog-2007:	(rs6000_xcoff_output_readwrite_section_asm_op): Likewise.
ChangeLog-2007:	true if any of the compare_section_name calls returned true,
ChangeLog-2007:	* config/rs6000/rs6000.c (compare_section_name): New function.
ChangeLog-2007:	(rs6000_elf_in_small_data_p): Compare section prefixes instead
ChangeLog-2007:	(Variable Attributes): Add Blackfin subsection. Document l1_data,
ChangeLog-2007:	* output.h (decl_readonly_section, categorize_decl_for_section,
ChangeLog-2007:	categorize_decl_for_section, decl_readonly_section,
ChangeLog-2007:	arm_mark_dllimport, arm_pe_encode_section_info,
ChangeLog-2007:	arm_pe_unique_section): Use ISO-C function declarations.
ChangeLog-2007:	mmix_encode_section_info): Likewise.
ChangeLog-2007:	* dwarf2out.c (text_section_used): Move declaration outside ifdef
ChangeLog-2007:	(cold_text_section_used): Same.
ChangeLog-2007:	(cold_text_section): Same.
ChangeLog-2007:	* dwarf2out.c (text_section_used, cold_text_section_used,
ChangeLog-2007:	cold_text_section, dwarf2out_note_section_used): New.
ChangeLog-2007:	(dwarf2out_init): Initialize cold_text_section.
ChangeLog-2007:	(dwarf2out_switch_text_section, dwarf2out_begin_function): Call
ChangeLog-2007:	dwarf2out_note_section_used.
ChangeLog-2007:	(size_of_aranges): Only count entry for text section if it was
ChangeLog-2007:	used.  Count entry for cold text section if it was used.
ChangeLog-2007:	(output_aranges): Only output entries for text section and cold
ChangeLog-2007:	text section if they were used.
ChangeLog-2007:	(mips_select_rtx_section): Remove MIPS16 handling.
ChangeLog-2007:	expand_omp_for_static_chunk, expand_omp_for, expand_omp_sections):
ChangeLog-2007:	(lower_omp_sections): Emit OMP_SECTIONS_SWITCH.  Add arguments to
ChangeLog-2007:	* fortran/trans-openmp.c (gfc_trans_omp_sections): Build OMP_SECTIONS
ChangeLog-2007:	* doc/tm.texi (TARGET_MANGLE_FUNDAMENTAL_TYPE): Rename section to...
ChangeLog-2007:	(ARM NEON Intrinsics): New subsection.
ChangeLog-2007:	* config/arm/arm.md (movsi): Split out-of-section constants when
ChangeLog-2007:	(dwarf2out_finish): Output range for multiple-section
ChangeLog-2007:	"i386 and x86_64 Options" section.
ChangeLog-2007:	SSE4.2 section.  Correct built-in function names in SSE4A section.
ChangeLog-2007:	(x86_64_elf_unique_section): Likewise.
ChangeLog-2007:	(mips_encode_section_info): Check for "near" and "far" function
ChangeLog-2007:	(arm_function_in_section_p): New function.
ChangeLog-2007:	whether the target symbol is in the same section as the current
ChangeLog-2007:	(arm_encode_section_info): Don't encode a call type.
ChangeLog-2007:	New. Factored out of i386_pe_encode_section_info.
ChangeLog-2007:	symbols to i386_pe_encode_section_info.
ChangeLog-2007:	(i386_pe_encode_section_info): Adjust call to
ChangeLog-2007:	* libgcc-std.ver (__extendxftf2): Added to GCC_4.3.0 section.
ChangeLog-2007:	__unordtf2): Exclude and add to GCC_4.3.0 section for x86_64 targets.
ChangeLog-2007:	(m32c_encode_section_info): New
ChangeLog-2007:	* libgcc-std.ver (__ffssi2): Added to GCC_4.3.0 section.
ChangeLog-2007:	subsections. Add a C++ section, documenting which standards we
ChangeLog-2007:	* pa.c (pa_som_asm_init_sections): Ensure that cfun->machine is not
ChangeLog-2007:	(produce_memory_decl_rtl): Pass the rtx through encode_section_info.
ChangeLog-2007:	(i386_pe_encode_section_info): Set SYMBOL_FLAG_DLLIMPORT and
ChangeLog-2007:	* config/alpha/alpha.c (alpha_elf_section_type_flags): New.
ChangeLog-2007:	* config/darwin.c (machopic_select_section): Remove superfluous
ChangeLog-2007:	argument in call to categorize_decl_for_section.  Remove unused
ChangeLog-2007:	* varasm.c (categorize_decl_for_section): Remove shlib argument;
ChangeLog-2007:	(default_section_type_flags_1): Merge into...
ChangeLog-2007:	(default_section_type_flags): ... here.
ChangeLog-2007:	(decl_readonly_section_1): Merge into...
ChangeLog-2007:	(decl_readonly_section): ... here.
ChangeLog-2007:	(default_elf_select_section_1): Merge into...
ChangeLog-2007:	(default_elf_select_section): ... here.
ChangeLog-2007:	(default_unique_section_1): Merge into...
ChangeLog-2007:	(default_unique_section): ... here.
ChangeLog-2007:	(default_select_rtx_section): Use it.
ChangeLog-2007:	(default_elf_select_rtx_section): Likewise.
ChangeLog-2007:	* config/i386/i386.c (x86_64_elf_select_section): Adjust call
ChangeLog-2007:	to categorize_decl_for_section.
ChangeLog-2007:	(x86_64_elf_unique_section): Likewise.
ChangeLog-2007:	* config/ia64/ia64.c (ia64_rwreloc_select_section,
ChangeLog-2007:	ia64_rwreloc_unique_section, ia64_rwreloc_select_rtx_section): Remove.
ChangeLog-2007:	(ia64_section_type_flags): Adjust call to default_section_type_flags.
ChangeLog-2007:	* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Remove.
ChangeLog-2007:	(rs6000_elf_select_section, rs6000_elf_unique_section): Remove.
ChangeLog-2007:	(rs6000_xcoff_select_section): Use decl_readonly_section.
ChangeLog-2007:	(rs6000_xcoff_section_type_flags): Use default_section_type_flags.
ChangeLog-2007:	* rtl.h (offset_within_section_p, split_const): Declare.
ChangeLog-2007:	symbolic constant that might be outside the symbol's section,
ChangeLog-2007:	(mips_symbolic_constant_p): Use offset_within_section_p and
ChangeLog-2007:	* output.h (assemble_addr_to_section): Declare.
ChangeLog-2007:	(get_cdtor_priority_section): Likewise.
ChangeLog-2007:	* varasm.c (assemble_addr_to_section): New function.
ChangeLog-2007:	(get_cdtor_priority_section): Likewise.
ChangeLog-2007:	(default_named_section_asm_out_destructor): Use them.
ChangeLog-2007:	(destor_dtor_section_asm_out_destructor): Likewise.
ChangeLog-2007:	(default_named_section_asm_out_constructor): Likewise.
ChangeLog-2007:	(default_ctor_section_asm_out_constructor): Likewise.
ChangeLog-2007:	* config/spu/spu.c (reloc_diagnostic): Test in_section.
ChangeLog-2007:	expand_omp_for_static_chunk, expand_omp_sections,
ChangeLog-2007:	(expand_omp_sections): Likewise.
ChangeLog-2007:	(default_encode_section_info): Don't add SYMBOL_FLAG_TLS_SHIFT
ChangeLog-2007:	intersection.
ChangeLog-2007:	--with-java-home to libgcj-specific section.  Document
ChangeLog-2007:	* config/darwin.c (machopic_select_rtx_section): Use
ChangeLog-2007:	(darwin_mergeable_constant_section): Likewise.
ChangeLog-2008:	* config/i386/winnt.c (i386_pe_encode_section_info): Condition stdcall
ChangeLog-2008:	merging read-only and read-write sections or assembler emits
ChangeLog-2008:	read-write .eh_frame sections.
ChangeLog-2008:	(c_parser_omp_sections_scope): Same.
ChangeLog-2008:	gimple_call_copy_skip_args and moved to the gimple_call section.
ChangeLog-2008:	unit-at-a-time, toplevel-reorder, and section-anchors.
ChangeLog-2008:	flag_section_anchors to 2 instead of 1 to distinguish it from
ChangeLog-2008:	-fsection-anchors given explicitely on the command line.
ChangeLog-2008:	(arm_optimization_options): Enable section anchors at -O1 and
ChangeLog-2008:	section anchors without toplevel reorder.
ChangeLog-2008:	* config/spu/spu_mfcio.h (mfc_begin_critical_section): New function.
ChangeLog-2008:	(mfc_end_critical_section): Likewise.
ChangeLog-2008:	(mips_function_rodata_section): Use the default behaviour for
ChangeLog-2008:	compare_section_name, rs6000_memory_move_cost): Likewise.
ChangeLog-2008:	no section anchors.
ChangeLog-2008:	* arm.c (arm_function_in_section_p): Likewise.
ChangeLog-2008:	-fno-section-anchors when disabled explicitly.
ChangeLog-2008:	imply -fno-section-anchors when toplevel reorder is disabled
ChangeLog-2008:	* config/rs6000/rs6000.c (optimization_options): Set section anchors
ChangeLog-2008:	* varasm.c (section_entry_eq, object_block_entry_eq): Likewise.
ChangeLog-2008:	* omp-low.c (lower_omp_sections, lower_omp_single, lower_omp_master,
ChangeLog-2008:	* varasm.c (get_unnamed_section, get_noswitch_section,
ChangeLog-2008:	get_section): Likewise.
ChangeLog-2008:	(Type Attributes): Fix nesting of @table and @subsection.  Adjust
ChangeLog-2008:	(lower_omp_sections, lower_omp_for): Add a BLOCK into outermost
ChangeLog-2008:	* config/arm/pe.c (arm_mark_dllexport, arm_pe_unique_section): Likewise.
ChangeLog-2008:	i386_pe_unique_section): Likewise.
ChangeLog-2008:	mcore_unique_section): Likewise.
ChangeLog-2008:	mmix_encode_section_info): Likewise.
ChangeLog-2008:	rs6000_elf_encode_section_info, machopic_output_stub): Likewise.
ChangeLog-2008:	lookup_decl_loc, add_var_loc_to_decl, compute_section_prefix,
ChangeLog-2008:	add_call_site, switch_to_exception_section): Likewise.
ChangeLog-2008:	* varasm.c (prefix_name, emutls_decl, section_entry_eq,
ChangeLog-2008:	section_entry_hash, object_block_entry_eq,
ChangeLog-2008:	initialize_cold_section_name, default_function_rodata_section,
ChangeLog-2008:	* doc/rtl.texi: Updated subreg section.
ChangeLog-2008:	* omp-low.c (expand_omp_sections): Initialize l2 to avoid bogus warning.
ChangeLog-2008:	* omp-low.c (expand_omp_sections): Handle #pragma omp sections with
ChangeLog-2008:	(s390_encode_section_info): Mark symbol refs with
ChangeLog-2008:	(dwarf2out_note_section_used): Likewise.
ChangeLog-2008:	compatibility section.
ChangeLog-2008:	(emutls_object_section, emutls_tmpl_section): New.
ChangeLog-2008:	* output.h (enum section_category): Add SECCAT_EMUTLS_VAR,
ChangeLog-2008:	* c-common.c (handle_section_attribute): Prevent overriding
ChangeLog-2008:	sections for emulated tls with special sections.
ChangeLog-2008:	* config/i386/i386.c (x86_64_elf_select_section): Add
ChangeLog-2008:	(x86_64_elf_unique_section): Likewise.
ChangeLog-2008:	* config/i386/winnt.c (i386_pe_section_type_flags): Mark
ChangeLog-2008:	".text.unlikely" section as executable.
ChangeLog-2008:	* toplev.c (process_options): Remove -ffunction-sections debugging
ChangeLog-2008:	(function_subsections): Break out of struct function.
ChangeLog-2008:	(rtl_data): Add args, subsections fields. Break out outgoing_args_size,
ChangeLog-2008:	* dwarf2out.c (dwarf2out_switch_text_section): Update.
ChangeLog-2008:	* varasm.c (initialize_cold_section_name): Update.
ChangeLog-2008:	(unlikely_text_section): Update.
ChangeLog-2008:	(unlikely_text_section_p): Update.
ChangeLog-2008:	(default_section_type_flags): Update.
ChangeLog-2008:	(switch_to_section): Update.
ChangeLog-2008:	* doc/rtl.texi: Rewrite of subreg section.
ChangeLog-2008:	(avr_output_progmem_section_asm_op): (Ditto.).
ChangeLog-2008:	(avr_asm_init_sections): (Ditto.).
ChangeLog-2008:	(avr_asm_init_sections): (Ditto.).
ChangeLog-2008:	(sh_encode_section_info): New.
ChangeLog-2008:	(Push/Pop Macro Pragmas): New subsection. Document
ChangeLog-2008:	(i386_nlm_encode_section_info): Sync with
ChangeLog-2008:	config/i386/winnt.c:i386_pe_encode_section_info().
ChangeLog-2008:	* doc/install.texi2html: Use makeinfo --no-number-sections.
ChangeLog-2008:	before the first section switch note.
ChangeLog-2008:	to the section switch notes.
ChangeLog-2008:	(s390_chunkify_start): Force literal pool splits at section
ChangeLog-2008:	* dwarf2out.c (dwarf2out_switch_text_section): Do not call
ChangeLog-2008:	dwarf2out_note_section_used if cold_text_section is NULL.
ChangeLog-2008:	* dwarf2out.c (dwarf2out_switch_text_section): Do not guard with
ChangeLog-2008:	(dwarf2out_note_section_used): Ditto.  Add prototype.
ChangeLog-2008:	(have_multiple_function_sections, text_section_used,
ChangeLog-2008:	cold_text_section_used, *cold_text_sections): Move declarations
ChangeLog-2008:	* debug.h (dwarf2out_switch_text_section): Move declaration from ...
ChangeLog-2008:	* dwarf2out.c (dwarf2out_switch_text_section): ... here.  Make
ChangeLog-2008:	Depending on dwarf2out_do_frame, call dwarf2out_switch_text_section
ChangeLog-2008:	* config/darwin.c (darwin_mergeable_string_section): Don't use
ChangeLog-2009:	using DECL_ASSEMBLER_NAME to generate a section name.
ChangeLog-2009:	section unless .text section was used.  Likewise for cold.
ChangeLog-2009:	* langhooks.c (lhd_begin_section): Make sure to switch back
ChangeLog-2009:	to the text section, not some random one.
ChangeLog-2009:	(expand_omp_sections): Remove unused l1 variable.
ChangeLog-2009:	* lto-section-in.c: Likewise.
ChangeLog-2009:	* lto-section-out.c: Likewise.
ChangeLog-2009:	* doc/plugins.texi (Registering custom attributes): section
ChangeLog-2009:	(spu_section_type_flags): Handle "._ea" section.
ChangeLog-2009:	(spu_select_section): New function.
ChangeLog-2009:	(spu_unique_section): Likewise.
ChangeLog-2009:	* doc/extend.texi (Named Address Spaces): New section.
ChangeLog-2009:	* doc/tm.texi (Named Address Spaces): New section.
ChangeLog-2009:	* varasm.c (get_variable_section): DECLs in named address spaces
ChangeLog-2009:	* lto-streamer.c (lto_get_section_name): Add
ChangeLog-2009:	LTO_section_jump_functions.
ChangeLog-2009:	* lto-streamer.h (LTO_section_jump_functions): New section.
ChangeLog-2009:	* dwarf2out.c (dwarf2out_init): Move .cfi_sections printing into...
ChangeLog-2009:	* config/s390/s390.c (s390_encode_section_info): Handle BLKmode
ChangeLog-2009:	(dwarf2out_init): Allocate new tables and sections.
ChangeLog-2009:	(i386_pe_encode_section_info): Don't recheck DECL_DLLIMPORT_P.
ChangeLog-2009:	* lto-section-in.c: New file.
ChangeLog-2009:	* lto-section-out.c: New file.
ChangeLog-2009:	lto-streamer-out.o, lto-section-in.o, lto-section-out.o, lto-symtab.o,
ChangeLog-2009:	lto-streamer-out.o, lto-section-in.o, lto-section-out.o,
ChangeLog-2009:	* langhooks-def.h (lhd_begin_section): New function declaration.
ChangeLog-2009:	(lhd_write_section): New function declaration.
ChangeLog-2009:	(lhd_end_section): New function declaration.
ChangeLog-2009:	(saved_section): New static variable.
ChangeLog-2009:	(lhd_begin_section): New function.
ChangeLog-2009:	(lhd_write_section_data): New function.
ChangeLog-2009:	(lhd_end_section): New function.
ChangeLog-2009:	Add section for LTO Testing.
ChangeLog-2009:	Add support for comdat type sections for DWARF v4.
ChangeLog-2009:	comdat type sections.
ChangeLog-2009:	type sections.
ChangeLog-2009:	comdat type sections.
ChangeLog-2009:	(prune_unused_types): Process comdat type sections.
ChangeLog-2009:	(dwarf2out_finish): Move types to comdat sections when using DWARF-4.
ChangeLog-2009:	* varasm.c (default_elf_asm_named_section): Use identifier name as
ChangeLog-2009:	not emitting .eh_frame, emit .cfi_sections .debug_frame
ChangeLog-2009:	* varasm.c (default_encode_section_info): Copy TLS model into
ChangeLog-2009:	* doc/install.texi (os2): Remove section.
ChangeLog-2009:	* config/mep/mep.c (mep_encode_section_info): Copy weakness
ChangeLog-2009:	(insert_into_intersection): New.
ChangeLog-2009:	* dwarf2out.c (switch_to_frame_table_section): Move
ChangeLog-2009:	fini or fini_array section.
ChangeLog-2009:	(i386_nlm_encode_section_info): Simplify.
ChangeLog-2009:	section.
ChangeLog-2009:	* dwarf2out.c (switch_to_eh_frame_section): Add a BACK argument
ChangeLog-2009:	to differentiate first time section entry.  Only emit a .data
ChangeLog-2009:	(switch_to_frame_table_section): New function.  Helper for
ChangeLog-2009:	or the debug_frame section depending on FOR_EH.
ChangeLog-2009:	frame section.
ChangeLog-2009:	section.
ChangeLog-2009:	(ia64_vms_elf_asm_named_section): Added.  Generate .section pseudo-op
ChangeLog-2009:	(ia64_section_type_flags): Set section flag for common_object.
ChangeLog-2009:	(ia64_vms_elf_asm_named_section): Declare.
ChangeLog-2009:	(vms_asm_named_section): Remove support for above flags.
ChangeLog-2009:	(vms_section_type_flags): Delete.
ChangeLog-2009:	Use LLSDAC label instead of LLSDA for second section lsda.
ChangeLog-2009:	(dwarf2out_begin_prologue, dwarf2out_switch_text_section): Adjust
ChangeLog-2009:	ensure no EH range spans between sections and that landing pads
ChangeLog-2009:	are always in the corresponding section.
ChangeLog-2009:	callers.  For SECOND section use *C suffixed labels.
ChangeLog-2009:	partitioning, also another time for the second section.
ChangeLog-2009:	* config/mep/mep.c (mep_asm_init_sections): Add section flags and
ChangeLog-2009:	.vliw directive to VLIW sections.
ChangeLog-2009:	* config/mep/mep.c (vtext_section): New.
ChangeLog-2009:	(vftext_section): New.
ChangeLog-2009:	(ftext_section): New.
ChangeLog-2009:	(mep_select_section): Add support for functions.
ChangeLog-2009:	(mep_unique_section): Likewise.
ChangeLog-2009:	(mep_asm_init_sections): Likewise.
ChangeLog-2009:	(mep_encode_section_info): Remove it from here.
ChangeLog-2009:	(dwarf2out_switch_text_section): Use output_cfis.
ChangeLog-2009:	(output_call_frame_info): If fde->dw_fde_switched_sections,
ChangeLog-2009:	(dwarf2out_switch_text_section): Compute
ChangeLog-2009:	fde->dw_fde_switched_cold_to_hot.  Switch to new text section here.
ChangeLog-2009:	* dwarf2out.c (dw_fde_struct): Add in_std_section and
ChangeLog-2009:	cold_in_std_section bits.
ChangeLog-2009:	if already covered by text_section or cold_text_section range.
ChangeLog-2009:	* config/mep/mep.c (mep_select_section): Likewise.
ChangeLog-2009:	* config/v850/v850-c.c (ghs_pragma_section): Initialize repeat.
ChangeLog-2009:	default_data_section_start fields.
ChangeLog-2009:	(mcu_type_s): Moved from avr.c. Add short_sp, data_section_start and
ChangeLog-2009:	compatibility section.
ChangeLog-2009:	* doc/extend.texi (Half-Precision): New section.
ChangeLog-2009:	const char ** conversion in AIX specific section.
ChangeLog-2009:	* doc/plugins.texi (Building GCC plugins): Added new section.
ChangeLog-2009:	* config/i386/winnt.c (i386_pe_encode_section_info): Update call to
ChangeLog-2009:	(default_elf_asm_named_section): Use DECL_COMDAT_GROUP.
ChangeLog-2009:	(c_parser_omp_sections_scope): Same.
ChangeLog-2009:	(c_parser_omp_sections): Same.
ChangeLog-2009:	in between last note and this one, or if changed sections.
ChangeLog-2009:	(Interacting with the GCC Garbage Collector): Added new section.
ChangeLog-2009:	(Giving information about a plugin): Added new section for
ChangeLog-2009:	* doc/tree-ssa.texi (Memory model): New section.
ChangeLog-2009:	(struct tree_decl_common): Move no_tbaa_flag to unused flags section.
ChangeLog-2009:	condition code representations, separate into subsections for
ChangeLog-2009:	* config/v850/v850-c.c (ghs_pragma_section): Likewise.
ChangeLog-2009:	config/darwin-ppc-ldouble-patch.def, config/darwin-sections.def,
ChangeLog-2009:	text in MPFR section.
ChangeLog-2009:	* varasm.c (default_function_rodata_section): Declare DOT as
ChangeLog-2009:	* varasm.c (default_function_rodata_section): Don't assume
ChangeLog-2009:	anything about where the first '.' in the section name is.
ChangeLog-2009:	(sub section "i386 and x86-64 Windows Options"): New.
ChangeLog-2009:	* doc/extend.texi (section): Update description.
ChangeLog-2009:	(spu_section_type_flags): New function.
ChangeLog-2009:	and section documenting ggc_collect.
ChangeLog-2009:	function when not using named sections on targets with named sections
ChangeLog-2009:	arm_function_in_section_p if decl isn't a FUNCTION_DECL.
ChangeLog-2009:	* function.c (struct temp_slot): Move to the section of the file
ChangeLog-2010:	* config/sparc/sparc.c (sparc_file_end): Call resolve_unique_section
ChangeLog-2010:	PT_SUNW_UNWIND .eh_frame_hdr sections.
ChangeLog-2010:	registering methods, Forwarding hook): New sections.
ChangeLog-2010:	(darwin_text_section): Remove.
ChangeLog-2010:	(darwin_rodata_section): Do not check function section here.
ChangeLog-2010:	(darwin_function_section): Check for cases that need to be placed
ChangeLog-2010:	in coalesced sections.
ChangeLog-2010:	* config/darwin-sections.def: Define hot, cold, startup and
ChangeLog-2010:	exit sections for both coalesced and regular code.
ChangeLog-2010:	resolve_unique_section.
ChangeLog-2010:	* varasm.c (default_function_section): Check flag_reorder_functions
ChangeLog-2010:	and targetm.have_named_sections.
ChangeLog-2010:	* config/darwin.c (darwin_function_section): Check
ChangeLog-2010:	* config/pa/pa.c (pa_function_section): New function.
ChangeLog-2010:	(pdp11_function_section): New function.
ChangeLog-2010:	* doc/standards.texi (Standards): Add section on Go language.
ChangeLog-2010:	Move references for other languages into their own section.
ChangeLog-2010:	lto-opts.c, lto-section-in.c, lto-section-out.c,
ChangeLog-2010:	* config/darwin.c (darwin_mergeable_string_section): Remove blank line.
ChangeLog-2010:	(darwin_init_sections): Check that the Darwin private zero-size section
ChangeLog-2010:	(darwin_text_section): Check for zero-sized objects.
ChangeLog-2010:	(darwin_mergeable_string_section): Likewise.
ChangeLog-2010:	(darwin_mergeable_constant_section): Likewise.
ChangeLog-2010:	(machopic_select_section): Adjust to check for zero-sized objects.
ChangeLog-2010:	object sections.
ChangeLog-2010:	(darwin_file_end): Disable subsections_via_symbols when section
ChangeLog-2010:	* config/darwin-sections.def: Update comments and flags for
ChangeLog-2010:	non-anchor sections.  zobj_const_section, zobj_data_section,
ChangeLog-2010:	zobj_bss_section, zobj_const_data_section: New.
ChangeLog-2010:	* dwarf2out.c (dwarf2out_begin_function): Set cold_text_section
ChangeLog-2010:	and output cold_text_section_label.
ChangeLog-2010:	(dwarf2out_finish): Handle cold section end label only if cold
ChangeLog-2010:	section was used.
ChangeLog-2010:	(tree_decl_with_vis): Add implicit_section_name_p.
ChangeLog-2010:	* targhooks.h (default_function_section): Declare.
ChangeLog-2010:	* target.def (function_section): New hook.
ChangeLog-2010:	* predict.c (choose_function_section): Remove.
ChangeLog-2010:	(estimate_bb_frequencies): Do not use choose_function_section.
ChangeLog-2010:	* varasm.c (initialize_cold_section_name, unlikely_text_section,
ChangeLog-2010:	unlikely_text_section_p): Remove.
ChangeLog-2010:	(named_subsection_entry): New structure.
ChangeLog-2010:	(get_text_section): New function.
ChangeLog-2010:	(default_function_section): New function.
ChangeLog-2010:	(function_section_1): Break out from ...; handle profile info.
ChangeLog-2010:	(function_section): ... here.
ChangeLog-2010:	(unlikely_text_section): Remove.
ChangeLog-2010:	(unlikely_text_section_p): Use function_section_1.
ChangeLog-2010:	(assemble_start_function): Do not initialize cold section.
ChangeLog-2010:	(default_section_type_flags): Do not special case cold subsection.
ChangeLog-2010:	(switch_to_section): Likewise.
ChangeLog-2010:	* output.h (get_text_section): Define.
ChangeLog-2010:	* config/i386/winnt.c: Do not special case cold section.
ChangeLog-2010:	* config/darwin-protos.h (darwin_function_section): Declare.
ChangeLog-2010:	(TARGET_ASM_FUNCTION_SECTION): Define to ia64_hpux_function_section.
ChangeLog-2010:	* config/ia64/ia64.c (ia64_hpux_function_section): New function.
ChangeLog-2010:	* config/darwin.c (machopic_select_section): Use
ChangeLog-2010:	darwin_function_section.
ChangeLog-2010:	(darwin_function_section): New function.
ChangeLog-2010:	* varasm.c (categorize_decl_for_section): Ignore reloc_rw_mask
ChangeLog-2010:	if section attribute used.
ChangeLog-2010:	(output_comp_unit): Emit the section start label here and flag that we
ChangeLog-2010:	will emit an info section.
ChangeLog-2010:	(dwarf2out_init): Do not emit debug section switches here, allocate a
ChangeLog-2010:	(dwarf2out_finish): First switch to debug_abbrev_section here.
ChangeLog-2010:	debug_line_section,  debug_macinfo_section, Likewise.
ChangeLog-2010:	* doc/invoke.texi (-fwhopr): Merge into -flto section.
ChangeLog-2010:	(Troubleshooting): New section.
ChangeLog-2010:	(Darwin Format Checks): New section.
ChangeLog-2010:	* doc/standards.texi (Standards): Updated the section on
ChangeLog-2010:	* config/darwin-sections.def (machopic_lazy_symbol_ptr2_section): New.
ChangeLog-2010:	(machopic_lazy_symbol_ptr3_section): New.
ChangeLog-2010:	(machopic_picsymbol_stub2_section): New.
ChangeLog-2010:	(machopic_picsymbol_stub3_section): New.
ChangeLog-2010:	* config/darwin.c (darwin_asm_named_section): Check for __DWARF
ChangeLog-2010:	sections and call darwin_asm_dwarf_section() to handle them.
ChangeLog-2010:	(darwin_asm_dwarf_section): New.
ChangeLog-2010:	(darwin_file_start): Remove code emitting dwarf section symbols.
ChangeLog-2010:	(machopic_select_section): Return cfstring_constant_object_section.
ChangeLog-2010:	* config/darwin-sections.def (cfstring_constant_object_section): New.
ChangeLog-2010:	* doc/objc.texi (GNU Objective-C runtime API): New section.
ChangeLog-2010:	(Modern GNU Objective-C runtime API): New section.
ChangeLog-2010:	(Traditional GNU Objective-C runtime API): New section.
ChangeLog-2010:	(Executing code before main): Mention that this section is
ChangeLog-2010:	flag_section_anchors to 1 not 2.
ChangeLog-2010:	opts->x_flag_section_anchors to 1 not 2.
ChangeLog-2010:	* opts.c (finish_options): Check opts_set->x_flag_section_anchors.
ChangeLog-2010:	disable section anchors for lang_hooks.name[4] != 'O'.
ChangeLog-2010:	* opt-functions.awk (BEGIN): New section.
ChangeLog-2010:	* lto-cgraph.c (input_cgraph): Check for missing sections.
ChangeLog-2010:	* doc/standards.texi (Standards): Expanded the section on
ChangeLog-2010:	(Legacy type encoding): New subsection, explaining that GCC emits
ChangeLog-2010:	(@@encode): New subsection, explaining @encode and particularly
ChangeLog-2010:	(Method signatures): New subsection, explaining how method
ChangeLog-2010:	* doc/objc.texi: All sections: simplified @node declarations
ChangeLog-2010:	included in gcc itself.  Mention that this section only applies to
ChangeLog-2010:	(Exceptions): New section mostly containing text previously in the
ChangeLog-2010:	* doc/install.texi (sparc*-*-*): New section.
ChangeLog-2010:	* except.c (switch_to_exception_section): Always build.
ChangeLog-2010:	(output_one_function_exception_table): Move section switch,
ChangeLog-2010:	ia64_asm_init_sections, TARGET_ASM_EMIT_EXCEPT_PERSONALITY,
ChangeLog-2010:	(arm_asm_init_sections): New.
ChangeLog-2010:	(gcc_cv_as_cfi_sections_directive): Check for correct relocation
ChangeLog-2010:	in the .debug_frame section for coff targets.
ChangeLog-2010:	(get_variable_section): Don't special case emutls.
ChangeLog-2010:	(assemble_variable, do_assemble_alias, categorize_decl_for_section,
ChangeLog-2010:	default_elf_select_section, default_unique_section,
ChangeLog-2010:	default_encode_section_info): Likewise.
ChangeLog-2010:	* config/i386/i386.c (x86_64_elf_select_section): Don't handle
ChangeLog-2010:	(x86_64_elf_unique_section): Likewise.
ChangeLog-2010:	(mno-strict-align, mjump-tables-in-data-section, mv850e2,
ChangeLog-2010:	lto_get_section_name.
ChangeLog-2010:	* lto-section-out.c (lto_destroy_simple_output_block): Likewise.
ChangeLog-2010:	* lto-streamer.c (lto_get_section_name): Add file_data argument.
ChangeLog-2010:	Rewrite to add random postfix to LTO sections.
ChangeLog-2010:	(lto_get_section_name): Add file_data argument to prototype.
ChangeLog-2010:	* lto-section-in.c (lto_section_name): Synchronize names
ChangeLog-2010:	with lto_get_section_name.
ChangeLog-2010:	* lto-opts.c (lto_read_file_options): Check for missing section.
ChangeLog-2010:	* config/darwin.c (output_objc_section_asm_op): Save and restore
ChangeLog-2010:	section when outputting ObjC section list.
ChangeLog-2010:	* lto-section-in.c (lto_section_name): Add missing comma.
ChangeLog-2010:	* target.def (want_debug_pub_sections): New hook.
ChangeLog-2010:	targetm.want_debug_pub_sections.
ChangeLog-2010:	(Tuple specific accessors, subsection GIMPLE_ASSIGN): Document new
ChangeLog-2010:	(get_unnamed_section): Likewise.
ChangeLog-2010:	(get_noswitch_section): Likewise.
ChangeLog-2010:	(get_section): Likewise.
ChangeLog-2010:	(get_block_for_section): Likewise.
ChangeLog-2010:	* lto-section-in.c (lto_new_in_decl_state): Likewise.
ChangeLog-2010:	* config/darwin.c (output_objc_section_asm_op): Add comment.
ChangeLog-2010:	(darwin_encode_section_info): Adjust asm whitespace.
ChangeLog-2010:	* doc/md.texi (rs6000 section, "z" constraint): Fix documentation.
ChangeLog-2010:	* lto-section-in.c: Include diagnostic-core.h instead of
ChangeLog-2010:	lto-streamer-out.o, lto-section-in.o, lto-streamer.o,
ChangeLog-2010:	<section "Language makefile fragments">: Add -DIN_GCC_FRONTEND for
ChangeLog-2010:	* darwin.c (darwin_asm_named_section): Do not add assembler comment
ChangeLog-2010:	after .section directive; just print it before the directive instead.
ChangeLog-2010:	input_node_opt_summary, input_cgraph_opt_section): New functions.
ChangeLog-2010:	* lto-section-in.c (lto_section_name): Add cgraphopt.
ChangeLog-2010:	* lto-streamer.c (lto_get_section_name): Handle cgraphopt.
ChangeLog-2010:	* lto-streamer.h (lto_section_type): Add LTO_section_cgraph_opt_sum.
ChangeLog-2010:	* ipa-prop.c (ipa_prop_read_section): Add sanity check that node is
ChangeLog-2010:	* lto-section-out.c (lto_new_out_decl_state): Do not allocate it here.
ChangeLog-2010:	* configure.ac (gcc_cv_ld_eh_gc_sections): Redirect objdump errors
ChangeLog-2010:	(lto_section_names_offset, lto_section_names_obstack,
ChangeLog-2010:	(darwin_asm_named_section): For LTO sections, replace the name with
ChangeLog-2010:	the offset of the section name in a string table, and build this
ChangeLog-2010:	to the proper asm_out_file here.  Add the section names section.
ChangeLog-2010:	* lto-section-in.c (lto_section_name): Add refs.
ChangeLog-2010:	* lto-streamer.c (lto-get_section_name): Add .refs section.
ChangeLog-2010:	* lto-streamer.h (lto_section_type): Add LTO_section_refs.
ChangeLog-2010:	* doc/invoke.texi (-mfix-cortex-m3-ldrd): Move from ARC section to ARM.
ChangeLog-2010:	* lto-section-out.c (lto_new_out_decl_state): Initialize
ChangeLog-2010:	lto-section-in.c, alias.c, tree-if-conv.c, gimplify.c, ggc-zone.c,
ChangeLog-2010:	tree-ssa-structalias.c, lto-section-out.c, tree-ssanames.c: Do not
ChangeLog-2010:	* lto-section-in.c: Include ggc.h
ChangeLog-2010:	* lto-section-in.c (lto_section_name): Add varpool and jump funcs.
ChangeLog-2010:	* lto-streamer.c (lto_get_section_name): Add vars section.
ChangeLog-2010:	* lto-streamer.h (lto_section_type): Update.
ChangeLog-2010:	(get_constant_section): Add ALIGN parameter and simplify.
ChangeLog-2010:	* configure.ac (gcc_cv_as_section_has_align): Set if installed
ChangeLog-2010:	binutils supports extended .section directive needed by LTO, or
ChangeLog-2010:	(i386_pe_asm_named_section): Specify 1-byte section alignment for
ChangeLog-2010:	LTO named sections.
ChangeLog-2010:	(choose_function_section): Update.
ChangeLog-2010:	* lto-section-in.c (lto_section_name): Remove wpa_fixup.
ChangeLog-2010:	* lto-streamer.c (lto_get_section_name): Remove wpa_fixup section.
ChangeLog-2010:	* lto-section-out.c (forced_extern_inline,
ChangeLog-2010:	(picochip_override_options): Enable section anchors only above -O1.
ChangeLog-2010:	--enable-lto, --with-libelf*, --enable-gold from Java section to
ChangeLog-2010:	general section.
ChangeLog-2010:	(struct var_loc_node): Remove section_label field.
ChangeLog-2010:	(dwarf2out_var_location): Don't set section_label field.
ChangeLog-2010:	(default_elf_asm_named_section): Use it.
ChangeLog-2010:	(Front End Directory): Moved Make-lang.in entry to new subsubsection.
ChangeLog-2010:	subsections, with most of the current text in new subsections
ChangeLog-2010:	subsubsections.
ChangeLog-2010:	* varasm.c (get_variable_section): Don't do that here...
ChangeLog-2010:	(sparc_elf_asm_named_section): Rename into...
ChangeLog-2010:	(sparc_solaris_elf_asm_named_section): ...this.  Always define.
ChangeLog-2010:	Torture Tests): Change from subsection to section.
ChangeLog-2010:	.eh_frame sections for 64-bit.
ChangeLog-2010:	* config/sparc/sparc.c (sparc_elf_asm_named_section):
ChangeLog-2010:	* config/darwin.c (machopic_select_section): Likewise.
ChangeLog-2010:	the backward compatibility flag section.
ChangeLog-2010:	* config/sparc/sparc.c (sparc_elf_asm_named_section): Declare decl
ChangeLog-2010:	* config/sparc/sparc.c (sparc_elf_asm_named_section): Test for
ChangeLog-2010:	* omp-low.c (expand_omp_sections): Only use single_pred if
ChangeLog-2010:	* config/sparc/sparc.c (sparc_elf_asm_named_section):
ChangeLog-2010:	the backward compatibility flag section.
ChangeLog-2010:	avr_change_section, avr_reg_class_from_letter) : Remove declaration.
ChangeLog-2010:	* lto-streamer.c (lto_get_section_name): Skip any leading
ChangeLog-2011:	for an initialized pointer being in a text section with
ChangeLog-2011:	unlikely_text_section_p.  Instead check for being in a code section.
ChangeLog-2011:	* config/pa/pa.c (pa_som_tm_clone_table_section): New function.
ChangeLog-2011:	(som_tm_clone_table_section): Declare.
ChangeLog-2011:	(pa_som_asm_init_sections): Init som_tm_clone_table_section.
ChangeLog-2011:	* config/vms/vms-protos.h (vms_function_section): New prototype.
ChangeLog-2011:	* config/vms/vms.c (vms_function_section): New function.
ChangeLog-2011:	* lto-cgraph.c (input_cgraph_opt_section): Use 'int' for offsets.
ChangeLog-2011:	* lto-section-in.c (lto_create_simple_input_block): Likewise.
ChangeLog-2011:	* ipa-inline-analysis.c (inline_read_section): Likewise.
ChangeLog-2011:	* ipa-prop.c (ipa_prop_read_section): Likewise.
ChangeLog-2011:	* config/darwin-sections.def (zobj_const_data_section): Fix over-
ChangeLog-2011:	length section name.
ChangeLog-2011:	avr_asm_named_section, avr_section_type_flags,
ChangeLog-2011:	avr_asm_select_section, avr_addr_space_address_mode,
ChangeLog-2011:	* target.def (tm_clone_table_section): New hook.
ChangeLog-2011:	* varasm.c (dump_tm_clone_pairs): Use target tm_clone_table_section.
ChangeLog-2011:	* output.h (default_clone_table_section): New prototype.
ChangeLog-2011:	* config/darwin-protos.h (darwin_tm_clone_table_section): New prototype.
ChangeLog-2011:	* config/darwin.c (darwin_tm_clone_table_section): New.
ChangeLog-2011:	(progmem_section): Change from section to array of sections.
ChangeLog-2011:	(progmem_section_prefix): New static variable.
ChangeLog-2011:	(avr_asm_named_section, avr_section_type_flags,
ChangeLog-2011:	avr_encode_section_info, avr_asm_select_section,
ChangeLog-2011:	(avr_output_progmem_section_asm_op): New static function.
ChangeLog-2011:	(avr_asm_init_sections): Initialize progmem_section[].
ChangeLog-2011:	* config/rs6000/rs6000.c (rs6000_xcoff_section_type_flags):
ChangeLog-2011:	(avr_section_type_flags): Unset section flag SECTION_BSS for
ChangeLog-2011:	* config/alpha/vms.h (ASM_OUTPUT_DEF): Do not switch section.
ChangeLog-2011:	(lto_section_num): New variable.  (darwin_lto_section_e): New GTY.
ChangeLog-2011:	(darwin_asm_named_section): Record LTO section counts and switches
ChangeLog-2011:	in a vec of darwin_lto_section_e.
ChangeLog-2011:	(darwin_file_end): Put an LTO section termination label.  Handle
ChangeLog-2011:	output of the wrapped LTO sections, index and names table.
ChangeLog-2011:	* doc/invoke.texi (AVR Options): New subsubsection to explain EIND
ChangeLog-2011:	subsection "AVR Variable Attributes" as of alphabetical order.
ChangeLog-2011:	c6x_asm_init_sections): New functions.
ChangeLog-2011:	(expand_omp_sections): Ditto.
ChangeLog-2011:	* config/avr/avr-mcus.def (AVR_MCU): Set .data_section_start of
ChangeLog-2011:	* lto-section-in.c (lto_section_name): Add "asm" entry.
ChangeLog-2011:	(enum lto_section_type): Add LTO_section_asm.
ChangeLog-2011:	* lto-streamer.c (lto_get_section_name): Remove crc32_string.
ChangeLog-2011:	* configure.ac: Add test for new section attribute
ChangeLog-2011:	* config/i386/winnt.c (i386_pe_asm_named_section): Emit
ChangeLog-2011:	new section flag "e" for excluded sections, if supported.
ChangeLog-2011:	Otherwise we mark section withc SECTION_EXCLUDE flag as never-load.
ChangeLog-2011:	* varasm.c (default_elf_asm_named_section): Check for SECTION_EXCLUDE.
ChangeLog-2011:	(progmem_section): New Variable.
ChangeLog-2011:	(avr_asm_init_sections): Initialize it.
ChangeLog-2011:	(avr_asm_select_section): ... this new Function.
ChangeLog-2011:	(avr_asm_function_rodata_section): Use it.
ChangeLog-2011:	(avr_insert_attributes): Don't add section attribute for PROGMEM.
ChangeLog-2011:	(avr_section_type_flags): Use avr_progmem_p instead of section
ChangeLog-2011:	(avr_asm_named_section): Set section name prefix for objects in
ChangeLog-2011:	* bb-reorder.c (insert_section_boundary_note): Don't check
ChangeLog-2011:	(inline_read_section): Do not stream the versionable flag.
ChangeLog-2011:	* config/avr/avr.h (progmem_section): Remove Declaration.
ChangeLog-2011:	* config/avr/avr.c (progmem_section): Make static and rename to
ChangeLog-2011:	progmem_swtable_section.
ChangeLog-2011:	(avr_output_addr_vec_elt): No need to switch sections.
ChangeLog-2011:	(avr_asm_init_sections): Use output_section_asm_op as section
ChangeLog-2011:	callback for progmem_swtable_section.
ChangeLog-2011:	(avr_output_progmem_section_asm_op): Remove Function.
ChangeLog-2011:	(avr_asm_function_rodata_section): New static Function.
ChangeLog-2011:	* bb-reorder.c (insert_section_boundary_note): Only do it if
ChangeLog-2011:	(avr_asm_named_section): Use it.
ChangeLog-2011:	(avr_section_type_flags): Use it.
ChangeLog-2011:	* crtstuff.c: Don't generate .ctors nor .dtors sections if
ChangeLog-2011:	* varasm.c (elf_init_array_section): Likewise.
ChangeLog-2011:	(elf_fini_array_section): Likewise.
ChangeLog-2011:	(get_elf_initfini_array_priority_section): Likewise.
ChangeLog-2011:	ira_hard_reg_set_intersection_p instead of
ChangeLog-2011:	ira_hard_reg_set_intersection_p instead of
ChangeLog-2011:	ira_hard_reg_set_intersection_p instead of
ChangeLog-2011:	* Makefile.in (lto-section-out.o): Add dependency on DATA_STREAMER_H.
ChangeLog-2011:	* lto-section-out.c: Include data-streamer.h.
ChangeLog-2011:	* lto-section-in.c (lto_input_uleb128): Move to data-streamer-in.c.
ChangeLog-2011:	* lto-section-out.c (lto_output_uleb128_stream): Move to
ChangeLog-2011:	same input section.
ChangeLog-2011:	* config/h8300/crti.asm: Add flags to .section directive.
ChangeLog-2011:	(dwarf2out_finish): Emit .debug_macinfo or .debug_macro sections
ChangeLog-2011:	(dwarf2out_switch_text_section): Don't call output_cfis.
ChangeLog-2011:	emit a section headers.
ChangeLog-2011:	(dwarf2out_init): For !dwarf_strict set debug_macinfo_section
ChangeLog-2011:	and macinfo_section_label to DEBUG_MACRO_SECTION
ChangeLog-2011:	* config/i386/i386.c (ix86_encode_section_info): Remove netware
ChangeLog-2011:	* doc/invoke.texi (C6X Options): New section.
ChangeLog-2011:	* doc/md.texi (TI C6X family): New section.
ChangeLog-2011:	i.e. use default_elf_select_section.
ChangeLog-2011:	(avr_asm_init_sections): Set unnamed callback of readonly_data_section.
ChangeLog-2011:	(avr_asm_named_section): Make static.
ChangeLog-2011:	* varasm.c (mergeable_string_section, mergeable_constant_section):
ChangeLog-2011:	(dwarf2out_switch_text_section): Use output_cfis directly.
ChangeLog-2011:	(dwarf2out_switch_text_section): Don't clear dw_fde_current_label here.
ChangeLog-2011:	* common/common-target.def (have_named_sections): Default to true.
ChangeLog-2011:	* dwarf2out.c (output_abbrev_section): Don't return early
ChangeLog-2011:	(dwarf2out_finish): Instead don't call output_abbrev_section
ChangeLog-2011:	nor emit abbrev_section_label in that case.
ChangeLog-2011:	* config/avr/avr.c (avr_encode_section_info): Dispatch to
ChangeLog-2011:	default_encode_section_info.
ChangeLog-2011:	(avr_encode_section_info): ...to this new function.
ChangeLog-2011:	(avr_section_type_flags): For data in ".progmem.data", remove
ChangeLog-2011:	section flag SECTION_WRITE.
ChangeLog-2011:	* config/darwin.c (darwin_mergeable_string_section): Place string
ChangeLog-2011:	* config/darwin-protos.h (machopic_select_rtx_section): Move to
ChangeLog-2011:	except_unwind_info, unwind_tables_default, have_named_sections):
ChangeLog-2011:	have_named_sections): Move from target.def.
ChangeLog-2011:	(pa_asm_output_mi_thunk, pa_function_section): Use
ChangeLog-2011:	targetm_common.have_named_sections.
ChangeLog-2011:	(fixup_reorder_chain): Use targetm_common.have_named_sections.
ChangeLog-2011:	targetm_common.have_named_sections.
ChangeLog-2011:	(dbxout_function_end): Use targetm_common.have_named_sections.
ChangeLog-2011:	(switch_to_exception_section): Use targetm_common.have_named_sections.
ChangeLog-2011:	(sched_create_recovery_edges): Use targetm_common.have_named_sections.
ChangeLog-2011:	targetm_common.have_named_sections and
ChangeLog-2011:	(process_options): Use targetm_common.have_named_sections.
ChangeLog-2011:	(resolve_unique_section, hot_function_section,
ChangeLog-2011:	default_function_section): Use targetm_common.have_named_sections.
ChangeLog-2011:	* varasm.c (get_section): Print location of other conflict
ChangeLog-2011:	for section conflicts.
ChangeLog-2011:	-gdwarf-4 -fno-debug-types-section.
ChangeLog-2011:	* lto-section-in.c (bp_unpack_val_len_unsigned, bp_unpack_val_len_int):
ChangeLog-2011:	* lto-section-out.h (bp_pack_val_len_unsigned, bp_pack_val_len_int):
ChangeLog-2011:	* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section): Wrap
ChangeLog-2011:	* lto-section-in.c (lto_section_overrun): Turn into fatal error.
ChangeLog-2011:	(solaris_elf_asm_comdat_section): New function.
ChangeLog-2011:	* config/sol2-protos.h (solaris_elf_asm_comdat_section): Declare.
ChangeLog-2011:	(i386_solaris_elf_named_section): Wrap in TARGET_SOLARIS.
ChangeLog-2011:	[!USE_GAS]: Call solaris_elf_asm_comdat_section for
ChangeLog-2011:	SECTION_LINKONCE sections if HAVE_COMDAT_GROUP.
ChangeLog-2011:	* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section): Likewise.
ChangeLog-2011:	ix86_section_threshold): Remove.
ChangeLog-2011:	ix86_branch_cost, ix86_section_threshold): Remove.
ChangeLog-2011:	completely in the simple compare section.
ChangeLog-2011:	* omp-low.c (expand_omp_sections): Likewise.
ChangeLog-2011:	when info_section_emitted.
ChangeLog-2011:	* function.c (init_function_start): Call decide_function_section.
ChangeLog-2011:	* varasm.c (decide_function_section): New function.
ChangeLog-2011:	flag_reorder_blocks_and_partition, don't compute in_cold_section_p
ChangeLog-2011:	* rtl.h (decide_function_section): Declare.
ChangeLog-2011:	* lto-section-in.c (lto_input_1_unsigned): Move to lto-streamer.h
ChangeLog-2011:	(lto_section_overrun): New.
ChangeLog-2011:	* lto-section-out.c (append_block): Rename to ...
ChangeLog-2011:	* lto-streamer.h (lto_section_overrun, lto_append_block): Declare.
ChangeLog-2011:	(inline_read_section): Likewise.
ChangeLog-2011:	(inline_read_section): Use it.
ChangeLog-2011:	* config/v850/v850.h (GHS_default_section_names,
ChangeLog-2011:	GHS_current_section_names): Use tree, not union tree_node *.
ChangeLog-2011:	(inline_read_section, inline_write_summary): Sanity check
ChangeLog-2011:	(inline_read_section): New function.
ChangeLog-2011:	(TARGET_ASM_NAMED_SECTION): Change to avr_asm_named_section.
ChangeLog-2011:	(avr_asm_named_section,	avr_asm_output_aligned_common,
ChangeLog-2011:	avr_output_data_section_asm_op,	avr_output_bss_section_asm_op):
ChangeLog-2011:	(avr_asm_init_sections): Overwrite section callbacks for
ChangeLog-2011:	data_section, bss_section.
ChangeLog-2011:	* lto-section-in.c (lto_section_name): Add inline section.
ChangeLog-2011:	* lto-streamer.h: Add LTO_section_inline_summary section.
ChangeLog-2011:	(dwarf2out_switch_text_section): Initialize dw_fde_switch_cfi_index
ChangeLog-2011:	* varasm.c (function_section_1): Likewise.
ChangeLog-2011:	at least one section.
ChangeLog-2011:	(dwarf2out_init): Create text_section_line_info here ...
ChangeLog-2011:	before switching sections.
ChangeLog-2011:	(text_section_line_info, cold_text_section_line_info): New.
ChangeLog-2011:	(dwarf2out_switch_text_section): Use it.
ChangeLog-2011:	* ira-color.c (assign_hard_reg): Use hard reg set intersection
ChangeLog-2011:	* common.opt (fdebug-types-section): Move earlier.
ChangeLog-2011:	* doc/invoke.texi: Fix up -fno-debug-types-section documentation.
ChangeLog-2011:	* common.opt (fdebug-types-section): New flag.
ChangeLog-2011:	* doc/invoke.texi: Document new -fno-debug-types-section flag.
ChangeLog-2011:	(ira_hard_reg_set_intersection_p, hard_reg_set_size): New functions.
ChangeLog-2011:	* dwarf2out.c (struct dw_fde_struct): Remove dw_fde_hot_section_label,
ChangeLog-2011:	dw_fde_hot_section_end_label, dw_fde_unlikely_section_label,
ChangeLog-2011:	dw_fde_unlikely_section_end_label, cold_in_std_section,
ChangeLog-2011:	dw_fde_switched_sections and dw_fde_switched_cold_to_hot fields.
ChangeLog-2011:	Add dw_fde_second_begin, dw_fde_second_end and second_in_std_section
ChangeLog-2011:	instead of dw_fde_switched_sections.
ChangeLog-2011:	fields, initialize new fields.  Initialize in_std_section
ChangeLog-2011:	(dwarf2out_switch_text_section): Stop initializing removed
ChangeLog-2011:	dwarf2out_do_cfi_asm ().  Call var_location_switch_text_section.
ChangeLog-2011:	(size_of_aranges): Count !in_std_section and !second_in_std_section
ChangeLog-2011:	emit ranges for fdes when !in_std_section resp.
ChangeLog-2011:	!second_in_std_section.
ChangeLog-2011:	(dw_loc_list): Break ranges crossing section switch.
ChangeLog-2011:	(convert_cfa_to_fb_loc_list): Likewise.  If switched sections,
ChangeLog-2011:	section dw_fde_second_{begin,end} for the second.
ChangeLog-2011:	(var_location_switch_text_section_1,
ChangeLog-2011:	var_location_switch_text_section): New functions.
ChangeLog-2011:	(dwarf2out_begin_function): Initialize cold_text_section even
ChangeLog-2011:	when function_section () isn't text_section.
ChangeLog-2011:	flag_reorder_blocks_and_partition when testing cold_text_section_used.
ChangeLog-2011:	If info_section_emitted, call size_of_aranges and if it indicates
ChangeLog-2011:	* dwarf2out.c (output_abbrev_section): Only write table when
ChangeLog-2011:	* doc/extend.texi (Alignment): Move section to match order in TOC.
ChangeLog-2011:	current_section_align, unicosmk_output_text_section_asm_op,
ChangeLog-2011:	unicosmk_output_data_section_asm_op, unicosmk_init_sections,
ChangeLog-2011:	unicosmk_section_type_flags, unicosmk_unique_section,
ChangeLog-2011:	unicosmk_asm_named_section, unicosmk_insert_attributes,
ChangeLog-2011:	arange_table_in_use is 0, but either text_section_used or
ChangeLog-2011:	cold_text_section_used is true.  Don't call it if
ChangeLog-2011:	!info_section_emitted.
ChangeLog-2011:	* dwarf2out.c (debug_dcall_section, debug_vcall_section,
ChangeLog-2011:	debug_dcall_section and debug_vcall_section.
ChangeLog-2011:	* varasm.c (default_function_section): Return NULL
ChangeLog-2011:	if HAVE_LD_EH_GC_SECTIONS_BUG and decl has implicit section name.
ChangeLog-2011:	* ira-color.c (update_copy_costs): Change class intersection
ChangeLog-2011:	* config/t-darwin (TM_H): Add dependency on darwin-sections.def.
ChangeLog-2011:	* config/darwin.c (output_objc_section_asm_op): Added support for
ChangeLog-2011:	(darwin_objc2_section): New.
ChangeLog-2011:	(darwin_objc1_section): New.
ChangeLog-2011:	(machopic_select_section): Added support for ABI v1 and v2.
ChangeLog-2011:	* config/darwin-sections.def: Updated for ABI v1 and v2.
ChangeLog-2011:	* varasm.c (default_section_type_flags): If decl is NULL,
ChangeLog-2011:	(get_variable_section): New prototype.
ChangeLog-2011:	* varpool.c (varpool_finalize_named_section_flags): New function.
ChangeLog-2011:	* cgraph.h (varpool_finalize_named_section_flags): New prototype.
ChangeLog-2011:	varpool_finalize_named_section_flags.
ChangeLog-2011:	* varasm.c (get_section): Allow section flags conflicts between
ChangeLog-2011:	relro and read-only sections if the section hasn't been declared yet.
ChangeLog-2011:	Set SECTION_OVERRIDE after diagnosing section type conflict.
ChangeLog-2011:	(get_variable_section): No longer static.
ChangeLog-2011:	(default_section_type_flags): Use SECTION_WRITE | SECTION_RELRO for
ChangeLog-2011:	readonly sections that need relocations.
ChangeLog-2011:	(decl_readonly_section_1): New function.
ChangeLog-2011:	(decl_readonly_section): Use it.
ChangeLog-2011:	* varasm.c (categorize_decl_for_section): Ignore reloc_rw_mask
ChangeLog-2011:	if section attribute used.
ChangeLog-2011:	(darwin_init_sections): Remove assertion.
ChangeLog-2011:	notes from other section in hot/cold partitioning even if
ChangeLog-2011:	* config/darwin-sections.def: Remove unused section.
ChangeLog-2011:	* cgraphunit.c (assemble_thunk): Call resolve_unique_section.
ChangeLog-2011:	to switch back to function's section.
ChangeLog-2011:	* target.def (function_switched_text_sections): New hook.
ChangeLog-2011:	* final.c (default_function_switched_text_sections): New.
ChangeLog-2011:	(final_scan_insn): Call function_switched_text_sections when a
ChangeLog-2011:	mid-function section change occurs.
ChangeLog-2011:	* output.h (default_function_switched_text_sections): Declare.
ChangeLog-2011:	* config/darwin-protos.h (darwin_function_switched_text_sections):
ChangeLog-2011:	* config/darwin.c (darwin_function_switched_text_sections): New.
ChangeLog-2011:	DWARF >= 3.  Add pubnames for the primary section and a reduced DIE for
ChangeLog-2011:	* dwarf2out.c (dwarf2out_finish): Output the debug_aranges section only
ChangeLog-2011:	* lto-cgraph.c (input_cgraph_opt_section): Use the correct section type.
ChangeLog-2011:	* doc/generic.texi: Remove duplicated "@subsubsection Statements".
ChangeLog-2012:	* xcoffout.c (xcoff_tbss_section_name): Define.
ChangeLog-2012:	* xcoffout.h (xcoff_tbss_section_name): Declare.
ChangeLog-2012:	* config/rs6000/rs6000.c (tls_private_data_section): New.
ChangeLog-2012:	(rs6000_xcoff_asm_init_sections) Define tls_private_data_section.
ChangeLog-2012:	(rs6000_xcoff_select_section): Handle TLS bss and private data.
ChangeLog-2012:	(rs6000_xcoff_file_start): Generate xcoff_tbss_section_name.
ChangeLog-2012:	(rs6000_xcoff_encode_section_info): Strip SYMBOL_FLAG_HAS_BLOCK_INFO
ChangeLog-2012:	* varasm.c (get_variable_section): Don't return lcomm_section
ChangeLog-2012:	Don't call get_variable_section here.
ChangeLog-2012:	(categorize_decl_for_section): If flag_asan, don't put STRING_CSTs
ChangeLog-2012:	that should be asan protected into mergeable sections.  For
ChangeLog-2012:	* toplev.c (process_options): Do not warn when -ffunction-sections
ChangeLog-2012:	* xcoffout.c (xcoff_tls_data_section_name): Define.
ChangeLog-2012:	* xcoffout.h (xcoff_tls_data_section_name): Declare.
ChangeLog-2012:	* config/rs6000/rs6000.c (tls_data_section): Define.
ChangeLog-2012:	(rs6000_xcoff_output_tls_section_asm_op): New function.
ChangeLog-2012:	(rs6000_xcoff_asm_init_sections): Initialize tls_data_section.
ChangeLog-2012:	(rs6000_xcoff_select_section): Choose tls_data_section for
ChangeLog-2012:	(rs6000_xcoff_file_start): Generate xcoff_tls_data_section_name.
ChangeLog-2012:	* lto-section-out.c: Likewise.
ChangeLog-2012:	* config.in: Add HAVE_AS_SPARC4 section.
ChangeLog-2012:	capitalization in titles of sections describing built-in functions.
ChangeLog-2012:	(inline_merge_summary, inline_read_section): Likewise.
ChangeLog-2012:	(read_replacements_section): Likewise.
ChangeLog-2012:	* lto-streamer.h (lto_section_type): New item
ChangeLog-2012:	LTO_section_ipcp_transform.
ChangeLog-2012:	* lto-section-in.c (lto_section_name): New element ipcp_trans.
ChangeLog-2012:	* opts.c (finish_options): Set x_debug_generate_pub_sections based on
ChangeLog-2012:	* dwarf2out.c (debug_skeleton_info_section,
ChangeLog-2012:	debug_skeleton_abbrev_section, debug_addr_section,
ChangeLog-2012:	debug_skeleton_line_section, debug_str_offsets_section): New globals.
ChangeLog-2012:	(debug_skeleton_abbrev_section_label, debug_addr_section_label,
ChangeLog-2012:	debug_skeleton_line_section_label, debug_skeleton_info_section_label):
ChangeLog-2012:	(output_abbrev_section): Call output_die_abbrevs.
ChangeLog-2012:	output_skeleton_debug_sections): New functions.
ChangeLog-2012:	* basic-block.h (sbitmap_intersection_of_succs): Rename
ChangeLog-2012:	bitmap_intersection_of_succs. Update callers to match.
ChangeLog-2012:	* basic-block.h (sbitmap_intersection_of_preds): Rename
ChangeLog-2012:	bitmap_intersection_of_preds. Update callers to match.
ChangeLog-2012:	user-supplied alignment when used with an explicit section name.
ChangeLog-2012:	(streamer_pack_tree_bitfields): Pack them in the bitfield section ...
ChangeLog-2012:	(unpack_value_fields): Unpack them from the bitfield section ...
ChangeLog-2012:	* doc/extend.texi (Target Builtins): Add SH built-in section.
ChangeLog-2012:	* doc/lto.texi: Separate sections.
ChangeLog-2012:	* doc/extend.texi (PowerPC Built-in Functions): New section.
ChangeLog-2012:	unrelated to Altivec/VSX to the new section.
ChangeLog-2012:	* doc/invoke.texi (Moxie Options): Add section documenting -mel
ChangeLog-2012:	(inline_read_section): Read stride.
ChangeLog-2012:	* config/darwin.c (darwin_asm_named_section): Adjust for VEC changes.
ChangeLog-2012:	(darwin_asm_dwarf_section): Likewise.
ChangeLog-2012:	* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section): Add TLS
ChangeLog-2012:	section.
ChangeLog-2012:	* omp-low.c (expand_omp_sections): Update gimple_build_switch use.
ChangeLog-2012:	this section.
ChangeLog-2012:	common bits section in exchange for saturating_flag and
ChangeLog-2012:	(inline_read_section): Stream in loop_iterations.
ChangeLog-2012:	* lto-section-in.c (lto_section_name): Do not use "symtab" as part of
ChangeLog-2012:	(inline_read_section): Stream new fields of condition.
ChangeLog-2012:	(output_symtab): ... this one. Update for LTO_section_symtab_nodes.
ChangeLog-2012:	(input_symtab): ... this one. Update for LTO_section_symtab_nodes.
ChangeLog-2012:	section_type.
ChangeLog-2012:	* lto-section-in.c (lto_section_name): Update.
ChangeLog-2012:	* lto-section-out.c (lto_destroy_simple_output_block): Remove
ChangeLog-2012:	section_type.
ChangeLog-2012:	* lto-streamer.h (enum lto_section_type): Remove LTO_section_varpool;
ChangeLog-2012:	rename LTO_section_cgraph to LTO_section_symtab_nodes.
ChangeLog-2012:	(struct lto_header): Remove section_type.
ChangeLog-2012:	(input_cgraph_opt_section): Update.
ChangeLog-2012:	* ipa-inline-analysis.c (inline_read_section): Update.
ChangeLog-2012:	(ipa_prop_read_section): Update.
ChangeLog-2012:	* except.c (switch_to_exception_section): Place tables for
ChangeLog-2012:	* tree-emutls.c (new_emutls_decl): When a var_section is requested by
ChangeLog-2012:	the target, attach the new decl to that, not to the template section.
ChangeLog-2012:	* config/sh/sh.md (mov_neg_si_t): Move to Scc instructions section.
ChangeLog-2012:	(sbitmap_intersection_of_succs, sbitmap_intersection_of_preds,
ChangeLog-2012:	(sbitmap_intersection_of_succs, sbitmap_intersection_of_preds,
ChangeLog-2012:	local variables section_asm_op, size, buf.
ChangeLog-2012:	* omp-low.c (expand_omp_sections): Fix up the !exit_reachable case
ChangeLog-2012:	(i386_pe_seh_init_sections): Likewise.
ChangeLog-2012:	spu_encode_section_info, spu_legitimize_address,
ChangeLog-2012:	spu_section_type_flags, spu_select_section, spu_unique_section,
ChangeLog-2012:	lto-section-out.c, lto-streamer-in.c, matrix-reorg.c, mcf.c,
ChangeLog-2012:	* config/mn10300/mn10300.c (mn10300_encode_section_info): Call
ChangeLog-2012:	default_encode_section_info.
ChangeLog-2012:	section from dwarf2out_finish.  Use new skeleton_die field.
ChangeLog-2012:	produce pubnames and pubtypes sections to output_pubnames.
ChangeLog-2012:	* config/cris/cris.c (cris_target_asm_named_section): Remove.
ChangeLog-2012:	* config/cris/cris-protos.h (cris_target_asm_named_section): Remove.
ChangeLog-2012:	scan_omp_for, scan_omp_sections, scan_omp_single,
ChangeLog-2012:	* lto-section-in.c: Likewise.
ChangeLog-2012:	(pa_section_type_flags): New.
ChangeLog-2012:	(set misc flags section): For powerpc*|rs6000*, remove inclusion
ChangeLog-2012:	.debug_macinfo/.debug_macro section if macinfo_table is empty.
ChangeLog-2012:	* doc/extend.texi (Function Attributes): Point xref to section
ChangeLog-2012:	(lower_omp_sections): Don't explicitely count sequence length,
ChangeLog-2012:	* common.opt (flag_debug_types_section): Default to 0.
ChangeLog-2012:	and -fno-debug-types-section are now the default.
ChangeLog-2012:	* varasm.c (get_section): Don't ICE for section conflicts with
ChangeLog-2012:	built-in section kinds.
ChangeLog-2012:	* config/ia64/ia64.c (ia64_section_type_flags): Remove
ChangeLog-2012:	(ia64_vms_elf_asm_named_section): Remove.
ChangeLog-2012:	flag_section_anchors check ...
ChangeLog-2012:	of section.
ChangeLog-2012:	flag_section_anchors check ...
ChangeLog-2012:	* config/i386/winnt.c (i386_pe_unique_section): Ignore
ChangeLog-2012:	(i386_pe_section_type_flags): Likewise.
ChangeLog-2012:	Some more notes on EIND usage and reorder EIND subsection.
ChangeLog-2012:	(avr_asm_named_section): Ditto.
ChangeLog-2012:	(avr_asm_select_section): Ditto.
ChangeLog-2012:	* varasm.c (get_elf_initfini_array_priority_section): Set
ChangeLog-2012:	Use get_section instead of get_unnamed_section to emit
ChangeLog-2012:	* doc/invoke.texi (TILE-Gx Options): New section.
ChangeLog-2012:	(TILEPro Options): New section.
ChangeLog-2012:	* doc/md.texi (TILE-Gx): New section.
ChangeLog-2012:	(TILEPro): New section.
ChangeLog-2012:	adding __forwarder_dst__ prefix if a forwarder_section attribute is
ChangeLog-2012:	forwarder_section attribute.
ChangeLog-2012:	* dwarf2out.c (dwarf2out_switch_text_section): Don't call
ChangeLog-2012:	* lto-wrapper.c (run_gcc): Pass the LTO section name to
ChangeLog-2012:	* doc/extend.texi (Named Address Spaces): Split into subsections.
ChangeLog-2012:	(AVR Named Address Spaces): New subsection.
ChangeLog-2012:	(M32C Named Address Spaces): New subsection.
ChangeLog-2012:	(RL78 Named Address Spaces): New subsection.
ChangeLog-2012:	(SPU Named Address Spaces): New subsection.
ChangeLog-2012:	(AVR Built-in Macros): New subsubsection therein.
ChangeLog-2012:	* config/avr/avr.c (avr_encode_section_info): Test for absence of
ChangeLog-2012:	(avr_encode_section_info): Encode 'progmem' in symbol flags.
ChangeLog-2012:	(avr_asm_named_section): Use ACONCAT instead of avr_replace_prefix.
ChangeLog-2012:	(avr_asm_function_rodata_section): Ditto.
ChangeLog-2012:	(avr_asm_select_section): Ditto.
ChangeLog-2013:	insert_section_boundary_note, rest_of_handle_reorder_blocks,
ChangeLog-2013:	(ix86_section_threshold): Ditto.
ChangeLog-2013:	* config/i386/winnt.c (i386_pe_asm_named_section): Be prepared for an
ChangeLog-2013:	* config/i386/winnt.c (i386_pe_section_type_flags): Use const
ChangeLog-2013:	(rs6000_xcoff_select_section): Place decls with stricter alignment
ChangeLog-2013:	into named sections.
ChangeLog-2013:	(rs6000_xcoff_unique_section): Allow unique sections for
ChangeLog-2013:	* lto-section-in.c: Likewise.
ChangeLog-2013:	* lto-section-out.c: Likewise.
ChangeLog-2013:	* omp-low.c (lower_omp_sections, lower_omp_single, lower_omp_master,
ChangeLog-2013:	(bitmap_intersection_of_succs): Remove usage of EXIT_BLOCK_PTR macro.
ChangeLog-2013:	(bitmap_intersection_of_preds): Remove usage of ENTRY_BLOCK_PTR macro.
ChangeLog-2013:	(gimple_statement_omp_sections): Convert to a subclass of
ChangeLog-2013:	(is_a_helper <gimple_statement_omp_sections> (gimple)): Likewise.
ChangeLog-2013:	(is_a_helper <const gimple_statement_omp_sections> (const_gimple)):
ChangeLog-2013:	(gimple_omp_section_set_last): Likewise.
ChangeLog-2013:	(gimple_omp_sections_set_control): Likewise.
ChangeLog-2013:	(gimple_omp_sections_control_ptr): Likewise.
ChangeLog-2013:	(gimple_omp_sections_control): Likewise.
ChangeLog-2013:	(gimple_omp_sections_set_clauses): Likewise.
ChangeLog-2013:	(gimple_omp_sections_clauses_ptr): Likewise.
ChangeLog-2013:	(gimple_omp_sections_clauses): Likewise.
ChangeLog-2013:	(resolve_unique_section): Moved to varasm.h.
ChangeLog-2013:	(rs6000_elf_encode_section_info): Likewise.
ChangeLog-2013:	or .opd section for ABI_ELFv2.
ChangeLog-2013:	(rs6000_elf_output_toc_section_asm_op): Likewise.
ChangeLog-2013:	(rs6000_elf_encode_section_info): Likewise.
ChangeLog-2013:	* asan.c (asan_emit_stack_protection): Ensure -fsection-anchors
ChangeLog-2013:	(input_cgraph_opt_section): Likewise.
ChangeLog-2013:	* lto-section-in.c (lto_free_function_in_decl_state_for_node):
ChangeLog-2013:	* passes.texi (Cilk Keywords): New section that describes the compiler
ChangeLog-2013:	(read_replacements_section): Likewise.
ChangeLog-2013:	(ipa_prop_read_section): Likewise.
ChangeLog-2013:	* lto-section-in.c (lto_free_function_in_decl_state_for_node):
ChangeLog-2013:	(varpool_finalize_named_section_flags): Likewise.
ChangeLog-2013:	* lto-section-in.c: Likewise.
ChangeLog-2013:	* lto-section-out.c: Likewise.
ChangeLog-2013:	(categorize_decl_for_section): Likewise.
ChangeLog-2013:	* lto-section-in.c: Likewise.
ChangeLog-2013:	* lto-section-out.c: Likewise.
ChangeLog-2013:	debug_generate_pub_sections.
ChangeLog-2013:	(include_pubname_in_output): Handle debug_generate_pub_sections at
ChangeLog-2013:	debug_generate_pub_sections.
ChangeLog-2013:	* doc/gimple.texi (is_gimple_omp): Move into the correct section.
ChangeLog-2013:	(expand_omp_sections): Use GOMP_sections_end_cancel at the end
ChangeLog-2013:	of cancellable sections.
ChangeLog-2013:	(lower_omp_sections): Adjust lower_rec_input_clauses caller.  Handle
ChangeLog-2013:	(arc_encode_section_info): Fix comment.
ChangeLog-2013:	(ARC Built-in Functions): New section defining
ChangeLog-2013:	(ARC SIMD Built-in Functions): New section defining SIMD specific
ChangeLog-2013:	(lto-streamer-in.o, lto-streamer-out.o, lto-section-in.o)
ChangeLog-2013:	(lto-section-out.o, lto-opts.o, lto-streamer.o, langhooks.o)
ChangeLog-2013:	* config/rl78/rl78.h (LINK_SPEC): Pass -gc-sections unless
ChangeLog-2013:	* omp-low.c (expand_omp_sections): Always pass len - 1 to
ChangeLog-2013:	GOMP_sections_start, even if !exit_reachable.
ChangeLog-2013:	(msp430_function_section): New function.
ChangeLog-2013:	* config/darwin.c (darwin_objc2_section): Note if ObjC Metadata is
ChangeLog-2013:	(darwin_objc1_section): Likewise.
ChangeLog-2013:	(darwin_file_end): Emit Image Info section when required.
ChangeLog-2013:	loop-init.c, lto-cgraph.c, lto-section-in.c, lto-section-out.c,
ChangeLog-2013:	* varasm.c (get_variable_section): Adjust.
ChangeLog-2013:	(categorize_decl_for_section): Likewise.
ChangeLog-2013:	* lto-section-in.c (lto_free_function_in_decl_state): New function.
ChangeLog-2013:	* config/i386/i386.c (x86_64_elf_select_section): Put ATTRIBUTE_UNUSED
ChangeLog-2013:	(x86_64_elf_select_section): Ditto.
ChangeLog-2013:	* config/i386/i386.c (x86_64_elf_section_type_flags): New function.
ChangeLog-2013:	from crossing split section boundaries.
ChangeLog-2013:	section and name for the .vtable_map_vars section.
ChangeLog-2013:	(default_sectin_type_flags):  Make sure .vtable_map_vars section has
ChangeLog-2013:	(dump_gimple_omp_sections): Likewise.
ChangeLog-2013:	* lto-section-out.c (lto_output_decl_index): Likewise.
ChangeLog-2013:	byte case, inline streamer_read_uchar and defer section
ChangeLog-2013:	* lto-section-out.c (lto_hash_decl_slot_node, lto_eq_decl_slot_node,
ChangeLog-2013:	* varasm.c (get_section): Don't die on !DECL_P decl.  Tidy error
ChangeLog-2013:	(get_named_section): Don't NULL !DECL_P decl.
ChangeLog-2013:	(get_variable_section, emit_bss, emit_common,
ChangeLog-2013:	(insert_section_boundary_note): Make non-static, gate on flag
ChangeLog-2013:	insert_section_boundary_note, now done later during free_cfg.
ChangeLog-2013:	* bb-reorder.h (insert_section_boundary_note): Declare.
ChangeLog-2013:	invoke insert_section_boundary_note.
ChangeLog-2013:	(duplicate_insn_chain): Don't duplicate switch section notes.
ChangeLog-2013:	* config/i386/winnt.c (i386_pe_section_type_flags::htab):
ChangeLog-2013:	(ipa_print_node_params, ipa_prop_read_section,
ChangeLog-2013:	ipa_update_after_lto_read, read_replacements_section): Update.
ChangeLog-2013:	varpool_finalize_named_section_flags, varpool_create_variable_alias):
ChangeLog-2013:	* config/avr/avr.c (avr_encode_section_info): Bail out if the type
ChangeLog-2013:	* varasm.c (default_elf_select_section): Move !DECL_P check..
ChangeLog-2013:	(get_named_section): ..to here before calling get_section_name.
ChangeLog-2013:	(default_section_type_flags): Add DECL_P check.
ChangeLog-2013:	* config/i386/winnt.c (i386_pe_section_type_flags): Likewise.
ChangeLog-2013:	* config/rs6000/rs6000.c (rs6000_xcoff_section_type_flags): Likewise.
ChangeLog-2013:	(expand_omp_sections): Fix default bb placement in loops.
ChangeLog-2013:	(expand_omp_sections): Likewise.
ChangeLog-2013:	(comp_dir_string, debug_str_dwo_section): New.
ChangeLog-2013:	(output_skeleton_debug_sections): Remove call to
ChangeLog-2013:	(dwarf2out_init): Initialize debug_str_dwo_section.
ChangeLog-2013:	* bb-reorder.c (insert_section_boundary_note): Remove hack to set
ChangeLog-2013:	* lto-section-in.c (lto_section_name): Add profile.
ChangeLog-2013:	* lto-streamer.h (LTO_section_ipa_profile): New section.
ChangeLog-2013:	* sdbout.c (sdbout_one_type): Switch to current function's section
ChangeLog-2013:	subsection.
ChangeLog-2013:	* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section): Emit
ChangeLog-2013:	(avr_addrspace_t): Add .section_name field.
ChangeLog-2013:	* config/avr/avr.c (progmem_section): Use ADDR_SPACE_COUNT as
ChangeLog-2013:	(avr_addrspace): Same.  Initialize .section_name.  Remove last
ChangeLog-2013:	(progmem_section_prefix): Remove.
ChangeLog-2013:	(avr_asm_init_sections): No need to initialize progmem_section.
ChangeLog-2013:	(avr_asm_named_section): Use avr_addrspace[].section_name to get
ChangeLog-2013:	section name prefix.
ChangeLog-2013:	(avr_asm_select_section): Ditto.  And use get_unnamed_section to
ChangeLog-2013:	retrieve the progmem section.
ChangeLog.graphite:	out of ifdef HAVE_cloog section.
ChangeLog.graphite:	intersection assign.
ChangeLog.graphite:	* omp-low.c (expand_omp_sections): Remove now unused code.
ChangeLog.graphite:	* omp-low.c (expand_omp_sections): Call add_bb_to_loop on created
ChangeLog.tree-ssa:	* varasm.c (categorize_decl_for_section): Likewise, for strings.
ChangeLog.tree-ssa:	(-fdump-tree-{pre,ccp,dce}): Add to the summary section.
ChangeLog.tuples:	* omp-low.c (lower_omp_sections, lower_omp_single, lower_omp_master,
ChangeLog.tuples:	dump_gimple_omp_single, dump_gimple_omp_sections,
ChangeLog.tuples:	(gimple_omp_section_last_p): Likewise.
ChangeLog.tuples:	* gimple-pretty-print.c (dump_gimple_omp_sections,
ChangeLog.tuples:	(expand_omp_sections): Same.
ChangeLog.tuples:	(expand_omp_sections): Remove fixmes.  Tuplify.
ChangeLog.tuples:	(lower_omp_sections): Same.
ChangeLog.tuples:	(gimple_build_omp_sections): New.
ChangeLog.tuples:	* gimple.h (gimple_build_omp_sections_switch): New prototype.
ChangeLog.tuples:	(expand_omp_sections): Same.
ChangeLog.tuples:	(lower_omp_sections): Same.
ChangeLog.tuples:	(gimple_omp_section_set_last): New.
ChangeLog.tuples:	(expand_omp_sections): Same.
ChangeLog.tuples:	lower_omp_sections, lower_omp_single, lower_omp_master,
ChangeLog.tuples:	(gimple_omp_section_last_p): Likewise.
ChangeLog.tuples:	* omp-low.c (expand_omp_sections): Use
ChangeLog.tuples:	gimple_omp_sections_control.
ChangeLog.tuples:	(lower_omp_sections): Same.
ChangeLog.tuples:	* gimple.h (gimple_statement_omp_sections): Add control.
ChangeLog.tuples:	(gimple_omp_sections_control): New.
ChangeLog.tuples:	(gimple_omp_sections_control_ptr): New.
ChangeLog.tuples:	(gimple_omp_sections_set_control): New.
ChangeLog.tuples:	(expand_omp_sections): Same.
ChangeLog.tuples:	(lower_omp_sections): Rename OMP_CONTINUE to GIMPLE_OMP_CONTINUE.
ChangeLog.tuples:	* omp-low.c (expand_omp_sections): Fix build breakage due to an
ChangeLog.tuples:	(scan_omp_sections): Same.
ChangeLog.tuples:	(expand_omp_sections): Same.
ChangeLog.tuples:	* gimple.def (GIMPLE_ASSIGN): Move into section of
ChangeLog.tuples:	gimple_unreachable to mark unconverted sections.
ChangeLog.tuples:	unconverted sections.
ChangeLog.tuples:	(gimple_omp_section_last_p): Constify argument.
ChangeLog.tuples:	(gimple_build_omp_section): Rename from
ChangeLog.tuples:	build_gimple_omp_section.  Update all users.
ChangeLog.tuples:	(gimple_build_omp_sections): Rename from
ChangeLog.tuples:	build_gimple_omp_sections.  Update all users.
ChangeLog.tuples:	(gimple_omp_sections_clauses): Likewise.
ChangeLog.tuples:	(build_gimple_omp_section): Likewise.
ChangeLog.tuples:	(build_gimple_omp_sections): Likewise.
ChangeLog.tuples:	(gimple_omp_sections_clauses_ptr): New.
ChangeLog.tuples:	(expand_omp_sections): Call gimple_omp_section_last_p.
ChangeLog.tuples:	(gimple_omp_section_last_p): New.
ChangeLog.tuples:	(build_gimple_omp_section): Rename from gimple_build_omp_section.
ChangeLog.tuples:	(build_gimple_omp_sections): Rename from gimple_build_omp_sections.
ChangeLog.tuples:	(gs_omp_build_section): Same.
ChangeLog.tuples:	(gs_omp_build_sections): Same.
ChangeLog.tuples:	* diagnostic.h (debug_c_tree): Move under tree-pretty-print.c section.
ChangeLog.tuples:	gs_omp_single_clauses, gs_omp_sections_clauses,
ChangeLog.tuples:	gs_omp_build_section, gs_omp_build_master,
ChangeLog.tuples:	gs_omp_build_sections, gs_omp_build_single): New
ChangeLog.tuples:	gs_omp_single_set_clauses, gs_omp_sections_clauses,
ChangeLog.tuples:	gs_omp_sections_set_clauses, gs_assign_omp_for_cond,
collect2-aix.h:  /* The number of sections.  */
collect2-aix.h:  /* The number of sections.  */
collect2-aix.h:/* Symbol classes have their names in the debug section if this flag
collect2-aix.h:  /* The number of the section to which this symbol belongs.  */
collect2.c:   section by the linker), followed by the pointers to the constructor
common.opt:Do not put uninitialized globals in the common section
common.opt:fdata-sections
common.opt:Common Report Var(flag_data_sections) Optimization
common.opt:Place data items into their own section
common.opt:fdebug-types-section
common.opt:Common Report Var(flag_debug_types_section) Init(0)
common.opt:Output .debug_types section when using DWARF v4 debuginfo.
common.opt:ffunction-sections
common.opt:Common Report Var(flag_function_sections)
common.opt:Place each function into its own section
common.opt:; This will attempt to merge constant section constants, if 1 only
common.opt:Reorder basic blocks and partition into hot and cold sections
common.opt:fsection-anchors
common.opt:Common Report Var(flag_section_anchors) Optimization
common.opt:Access data in the same section from shared anchor points
common.opt:Put zero initialized data in the bss section
common.opt:Common Negative(gpubnames) Var(debug_generate_pub_sections, 0) Init(-1)
common.opt:Don't generate DWARF pubnames and pubtypes sections.
common.opt:Common Negative(ggnu-pubnames) Var(debug_generate_pub_sections, 1)
common.opt:Generate DWARF pubnames and pubtypes sections.
common.opt:Common Negative(gno-pubnames) Var(debug_generate_pub_sections, 2)
common.opt:Generate DWARF pubnames and pubtypes sections with GNU extensions.
config.gcc:  # machine-specific sections may refine and add to this
config.gcc:  # machine-specific section to dictate the final order of all
config.gcc:  # The machine-specific section should not tamper with this
config.in:   sections. */
config.in:/* Define 0/1 if your assembler supports .cfi_sections. */
config.in:/* Define if your assembler and linker support 32-bit section relative relocs
config.in:/* Define if your assembler supports specifying the section flag e. */
config.in:/* Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.
config.in:/* Define if your assembler supports .subsection and .subsection -1 starts
config.in:   emitting at the beginning of your section. */
config.in:/* Define .init_array/.fini_array sections are available and working. */
config.in:/* Define if your linker supports garbage collection of sections in presence
config.in:/* Define if your linker has buggy garbage collection of sections support when
config.in:   .text.startup.foo like sections are used. */
config.in:/* Define if your linker links a mix of read-only and read-write sections into
config.in:   a read-write section. */
config.in:/* Define to the flag used to mark TLS sections if the default (`T') doesn't
configure:  --enable-initfini-array	use .init_array/.fini_array sections
configure:    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&5
configure:$as_echo "$as_me: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&2;}
configure:	# Even if this section looks crufty: it has the advantage of
configure:"     {last_section=section; section=\$ 3};"\
configure:"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};"\
configure:"     {if(hide[section]) next};"\
configure:	# files that make .init and .fini sections work.
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for working .subsection -1" >&5
configure:$as_echo_n "checking assembler for working .subsection -1... " >&6; }
configure:if test "${gcc_cv_as_subsection_m1+set}" = set; then :
configure:  gcc_cv_as_subsection_m1=no
configure:  then gcc_cv_as_subsection_m1=yes
configure:.subsection -1
configure:    else gcc_cv_as_subsection_m1=yes
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_subsection_m1" >&5
configure:$as_echo "$gcc_cv_as_subsection_m1" >&6; }
configure:if test $gcc_cv_as_subsection_m1 = yes; then
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: checking linker read-only and read-write section mixing" >&5
configure:$as_echo_n "checking linker read-only and read-write section mixing... " >&6; }
configure:  echo '.section myfoosect, "a"' > conftest1.s
configure:  echo '.section myfoosect, "aw"' > conftest2.s
configure:  echo '.section myfoosect, "a"' > conftest3.s
configure:int (*fp) (void) __attribute__ ((section (".init_array"))) = foo;
configure:.section .dtors,"a",%progbits
configure:.section .ctors,"a",%progbits
configure:.section .fini_array.65530,"a",%progbits
configure:.section .init_array.65530,"a",%progbits
configure:.section .dtors.64528,"a",%progbits
configure:.section .ctors.64528,"a",%progbits
configure:.section .fini_array.01005,"a",%progbits
configure:.section .init_array.01005,"a",%progbits
configure:  # arbitrary sections are supported and try the test.
configure:    # read-only and read-write sections, we need to make sure that the
configure:    # assembler used emits read-write .eh_frame sections.
configure:	      # read-only .eh_frame sections for 64-bit.
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for cfi sections directive" >&5
configure:$as_echo_n "checking assembler for cfi sections directive... " >&6; }
configure:if test "${gcc_cv_as_cfi_sections_directive+set}" = set; then :
configure:  gcc_cv_as_cfi_sections_directive=no
configure:	.cfi_sections .debug_frame, .eh_frame
configure:    # .debug_frame section.  This was fixed for binutils 2.21.
configure:    gcc_cv_as_cfi_sections_directive=no
configure:      gcc_cv_as_cfi_sections_directive=yes
configure:    gcc_cv_as_cfi_sections_directive=yes
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_cfi_sections_directive" >&5
configure:$as_echo "$gcc_cv_as_cfi_sections_directive" >&6; }
configure:#define HAVE_GAS_CFI_SECTIONS_DIRECTIVE `if test $gcc_cv_as_cfi_sections_directive = yes;
configure:	.section	.eh_frame,"aw",@progbits
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for section merging support" >&5
configure:$as_echo_n "checking assembler for section merging support... " >&6; }
configure:    $as_echo '.section .rodata.str, "aMS", @progbits, 1' > conftest.s
configure:  { $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for section merging support" >&5
configure:$as_echo_n "checking assembler for section merging support... " >&6; }
configure:    $as_echo '.section .rodata.str, "aMS", %progbits, 1' > conftest.s
configure:    $as_echo '.section .text,"axG",@progbits,.foo,comdat' > conftest.s
configure:    $as_echo '.section .text,"axG",%progbits,.foo,comdat' > conftest.s
configure:               .section ".text%foo", #alloc,#execinstr,#progbits
configure:               .section .text%foo, "ax", @progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",%progbits
configure:	.section .tdata,"awt",@progbits'
configure:      tls_section_flag=t
configure:	.section ".tdata","awT",@progbits'
configure:      tls_section_flag=T
configure:	.section ".tdata","awT",@progbits
configure:	tls_section_flag=T
configure:	.section ".tdata","awT",@progbits
configure:	.section .tdata,"awT",@progbits
configure:	.section .tdata,"awT",@progbits
configure:	.section .tdata,"awT",@progbits
configure:	.section ".tdata","awT",@progbits'
configure:	.section ".tdata","awT",%progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata",#alloc,#write,#tls'
configure:	.section ".tdata","awT",@progbits'
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:	.section ".tdata","awT",@progbits
configure:    $as_echo '.section "nobits",#alloc,#write,#nobits
configure:       .section "progbits",#alloc,#write,#progbits' > conftest.s
configure:	# Test if the assembler supports the extended form of the .section
configure:	# directive that specifies section alignment.  LTO support uses this,
configure:	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for .section with alignment" >&5
configure:$as_echo_n "checking assembler for .section with alignment... " >&6; }
configure:if test "${gcc_cv_as_section_has_align+set}" = set; then :
configure:  gcc_cv_as_section_has_align=no
configure:  then gcc_cv_as_section_has_align=yes
configure:    $as_echo '.section lto_test,"dr0"' > conftest.s
configure:	gcc_cv_as_section_has_align=yes
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_section_has_align" >&5
configure:$as_echo "$gcc_cv_as_section_has_align" >&6; }
configure:	if test x$gcc_cv_as_section_has_align != xyes; then
configure:	# Test if the assembler supports the section flag 'e' for specifying
configure:	# an excluded section.
configure:	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for .section with e" >&5
configure:$as_echo_n "checking assembler for .section with e... " >&6; }
configure:if test "${gcc_cv_as_section_has_e+set}" = set; then :
configure:  gcc_cv_as_section_has_e=no
configure:  then gcc_cv_as_section_has_e=yes
configure:    $as_echo '.section foo1,"e"
configure:	gcc_cv_as_section_has_e=yes
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_section_has_e" >&5
configure:$as_echo "$gcc_cv_as_section_has_e" >&6; }
configure:#define HAVE_GAS_SECTION_EXCLUDE `if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`
configure:    { $as_echo "$as_me:${as_lineno-$LINENO}: checking assembler for different section symbol subtraction" >&5
configure:$as_echo_n "checking assembler for different section symbol subtraction... " >&6; }
configure:    $as_echo '.section .rodata
configure:	.section .tdata,"aw'$tls_section_flag'",@progbits
configure:	.section .text,"ax",@progbits
configure:	.section .text,"ax",@progbits
configure:        .section .tdata,"aw'$tls_section_flag'",@progbits
configure:    $as_echo '.section .tdata,"awT",@progbits
configure:	.section .data,"aw",@progbits
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: checking linker EH-compatible garbage collection of sections" >&5
configure:$as_echo_n "checking linker EH-compatible garbage collection of sections... " >&6; }
configure:gcc_cv_ld_eh_gc_sections=no
configure:    gcc_cv_ld_eh_gc_sections=yes
configure:	.section	.text
configure:	.section	.text.foo,"ax",@progbits
configure:	.section	.gcc_except_table.foo,"a",@progbits
configure:	.section	.eh_frame,"a",@progbits
configure:    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \
configure:	 | grep "gc-sections option ignored" > /dev/null; then
configure:      gcc_cv_ld_eh_gc_sections=no
configure:      gcc_cv_ld_eh_gc_sections=yes
configure:      # If no COMDAT groups, the compiler will emit .gnu.linkonce.t. sections.
configure:	gcc_cv_ld_eh_gc_sections=no
configure:	.section	.text
configure:	.section	.gnu.linkonce.t.foo,"ax",@progbits
configure:	.section	.gcc_except_table.foo,"a",@progbits
configure:	.section	.eh_frame,"a",@progbits
configure:	  if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \
configure:	       | grep "gc-sections option ignored" > /dev/null; then
configure:	    gcc_cv_ld_eh_gc_sections=no
configure:	    gcc_cv_ld_eh_gc_sections=yes
configure:    gcc_cv_ld_eh_gc_sections=no
configure:if test x$gcc_cv_ld_eh_gc_sections = xyes; then
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_eh_gc_sections" >&5
configure:$as_echo "$gcc_cv_ld_eh_gc_sections" >&6; }
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: checking linker EH garbage collection of sections bug" >&5
configure:$as_echo_n "checking linker EH garbage collection of sections bug... " >&6; }
configure:gcc_cv_ld_eh_gc_sections_bug=no
configure:    gcc_cv_ld_eh_gc_sections_bug=yes
configure:  gcc_cv_ld_eh_gc_sections_bug=yes
configure:	.section	.text
configure:	.section	.text.startup.foo,"ax",@progbits
configure:	.section	.gcc_except_table.foo,"a",@progbits
configure:	.section	.eh_frame,"a",@progbits
configure:    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \
configure:	 | grep "gc-sections option ignored" > /dev/null; then
configure:      gcc_cv_ld_eh_gc_sections_bug=no
configure:if test x$gcc_cv_ld_eh_gc_sections_bug = xyes; then
configure:{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_eh_gc_sections_bug" >&5
configure:$as_echo "$gcc_cv_ld_eh_gc_sections_bug" >&6; }
configure:	.section ".opd","aw"
configure:	.section ".tbss","awT",@nobits
configure:# Set up the scripts for CONFIG_FILES section.
configure:# Set up the scripts for CONFIG_HEADERS section.
configure.ac:gcc_GAS_CHECK_FEATURE([working .subsection -1], gcc_cv_as_subsection_m1,
configure.ac:.subsection -1
configure.ac:    else gcc_cv_as_subsection_m1=yes
configure.ac:  [Define if your assembler supports .subsection and .subsection -1 starts
configure.ac:   emitting at the beginning of your section.])])
configure.ac:AC_MSG_CHECKING(linker read-only and read-write section mixing)
configure.ac:  echo '.section myfoosect, "a"' > conftest1.s
configure.ac:  echo '.section myfoosect, "aw"' > conftest2.s
configure.ac:  echo '.section myfoosect, "a"' > conftest3.s
configure.ac:   and read-write sections into a read-write section.])
configure.ac:  # arbitrary sections are supported and try the test.
configure.ac:    # read-only and read-write sections, we need to make sure that the
configure.ac:    # assembler used emits read-write .eh_frame sections.
configure.ac:	      # read-only .eh_frame sections for 64-bit.
configure.ac:gcc_GAS_CHECK_FEATURE([cfi sections directive],
configure.ac:  gcc_cv_as_cfi_sections_directive, ,,
configure.ac:	.cfi_sections .debug_frame, .eh_frame
configure.ac:    # .debug_frame section.  This was fixed for binutils 2.21.
configure.ac:    gcc_cv_as_cfi_sections_directive=no
configure.ac:      gcc_cv_as_cfi_sections_directive=yes
configure.ac:    gcc_cv_as_cfi_sections_directive=yes
configure.ac:  [`if test $gcc_cv_as_cfi_sections_directive = yes;
configure.ac:  [Define 0/1 if your assembler supports .cfi_sections.])
configure.ac:	.section	.eh_frame,"aw",@progbits
configure.ac:gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,
configure.ac: [.section .rodata.str, "aMS", @progbits, 1])
configure.ac:  gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,
configure.ac:    [.section .rodata.str, "aMS", %progbits, 1])
configure.ac:[Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.])
configure.ac: [.section .text,"axG",@progbits,.foo,comdat])
configure.ac:   [.section .text,"axG",%progbits,.foo,comdat])
configure.ac:               .section ".text%foo", #alloc,#execinstr,#progbits
configure.ac:               .section .text%foo, "ax", @progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",%progbits
configure.ac:	.section .tdata,"awt",@progbits'
configure.ac:      tls_section_flag=t
configure.ac:[Define to the flag used to mark TLS sections if the default (`T') doesn't work.])
configure.ac:	.section ".tdata","awT",@progbits'
configure.ac:      tls_section_flag=T
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	tls_section_flag=T
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section .tdata,"awT",@progbits
configure.ac:	.section .tdata,"awT",@progbits
configure.ac:	.section .tdata,"awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits'
configure.ac:	.section ".tdata","awT",%progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata",#alloc,#write,#tls'
configure.ac:	.section ".tdata","awT",@progbits'
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:	.section ".tdata","awT",@progbits
configure.ac:      [.section "nobits",#alloc,#write,#nobits
configure.ac:       .section "progbits",#alloc,#write,#progbits])
configure.ac:	    [Define if your assembler and linker support 32-bit section relative relocs via '.secrel32 label'.])])
configure.ac:	# Test if the assembler supports the extended form of the .section
configure.ac:	# directive that specifies section alignment.  LTO support uses this,
configure.ac:	gcc_GAS_CHECK_FEATURE([.section with alignment], gcc_cv_as_section_has_align,
configure.ac:	  [2,20,1],-fatal-warnings,[.section lto_test,"dr0"])
configure.ac:	if test x$gcc_cv_as_section_has_align != xyes; then
configure.ac:	# Test if the assembler supports the section flag 'e' for specifying
configure.ac:	# an excluded section.
configure.ac:	gcc_GAS_CHECK_FEATURE([.section with e], gcc_cv_as_section_has_e,
configure.ac:[.section foo1,"e"
configure.ac:	  [`if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`],
configure.ac:          [Define if your assembler supports specifying the section flag e.])
configure.ac:    gcc_GAS_CHECK_FEATURE([different section symbol subtraction],
configure.ac:      [.section .rodata
configure.ac:        [Define if your assembler supports the subtraction of symbols in different sections.])])
configure.ac:	.section .tdata,"aw'$tls_section_flag'",@progbits
configure.ac:	.section .text,"ax",@progbits
configure.ac:	.section .text,"ax",@progbits
configure.ac:        .section .tdata,"aw'$tls_section_flag'",@progbits
configure.ac:      [.section .tdata,"awT",@progbits
configure.ac:	.section .data,"aw",@progbits
configure.ac:AC_MSG_CHECKING(linker EH-compatible garbage collection of sections)
configure.ac:gcc_cv_ld_eh_gc_sections=no
configure.ac:    gcc_cv_ld_eh_gc_sections=yes
configure.ac:	.section	.text
configure.ac:	.section	.text.foo,"ax",@progbits
configure.ac:	.section	.gcc_except_table.foo,"a",@progbits
configure.ac:	.section	.eh_frame,"a",@progbits
configure.ac:    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \
configure.ac:	 | grep "gc-sections option ignored" > /dev/null; then
configure.ac:      gcc_cv_ld_eh_gc_sections=no
configure.ac:      gcc_cv_ld_eh_gc_sections=yes
configure.ac:      # If no COMDAT groups, the compiler will emit .gnu.linkonce.t. sections.
configure.ac:	gcc_cv_ld_eh_gc_sections=no
configure.ac:	.section	.text
configure.ac:	.section	.gnu.linkonce.t.foo,"ax",@progbits
configure.ac:	.section	.gcc_except_table.foo,"a",@progbits
configure.ac:	.section	.eh_frame,"a",@progbits
configure.ac:	  if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \
configure.ac:	       | grep "gc-sections option ignored" > /dev/null; then
configure.ac:	    gcc_cv_ld_eh_gc_sections=no
configure.ac:	    gcc_cv_ld_eh_gc_sections=yes
configure.ac:    gcc_cv_ld_eh_gc_sections=no
configure.ac:if test x$gcc_cv_ld_eh_gc_sections = xyes; then
configure.ac:   sections in presence of EH frames.])
configure.ac:AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections)
configure.ac:AC_MSG_CHECKING(linker EH garbage collection of sections bug)
configure.ac:gcc_cv_ld_eh_gc_sections_bug=no
configure.ac:    gcc_cv_ld_eh_gc_sections_bug=yes
configure.ac:  gcc_cv_ld_eh_gc_sections_bug=yes
configure.ac:	.section	.text
configure.ac:	.section	.text.startup.foo,"ax",@progbits
configure.ac:	.section	.gcc_except_table.foo,"a",@progbits
configure.ac:	.section	.eh_frame,"a",@progbits
configure.ac:    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \
configure.ac:	 | grep "gc-sections option ignored" > /dev/null; then
configure.ac:      gcc_cv_ld_eh_gc_sections_bug=no
configure.ac:if test x$gcc_cv_ld_eh_gc_sections_bug = xyes; then
configure.ac:   sections support when .text.startup.foo like sections are used.])
configure.ac:AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections_bug)
configure.ac:	.section ".opd","aw"
configure.ac:	.section ".tbss","awT",@nobits
COPYING:identifiable sections of that work are not derived from the Program,
COPYING:sections when you distribute them as separate works.  But when you
COPYING:distribute the same sections as part of a whole which is a work based
COPYING:Thus, it is not the intent of this section to claim rights or contest
COPYING:    an offer, in accord with Subsection b above.)
COPYING:If any portion of this section is held invalid or unenforceable under
COPYING:any particular circumstance, the balance of the section is intended to
COPYING:apply and the section as a whole is intended to apply in other
COPYING:It is not the purpose of this section to induce you to infringe any
COPYING:such claims; this section has the sole purpose of protecting the
COPYING:This section is intended to make thoroughly clear what is believed to
COPYING3:the conditions stated below.  Sublicensing is not allowed; section 10
COPYING3:non-permissive terms added in accord with section 7 apply to the code;
COPYING3:terms of section 4, provided that you also meet all of these conditions:
COPYING3:    released under this License and any conditions added under section
COPYING3:    7.  This requirement modifies the requirement in section 4 to
COPYING3:    License will therefore apply, along with any applicable section 7
COPYING3:of sections 4 and 5, provided that you also convey the
COPYING3:    with subsection 6b.
COPYING3:    charge under subsection 6d.
COPYING3:  If you convey an object code work under this section in, or with, or
COPYING3:Corresponding Source conveyed under this section must be accompanied
COPYING3:in accord with this section must be in a format that is publicly
COPYING3:    terms of sections 15 and 16 of this License; or
COPYING3:restrictions" within the meaning of section 10.  If the Program as you
COPYING3:  If you add terms to a covered work in accord with this section, you
COPYING3:paragraph of section 11).
COPYING3:  Termination of your rights under this section does not terminate the
COPYING3:material under section 10.
COPYING3:section 13, concerning interaction through a network will apply to the
COPYING3.LIB:  You may convey a covered work under sections 3 and 4 of this License
COPYING3.LIB:without being bound by section 3 of the GNU GPL.
COPYING3.LIB:       manner specified by section 6 of the GNU GPL for conveying
COPYING3.LIB:   be required to provide such information under section 6 of the
COPYING3.LIB:   Information in the manner specified by section 6 of the GNU GPL
COPYING.LIB:    application.  Therefore, Subsection 2d requires that any
COPYING.LIB:identifiable sections of that work are not derived from the Library,
COPYING.LIB:sections when you distribute them as separate works.  But when you
COPYING.LIB:distribute the same sections as part of a whole which is a work based
COPYING.LIB:Thus, it is not the intent of this section to claim rights or contest
COPYING.LIB:    specified in Subsection 6a, above, for a charge no more
COPYING.LIB:If any portion of this section is held invalid or unenforceable under any
COPYING.LIB:particular circumstance, the balance of the section is intended to apply,
COPYING.LIB:and the section as a whole is intended to apply in other circumstances.
COPYING.LIB:It is not the purpose of this section to induce you to infringe any
COPYING.LIB:such claims; this section has the sole purpose of protecting the
COPYING.LIB:This section is intended to make thoroughly clear what is believed to
coretypes.h:union section;
coretypes.h:typedef union section section;
cse.c:	     This section previously turned the REG_EQUIV into a REG_EQUAL
data-streamer.h:    lto_section_overrun (ib);
data-streamer-in.c:  /* We check for section overrun after the fact for performance reason.  */
data-streamer-in.c:    lto_section_overrun (ib);
dbxout.c:   output while in the text section.
dbxout.c:#define FORCE_TEXT switch_to_section (current_function_section ())
dbxout.c:  debug_nothing_void,                    /* switch_text_section */
dbxout.c:  debug_nothing_void,                    /* switch_text_section */
dbxout.c:  switch_to_section (function_section (current_function_decl));
dbxout.c:     named sections.  */
dbxout.c:      || !targetm_common.have_named_sections)
dbxout.c:      dbxout_stab_value_label_diff (crtl->subsections.hot_section_end_label,
dbxout.c:				    crtl->subsections.hot_section_label);
dbxout.c:      dbxout_stab_value_label_diff (crtl->subsections.cold_section_end_label,
dbxout.c:				    crtl->subsections.cold_section_label);
dbxout.c:      switch_to_section (text_section);
dbxout.c:      /* Don't change section amid function.  */
dbxout.c:	switch_to_section (text_section);
dbxout.c:   switch_to_section (text_section);
dbxout.c:	      switch_to_section (data_section);
debug.c:  debug_nothing_void,                    /* switch_text_section */
debug.h:     text sections.  */
debug.h:  void (* switch_text_section) (void);
debug.h:extern void dwarf2out_switch_text_section (void);
defaults.h:/* If we have named sections, and we're using crtstuff to run ctors,
defaults.h:   read-write sections into a single read-write section.  If your
defaults.h:/* If we have named section and we support weak symbols, then use the
defaults.h:   .jcr section for recording java classes which need to be registered
defaults.h:/* This decision to use a .jcr section can be overridden by defining
defaults.h:   linker support for .jcr section.  */
defaults.h:   relative to a debug info section, specified to be 4 bytes in the
defaults.h:   This section of defaults.h defines target macros that depend on generated
defaults.h:   Obviously, it would be best to keep this section of defaults.h as small
df-core.c:problem finds the intersection of these two areas.
df-core.c:section.
double-int.c:     extracted from the GMP manual, section "Integer Import and Export":
dse.c:     intersection problem.  However, like the kill set, this is too
dse.c:     intersection problem.  However, like the kill and in set, this is
dwarf2asm.c:/* Output a section-relative reference to a LABEL, which was placed in
dwarf2asm.c:   a direct reference and the knowledge that the debugging section
dwarf2asm.c:		       section *base ATTRIBUTE_UNUSED,
dwarf2asm.c:   different section or object file.  */
dwarf2asm.c:	 read-only section.  */
dwarf2asm.h:extern void dw2_asm_output_offset (int, const char *, section *,
dwarf2cfi.c:  bool switch_sections;
dwarf2cfi.c:	     in different sections.  */
dwarf2cfi.c:      /* In dwarf2out_switch_text_section, we'll begin a new FDE
dwarf2cfi.c:	 section.  The row state at the very beginning of that
dwarf2cfi.c:      if (ti->switch_sections)
dwarf2cfi.c:	  if (ti->switch_sections)
dwarf2cfi.c:  bool saw_barrier, switch_sections;
dwarf2cfi.c:  switch_sections = false;
dwarf2cfi.c:	  switch_sections = true;
dwarf2cfi.c:	  ti.switch_sections = switch_sections;
dwarf2cfi.c:	  switch_sections = false;
dwarf2cfi.c:		 tp->switch_sections ? " (section switch)" : "");
dwarf2out.c:/* Pointers to various DWARF2 sections.  */
dwarf2out.c:static GTY(()) section *debug_info_section;
dwarf2out.c:static GTY(()) section *debug_skeleton_info_section;
dwarf2out.c:static GTY(()) section *debug_abbrev_section;
dwarf2out.c:static GTY(()) section *debug_skeleton_abbrev_section;
dwarf2out.c:static GTY(()) section *debug_aranges_section;
dwarf2out.c:static GTY(()) section *debug_addr_section;
dwarf2out.c:static GTY(()) section *debug_macinfo_section;
dwarf2out.c:static GTY(()) section *debug_line_section;
dwarf2out.c:static GTY(()) section *debug_skeleton_line_section;
dwarf2out.c:static GTY(()) section *debug_loc_section;
dwarf2out.c:static GTY(()) section *debug_pubnames_section;
dwarf2out.c:static GTY(()) section *debug_pubtypes_section;
dwarf2out.c:static GTY(()) section *debug_str_section;
dwarf2out.c:static GTY(()) section *debug_str_dwo_section;
dwarf2out.c:static GTY(()) section *debug_str_offsets_section;
dwarf2out.c:static GTY(()) section *debug_ranges_section;
dwarf2out.c:static GTY(()) section *debug_frame_section;
dwarf2out.c:/* True if the compilation unit places functions in more than one section.  */
dwarf2out.c:static GTY(()) bool have_multiple_function_sections = false;
dwarf2out.c:/* Whether the default text and cold text sections have been used at all.  */
dwarf2out.c:static GTY(()) bool text_section_used = false;
dwarf2out.c:static GTY(()) bool cold_text_section_used = false;
dwarf2out.c:/* The default cold text section.  */
dwarf2out.c:static GTY(()) section *cold_text_section;
dwarf2out.c:static void dwarf2out_note_section_used (void);
dwarf2out.c:/* Return a pointer to a copy of the section string name S with all
dwarf2out.c:/* Switch [BACK] to eh_frame_section.  If we don't have an eh_frame_section,
dwarf2out.c:   switch to the data section instead, and write out a synthetic start label
dwarf2out.c:switch_to_eh_frame_section (bool back)
dwarf2out.c:  if (eh_frame_section == 0)
dwarf2out.c:      eh_frame_section = get_section (EH_FRAME_SECTION_NAME, flags, NULL);
dwarf2out.c:  if (eh_frame_section)
dwarf2out.c:    switch_to_section (eh_frame_section);
dwarf2out.c:      /* We have no special eh_frame section.  Put the information in
dwarf2out.c:	 the data section and emit special labels to guide collect2.  */
dwarf2out.c:      switch_to_section (data_section);
dwarf2out.c:/* Switch [BACK] to the eh or debug frame table section, depending on
dwarf2out.c:switch_to_frame_table_section (int for_eh, bool back)
dwarf2out.c:    switch_to_eh_frame_section (back);
dwarf2out.c:      if (!debug_frame_section)
dwarf2out.c:	debug_frame_section = get_section (DEBUG_FRAME_SECTION,
dwarf2out.c:      switch_to_section (debug_frame_section);
dwarf2out.c:	    char *section_start_label, int fde_encoding, char *augmentation,
dwarf2out.c:    dw2_asm_output_delta (4, l1, section_start_label, "FDE CIE offset");
dwarf2out.c:    dw2_asm_output_offset (DWARF_OFFSET_SIZE, section_start_label,
dwarf2out.c:			   debug_frame_section, "FDE CIE offset");
dwarf2out.c:     cope with -ffunction-sections.  */
dwarf2out.c:  /* Switch to the function section, emit the ref to the tables, and
dwarf2out.c:     switch *back* into the table section.  */
dwarf2out.c:  switch_to_section (function_section (fde->decl));
dwarf2out.c:  ASM_OUTPUT_DWARF_TABLE_REF (section_start_label);
dwarf2out.c:  switch_to_frame_table_section (for_eh, true);
dwarf2out.c:  char l1[20], l2[20], section_start_label[20];
dwarf2out.c:  /* Switch to the proper frame section, first time.  */
dwarf2out.c:  switch_to_frame_table_section (for_eh, false);
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (section_start_label, FRAME_BEGIN_LABEL, for_eh);
dwarf2out.c:  ASM_OUTPUT_LABEL (asm_out_file, section_start_label);
dwarf2out.c:		augmentation section.
dwarf2out.c:	output_fde (fde, for_eh, k, section_start_label, fde_encoding,
dwarf2out.c:  section *fnsec;
dwarf2out.c:  fnsec = function_section (current_function_decl);
dwarf2out.c:  switch_to_section (fnsec);
dwarf2out.c:  fde->in_std_section = (fnsec == text_section
dwarf2out.c:			 || (cold_text_section && fnsec == cold_text_section));
dwarf2out.c:/* Note that the current function section is being used for code.  */
dwarf2out.c:dwarf2out_note_section_used (void)
dwarf2out.c:  section *sec = current_function_section ();
dwarf2out.c:  if (sec == text_section)
dwarf2out.c:    text_section_used = true;
dwarf2out.c:  else if (sec == cold_text_section)
dwarf2out.c:    cold_text_section_used = true;
dwarf2out.c:static void var_location_switch_text_section (void);
dwarf2out.c:static void set_cur_line_info_table (section *);
dwarf2out.c:dwarf2out_switch_text_section (void)
dwarf2out.c:  section *sect;
dwarf2out.c:  if (!in_cold_section_p)
dwarf2out.c:      fde->dw_fde_end = crtl->subsections.cold_section_end_label;
dwarf2out.c:      fde->dw_fde_second_begin = crtl->subsections.hot_section_label;
dwarf2out.c:      fde->dw_fde_second_end = crtl->subsections.hot_section_end_label;
dwarf2out.c:      fde->dw_fde_end = crtl->subsections.hot_section_end_label;
dwarf2out.c:      fde->dw_fde_second_begin = crtl->subsections.cold_section_label;
dwarf2out.c:      fde->dw_fde_second_end = crtl->subsections.cold_section_end_label;
dwarf2out.c:  have_multiple_function_sections = true;
dwarf2out.c:  /* There is no need to mark used sections when not debugging.  */
dwarf2out.c:  if (cold_text_section != NULL)
dwarf2out.c:    dwarf2out_note_section_used ();
dwarf2out.c:  /* Now do the real section switch.  */
dwarf2out.c:  sect = current_function_section ();
dwarf2out.c:  switch_to_section (sect);
dwarf2out.c:  fde->second_in_std_section
dwarf2out.c:    = (sect == text_section
dwarf2out.c:       || (cold_text_section && sect == cold_text_section));
dwarf2out.c:  var_location_switch_text_section ();
dwarf2out.c:  if (cold_text_section != NULL)
dwarf2out.c:/* Describe an entry into the .debug_addr section.  */
dwarf2out.c:  const char *section; /* Section this loclist is relative to */
dwarf2out.c:	dw2_asm_output_offset (DWARF_REF_SIZE, label, debug_info_section, NULL);
dwarf2out.c:  dwarf2out_switch_text_section,
dwarf2out.c:/* Whether to put type DIEs into their own section .debug_types instead
dwarf2out.c:   of making them part of the .debug_info section.  Only supported for
dwarf2out.c:   -fno-debug-types-section.  It is more efficient to put them in a
dwarf2out.c:   separate comdat sections since the linker will then be able to
dwarf2out.c:   remove duplicates.  But not all tools support .debug_types sections
dwarf2out.c:#define use_debug_types (dwarf_version >= 4 && flag_debug_types_section)
dwarf2out.c:   .debug_info section to refer to each other.  */
dwarf2out.c:   are collected per section when DWARF2_ASM_LINE_DEBUG_INFO is not
dwarf2out.c:  /* The label that marks the end of this section.  */
dwarf2out.c:   the offset of each DIE within the .debug_info section.  */
dwarf2out.c:/* A list of type DIEs that have been separated into comdat sections.  */
dwarf2out.c:  /* Pointer to the last element before section switch,
dwarf2out.c:     if NULL, either sections weren't switched or first
dwarf2out.c:     is after section switch.  */
dwarf2out.c:static GTY(()) dw_line_info_table *text_section_line_info;
dwarf2out.c:static GTY(()) dw_line_info_table *cold_text_section_line_info;
dwarf2out.c:/* A flag to tell pubnames/types export if there is an info section to
dwarf2out.c:static bool info_section_emitted;
dwarf2out.c:/* True if .debug_macinfo or .debug_macros section is going to be
dwarf2out.c:static void compute_section_prefix (dw_die_ref);
dwarf2out.c:static void output_abbrev_section (void);
dwarf2out.c:  ((debug_generate_pub_sections == 2) \
dwarf2out.c:  ((debug_generate_pub_sections == 2) \
dwarf2out.c:/* Standard ELF section names for compiled code and data.  */
dwarf2out.c:/* Section flags for .debug_macinfo/.debug_macro section.  */
dwarf2out.c:/* Section flags for .debug_str section.  */
dwarf2out.c:/* Section flags for .debug_str.dwo section.  */
dwarf2out.c:/* Labels we insert at beginning sections we can reference instead of
dwarf2out.c:   the section names themselves.  */
dwarf2out.c:static char text_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char cold_text_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char abbrev_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char debug_info_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char debug_skeleton_info_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char debug_skeleton_abbrev_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char debug_line_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char debug_addr_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char debug_skeleton_line_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char macinfo_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char loc_section_label[MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:static char ranges_section_label[2 * MAX_ARTIFICIAL_LABEL_BYTES];
dwarf2out.c:/* Set label to debug_info_section_label + die_offset of a DIE reference.  */
dwarf2out.c:  sprintf (label, "%s+%ld", debug_info_section_label, ref->die_offset);
dwarf2out.c:   or out-of-line in .debug_str section.  */
dwarf2out.c:     section, only put it into .debug_str if it is worth even in this
dwarf2out.c:      || ((debug_str_section->common.flags & SECTION_MERGE) == 0
dwarf2out.c:   output inline in DIE or out-of-line in .debug_str section.  */
dwarf2out.c:/* Table of entries into the .debug_addr section.  */
dwarf2out.c:/* Add a section offset attribute value to a DIE, an offset into the
dwarf2out.c:   debug_line section.  */
dwarf2out.c:/* Add a section offset attribute value to a DIE, an offset into the
dwarf2out.c:   debug_macinfo section.  */
dwarf2out.c:   info section.  */
dwarf2out.c:compute_section_prefix (dw_die_ref unit_die)
dwarf2out.c:      compute_section_prefix (node->die);
dwarf2out.c:   COMDAT .debug_types section.  */
dwarf2out.c:/* Traverse the DIE and set up additional .debug_types sections for each
dwarf2out.c:   type worthy of being placed in a COMDAT section.  */
dwarf2out.c:/* Copy declarations for "unworthy" types into the new comdat section.
dwarf2out.c:   out into comdat sections of their own, so they don't have a signature,
dwarf2out.c:   and we need to copy the declaration into the same section so that we
dwarf2out.c:   .debug_info section.  */
dwarf2out.c:  if (debug_generate_pub_sections == 2 && is_declaration_die (p->die))
dwarf2out.c:  int space_for_flags = (debug_generate_pub_sections == 2) ? 1 : 0;
dwarf2out.c:/* Return the size of the information in the .debug_aranges section.  */
dwarf2out.c:  if (text_section_used)
dwarf2out.c:  if (cold_text_section_used)
dwarf2out.c:  if (have_multiple_function_sections)
dwarf2out.c:	  if (!fde->in_std_section)
dwarf2out.c:	  if (fde->dw_fde_second_begin && !fde->second_in_std_section)
dwarf2out.c:/* Output the .debug_abbrev section which defines the DIE abbreviation
dwarf2out.c:output_abbrev_section (void)
dwarf2out.c:       .linkonce, it doesn't support combining the sections, so debugging
dwarf2out.c:	      const char *section)
dwarf2out.c:  retlist->section = section;
dwarf2out.c:      else if (!have_multiple_function_sections)
dwarf2out.c:	  dw2_asm_output_delta (DWARF2_ADDR_SIZE, curr->begin, curr->section,
dwarf2out.c:	  dw2_asm_output_delta (DWARF2_ADDR_SIZE, curr->end, curr->section,
dwarf2out.c:/* Output a range_list offset into the debug_range section.  Emit a
dwarf2out.c:      char *p = strchr (ranges_section_label, '\0');
dwarf2out.c:      dw2_asm_output_offset (DWARF_OFFSET_SIZE, ranges_section_label,
dwarf2out.c:                             debug_ranges_section, "%s", name);
dwarf2out.c:                         "%s (offset from %s)", name, ranges_section_label);
dwarf2out.c:/* Output the offset into the debug_loc section.  */
dwarf2out.c:    dw2_asm_output_delta (DWARF_OFFSET_SIZE, sym, loc_section_label,
dwarf2out.c:    dw2_asm_output_offset (DWARF_OFFSET_SIZE, sym, debug_loc_section,
dwarf2out.c:		  dw2_asm_output_offset (size, sym, debug_info_section, "%s",
dwarf2out.c:	    dw2_asm_output_offset (DWARF_OFFSET_SIZE, l1, debug_frame_section,
dwarf2out.c:				 debug_line_section, "%s", name);
dwarf2out.c:				 debug_macinfo_section, "%s", name);
dwarf2out.c:                                   debug_str_section,
dwarf2out.c:   .debug_info section, and precedes the DIE descriptions.  */
dwarf2out.c:  dw2_asm_output_offset (DWARF_OFFSET_SIZE, abbrev_section_label,
dwarf2out.c:			 debug_abbrev_section,
dwarf2out.c:     will generate a present, but empty, .debug_info section.  IRIX 6.5 `nm'
dwarf2out.c:      switch_to_section (get_section (secname, SECTION_DEBUG, NULL));
dwarf2out.c:      switch_to_section (debug_info_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, debug_info_section_label);
dwarf2out.c:      info_section_emitted = true;
dwarf2out.c:  if (debug_generate_pub_sections != -1)
dwarf2out.c:    return debug_generate_pub_sections;
dwarf2out.c:  return targetm.want_debug_pub_sections;
dwarf2out.c:  add_AT_lineptr (die, DW_AT_GNU_addr_base, debug_addr_section_label);
dwarf2out.c:  /* For dwarf_split_debug_sections with use_type info, all type units in the
dwarf2out.c:     skeleton sections have identical dies (but different headers).  This
dwarf2out.c:/* Output skeleton debug sections that point to the dwo file.  */
dwarf2out.c:output_skeleton_debug_sections (dw_die_ref comp_unit)
dwarf2out.c:  /* These attributes will be found in the full debug_info section.  */
dwarf2out.c:  switch_to_section (debug_skeleton_info_section);
dwarf2out.c:  ASM_OUTPUT_LABEL (asm_out_file, debug_skeleton_info_section_label);
dwarf2out.c:  dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_abbrev_section_label,
dwarf2out.c:                         debug_abbrev_section,
dwarf2out.c:  /* Build the skeleton debug_abbrev section.  */
dwarf2out.c:  switch_to_section (debug_skeleton_abbrev_section);
dwarf2out.c:  ASM_OUTPUT_LABEL (asm_out_file, debug_skeleton_abbrev_section_label);
dwarf2out.c:  targetm.asm_out.named_section (secname,
dwarf2out.c:  switch_to_section (get_section (secname, SECTION_DEBUG, NULL));
dwarf2out.c:      targetm.asm_out.named_section (secname,
dwarf2out.c:                             debug_skeleton_abbrev_section_label,
dwarf2out.c:                             debug_abbrev_section,
dwarf2out.c:/* Add an enumerator to the pubnames section.  */
dwarf2out.c:  if (debug_generate_pub_sections == 2)
dwarf2out.c:    dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_info_section_label,
dwarf2out.c:                           debug_skeleton_info_section,
dwarf2out.c:    dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_info_section_label,
dwarf2out.c:                           debug_info_section,
dwarf2out.c:	  /* If we're putting types in their own .debug_types sections,
dwarf2out.c:  if (!want_pubnames () || !info_section_emitted)
dwarf2out.c:  switch_to_section (debug_pubnames_section);
dwarf2out.c:     simply won't look for the section.  */
dwarf2out.c:  switch_to_section (debug_pubtypes_section);
dwarf2out.c:   text section generated for this compilation unit.  */
dwarf2out.c:    dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_info_section_label,
dwarf2out.c:                           debug_skeleton_info_section,
dwarf2out.c:    dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_info_section_label,
dwarf2out.c:                           debug_info_section,
dwarf2out.c:  /* It is necessary not to output these entries if the sections were
dwarf2out.c:     not used; if the sections were not used, the length will be 0 and
dwarf2out.c:     the address may end up as 0 if the section is discarded by ld
dwarf2out.c:     --gc-sections, leaving an invalid (0, 0) entry that can be
dwarf2out.c:  if (text_section_used)
dwarf2out.c:      dw2_asm_output_addr (DWARF2_ADDR_SIZE, text_section_label, "Address");
dwarf2out.c:			    text_section_label, "Length");
dwarf2out.c:  if (cold_text_section_used)
dwarf2out.c:      dw2_asm_output_addr (DWARF2_ADDR_SIZE, cold_text_section_label,
dwarf2out.c:			    cold_text_section_label, "Length");
dwarf2out.c:  if (have_multiple_function_sections)
dwarf2out.c:	  if (!fde->in_std_section)
dwarf2out.c:	  if (fde->dw_fde_second_begin && !fde->second_in_std_section)
dwarf2out.c:	  /* If all code is in the text section, then the compilation
dwarf2out.c:	     base of the text section.  */
dwarf2out.c:	  if (!have_multiple_function_sections)
dwarf2out.c:				    text_section_label,
dwarf2out.c:				    text_section_label, NULL);
dwarf2out.c:	     about whether the target supports cross-section
dwarf2out.c:	  if (!have_multiple_function_sections)
dwarf2out.c:		 function section, all we have to do is to take out
dwarf2out.c:				    text_section_label,
dwarf2out.c:				    text_section_label, NULL);
dwarf2out.c:/* Output one line number table into the .debug_line section.  */
dwarf2out.c:   information goes into the .debug_line section.  */
dwarf2out.c:  if (cold_text_section_line_info && cold_text_section_line_info->in_use)
dwarf2out.c:      output_one_line_info_table (cold_text_section_line_info);
dwarf2out.c:  /* ??? Some Darwin linkers crash on a .debug_line section with no
dwarf2out.c:     choosing .text since that section is always present.  */
dwarf2out.c:  if (text_section_line_info->in_use || !saw_one)
dwarf2out.c:    output_one_line_info_table (text_section_line_info);
dwarf2out.c:   .debug_loc section where DW_OP_stack_value and DW_OP_implicit_value are
dwarf2out.c:/* We need to figure out what section we should use as the base for the
dwarf2out.c:   1. If this particular DECL has a section associated with it, use that.
dwarf2out.c:   2. If this function has a section associated with it, use that.
dwarf2out.c:   3. Otherwise, use the text section.
dwarf2out.c:   XXX: If you split a variable across multiple sections, we won't notice.  */
dwarf2out.c:  else if (cfun && in_cold_section_p)
dwarf2out.c:    secname = crtl->subsections.cold_section_label;
dwarf2out.c:    secname = text_section_label;
dwarf2out.c:  /* Now that we know what section we are using for a base,
dwarf2out.c:	    /* If section switch happens in between node->label
dwarf2out.c:  const char *start_label, *last_label, *section;
dwarf2out.c:  section = secname_for_decl (current_function_decl);
dwarf2out.c:				 fde->dw_fde_begin, fde->dw_fde_end, section);
dwarf2out.c:					 start_label, last_label, section);
dwarf2out.c:					 start_label, last_label, section);
dwarf2out.c:				     start_label, fde->dw_fde_end, section);
dwarf2out.c:				 start_label, last_label, section);
dwarf2out.c:			     section);
dwarf2out.c:		  /* We should use ranges for non-contiguous code section 
dwarf2out.c:		     section, since the HOT/COLD labels might precede an 
dwarf2out.c:		     sections when given "b foo".  */
dwarf2out.c:		  /* Do the 'primary' section.   */
dwarf2out.c:		  /* Build a minimal DIE for the secondary section.  */
dwarf2out.c:	 order to save space in the .debug section (by eliminating entries
dwarf2out.c:  switch_to_section (current_function_section ());
dwarf2out.c:  switch_to_section (current_function_section ());
dwarf2out.c:   section) and references to those files numbers (in the .debug_srcinfo
dwarf2out.c:   and.debug_macinfo sections).  If the filename given as an argument is not
dwarf2out.c:  static bool last_in_cold_section_p;
dwarf2out.c:      || last_in_cold_section_p != in_cold_section_p)
dwarf2out.c:      if (!have_multiple_function_sections
dwarf2out.c:  last_in_cold_section_p = in_cold_section_p;
dwarf2out.c:/* Note in one location list that text section has changed.  */
dwarf2out.c:var_location_switch_text_section_1 (void **slot, void *data ATTRIBUTE_UNUSED)
dwarf2out.c:/* Note in all location lists that text section has changed.  */
dwarf2out.c:var_location_switch_text_section (void)
dwarf2out.c:  htab_traverse (decl_loc_table, var_location_switch_text_section_1, NULL);
dwarf2out.c:set_cur_line_info_table (section *sec)
dwarf2out.c:  if (sec == text_section)
dwarf2out.c:    table = text_section_line_info;
dwarf2out.c:  else if (sec == cold_text_section)
dwarf2out.c:      table = cold_text_section_line_info;
dwarf2out.c:	  cold_text_section_line_info = table = new_line_info_table ();
dwarf2out.c:	  if (in_cold_section_p)
dwarf2out.c:	    end_label = crtl->subsections.cold_section_end_label;
dwarf2out.c:	    end_label = crtl->subsections.hot_section_end_label;
dwarf2out.c:   that hook is called.  Also compute have_multiple_function_sections here.  */
dwarf2out.c:  section *sec = function_section (fun);
dwarf2out.c:  if (sec != text_section)
dwarf2out.c:    have_multiple_function_sections = true;
dwarf2out.c:  if (flag_reorder_blocks_and_partition && !cold_text_section)
dwarf2out.c:      cold_text_section = unlikely_text_section ();
dwarf2out.c:      switch_to_section (cold_text_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, cold_text_section_label);
dwarf2out.c:      switch_to_section (sec);
dwarf2out.c:  dwarf2out_note_section_used ();
dwarf2out.c:   Set have_multiple_function_sections to true in that case and
dwarf2out.c:	      have_multiple_function_sections = true;
dwarf2out.c:      && !have_multiple_function_sections
dwarf2out.c:   'line_info_table' for later output of the .debug_line section.  */
dwarf2out.c:  switch_to_section (current_function_section ());
dwarf2out.c:	  && (debug_str_section->common.flags & SECTION_MERGE) != 0)
dwarf2out.c:                               debug_str_section, "The macro: \"%s\"",
dwarf2out.c:   other compilation unit .debug_macinfo sections.  IDX is the first
dwarf2out.c:   emitted in a comdat .debug_macinfo section and emit
dwarf2out.c:                && (debug_str_section->common.flags & SECTION_MERGE) != 0)
dwarf2out.c:/* Output macinfo section(s).  */
dwarf2out.c:  /* For .debug_macro emit the section header.  */
dwarf2out.c:                             (!dwarf_split_debug_info ? debug_line_section_label
dwarf2out.c:                              : debug_skeleton_line_section_label),
dwarf2out.c:                             debug_line_section, NULL);
dwarf2out.c:  /* In the first loop, it emits the primary .debug_macinfo section
dwarf2out.c:     section and emit the define/undef entries within it.  */
dwarf2out.c:	  /* Terminate the previous .debug_macinfo section.  */
dwarf2out.c:	  targetm.asm_out.named_section (DEBUG_MACRO_SECTION,
dwarf2out.c:      debug_info_section = get_section (DEBUG_INFO_SECTION,
dwarf2out.c:      debug_abbrev_section = get_section (DEBUG_ABBREV_SECTION,
dwarf2out.c:      debug_loc_section = get_section (DEBUG_LOC_SECTION,
dwarf2out.c:      debug_info_section = get_section (DEBUG_DWO_INFO_SECTION,
dwarf2out.c:      debug_abbrev_section = get_section (DEBUG_DWO_ABBREV_SECTION,
dwarf2out.c:      debug_addr_section = get_section (DEBUG_ADDR_SECTION,
dwarf2out.c:      debug_skeleton_info_section = get_section (DEBUG_INFO_SECTION,
dwarf2out.c:      debug_skeleton_abbrev_section = get_section (DEBUG_ABBREV_SECTION,
dwarf2out.c:      ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_abbrev_section_label,
dwarf2out.c:      /* Somewhat confusing detail: The skeleton_[abbrev|info] sections stay in
dwarf2out.c:      debug_skeleton_line_section
dwarf2out.c:          = get_section (DEBUG_DWO_LINE_SECTION,
dwarf2out.c:      ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_line_section_label,
dwarf2out.c:      debug_str_offsets_section = get_section (DEBUG_STR_OFFSETS_SECTION,
dwarf2out.c:      ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_info_section_label,
dwarf2out.c:      debug_loc_section = get_section (DEBUG_DWO_LOC_SECTION,
dwarf2out.c:      debug_str_dwo_section = get_section (DEBUG_STR_DWO_SECTION,
dwarf2out.c:  debug_aranges_section = get_section (DEBUG_ARANGES_SECTION,
dwarf2out.c:  debug_macinfo_section = get_section (dwarf_strict
dwarf2out.c:  debug_line_section = get_section (DEBUG_LINE_SECTION,
dwarf2out.c:  debug_pubnames_section = get_section (DEBUG_PUBNAMES_SECTION,
dwarf2out.c:  debug_pubtypes_section = get_section (DEBUG_PUBTYPES_SECTION,
dwarf2out.c:  debug_str_section = get_section (DEBUG_STR_SECTION,
dwarf2out.c:  debug_ranges_section = get_section (DEBUG_RANGES_SECTION,
dwarf2out.c:  debug_frame_section = get_section (DEBUG_FRAME_SECTION,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (abbrev_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (text_section_label, TEXT_SECTION_LABEL, 0);
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (cold_text_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (debug_info_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (ranges_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (debug_addr_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (macinfo_section_label,
dwarf2out.c:  ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL, 0);
dwarf2out.c:  switch_to_section (text_section);
dwarf2out.c:  ASM_OUTPUT_LABEL (asm_out_file, text_section_label);
dwarf2out.c:  text_section_line_info = new_line_info_table ();
dwarf2out.c:  text_section_line_info->end_label = text_end_label;
dwarf2out.c:    fprintf (asm_out_file, "\t.cfi_sections\t.debug_frame\n");
dwarf2out.c:  switch_to_section (debug_str_section);
dwarf2out.c:      switch_to_section (debug_str_offsets_section);
dwarf2out.c:      switch_to_section (debug_str_dwo_section);
dwarf2out.c:   table, and to write that entry to the .debug_addr section.  */
dwarf2out.c:/* Produce the .debug_addr section.  */
dwarf2out.c:  switch_to_section (debug_addr_section);
dwarf2out.c:	 breaking out types into comdat sections, do this
dwarf2out.c:   an address in .rodata section if the string literal is emitted there,
dwarf2out.c:   section.  */
dwarf2out.c:      if (curr->section)
dwarf2out.c:	hash = iterative_hash (curr->section, strlen (curr->section) + 1,
dwarf2out.c:	|| (a->section == NULL) != (b->section == NULL)
dwarf2out.c:	|| (a->section && strcmp (a->section, b->section) != 0)
dwarf2out.c:   section.  */
dwarf2out.c:  /* Generate separate COMDAT sections for type DIEs. */
dwarf2out.c:  /* Output a terminator label for the .text section.  */
dwarf2out.c:  switch_to_section (text_section);
dwarf2out.c:  if (cold_text_section)
dwarf2out.c:      switch_to_section (cold_text_section);
dwarf2out.c:  if (!have_multiple_function_sections 
dwarf2out.c:      if (text_section_used)
dwarf2out.c:        add_AT_low_high_pc (main_comp_unit_die, text_section_label,
dwarf2out.c:      if (text_section_used)
dwarf2out.c:        add_ranges_by_labels (main_comp_unit_die, text_section_label,
dwarf2out.c:      if (cold_text_section_used)
dwarf2out.c:        add_ranges_by_labels (main_comp_unit_die, cold_text_section_label,
dwarf2out.c:	  if (!fde->in_std_section)
dwarf2out.c:	  if (fde->dw_fde_second_begin && !fde->second_in_std_section)
dwarf2out.c:		    debug_line_section_label);
dwarf2out.c:		   macinfo_section_label);
dwarf2out.c:                         ? debug_line_section_label
dwarf2out.c:                         : debug_skeleton_line_section_label));
dwarf2out.c:                        ranges_section_label);
dwarf2out.c:      switch_to_section (debug_addr_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, debug_addr_section_label);
dwarf2out.c:  if (dwarf_split_debug_info && info_section_emitted)
dwarf2out.c:    output_skeleton_debug_sections (main_comp_unit_die);
dwarf2out.c:      switch_to_section (debug_abbrev_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, abbrev_section_label);
dwarf2out.c:      output_abbrev_section ();
dwarf2out.c:  /* Output location list section if necessary.  */
dwarf2out.c:      switch_to_section (debug_loc_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);
dwarf2out.c:  /* Output the address range information if a CU (.debug_info section)
dwarf2out.c:  if (info_section_emitted)
dwarf2out.c:      switch_to_section (debug_aranges_section);
dwarf2out.c:  /* Output ranges section if necessary.  */
dwarf2out.c:      switch_to_section (debug_ranges_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, ranges_section_label);
dwarf2out.c:  /* Have to end the macro section.  */
dwarf2out.c:      switch_to_section (debug_macinfo_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, macinfo_section_label);
dwarf2out.c:     .debug_info section.  IRIX 6.5 `nm' will then complain when
dwarf2out.c:     used by the debug_info section are marked as 'used'.  */
dwarf2out.c:  switch_to_section (debug_line_section);
dwarf2out.c:  ASM_OUTPUT_LABEL (asm_out_file, debug_line_section_label);
dwarf2out.c:  if (dwarf_split_debug_info && info_section_emitted)
dwarf2out.c:      switch_to_section (debug_skeleton_line_section);
dwarf2out.c:      ASM_OUTPUT_LABEL (asm_out_file, debug_skeleton_line_section_label);
dwarf2out.h:   the beginning of the .debug_frame section.  This use of a single
dwarf2out.h:  int dw_fde_switch_cfi_index; /* Last CFI before switching sections.  */
dwarf2out.h:  /* True iff dw_fde_begin label is in text_section or cold_text_section.  */
dwarf2out.h:  unsigned in_std_section : 1;
dwarf2out.h:  /* True iff dw_fde_second_begin label is in text_section or
dwarf2out.h:     cold_text_section.  */
dwarf2out.h:  unsigned second_in_std_section : 1;
except.c:/* This section handles removing dead code for flow.  */
except.c:add_call_site (rtx landing_pad, int action, int section)
except.c:  vec_safe_push (crtl->eh.call_site_record_v[section], record);
except.c:  return call_site_base + crtl->eh.call_site_record_v[section]->length () - 1;
except.c:  rtx section_switch_note = NULL_RTX;
except.c:	    /* If there is a queued no-action region in the other section
except.c:	gcc_assert (section_switch_note == NULL_RTX);
except.c:	section_switch_note = iter;
except.c:	/* Force closing of current EH region before section switch and
except.c:dw2_size_of_call_site_table (int section)
except.c:  int n = vec_safe_length (crtl->eh.call_site_record_v[section]);
except.c:	(*crtl->eh.call_site_record_v[section])[i];
except.c:dw2_output_call_site_table (int cs_format, int section)
except.c:  int n = vec_safe_length (crtl->eh.call_site_record_v[section]);
except.c:  if (section == 0)
except.c:    begin = crtl->subsections.hot_section_label;
except.c:    begin = crtl->subsections.cold_section_label;
except.c:      struct call_site_record_d *cs = (*crtl->eh.call_site_record_v[section])[i];
except.c:/* Switch to the section that should be used for exception tables.  */
except.c:switch_to_exception_section (const char * ARG_UNUSED (fnname))
except.c:  section *s;
except.c:  if (exception_section)
except.c:    s = exception_section;
except.c:      /* Compute the section and cache it into exception_section,
except.c:      if (targetm_common.have_named_sections)
except.c:	  if (flag_function_sections
except.c:	      char *section_name = XNEWVEC (char, strlen (fnname) + 32);
except.c:	      /* The EH table must match the code section, so only mark
except.c:	      sprintf (section_name, ".gcc_except_table.%s", fnname);
except.c:	      s = get_section (section_name, flags, current_function_decl);
except.c:	      free (section_name);
except.c:	    exception_section
except.c:	      = s = get_section (".gcc_except_table", flags, NULL);
except.c:	exception_section
except.c:	  = s = flag_pic ? data_section : readonly_data_section;
except.c:  switch_to_section (s);
except.c:output_one_function_exception_table (int section)
except.c:				   section ? "LLSDATTC" : "LLSDATT",
except.c:  targetm.asm_out.internal_label (asm_out_file, section ? "LLSDAC" : "LLSDA",
except.c:     line to another section, but it could also be used to minimize
except.c:    call_site_len = dw2_size_of_call_site_table (section);
except.c:				   section ? "LLSDATTDC" : "LLSDATTD",
except.c:			       section ? "LLSDACSBC" : "LLSDACSB",
except.c:			       section ? "LLSDACSEC" : "LLSDACSE",
except.c:    dw2_output_call_site_table (cs_format, section);
except.c:    dw2_output_call_site_table (cs_format, section);
except.c:  switch_to_exception_section (fnname);
except.c:  switch_to_section (current_function_section ());
explow.c:  if (!flag_section_anchors)
explow.c:  base = get_section_anchor (SYMBOL_REF_BLOCK (base), offset,
expr.c:     are the flags assigned by targetm.encode_section_info.  */
final.c:default_function_switched_text_sections (FILE *file ATTRIBUTE_UNUSED,
final.c:	     section.  */
final.c:	       || readonly_data_section == text_section)
final.c:	     section.  */
final.c:	      || readonly_data_section == text_section)
final.c:		   || readonly_data_section == text_section)
final.c:		  || readonly_data_section == text_section)
final.c:      /* Prevent lexical blocks from straddling section boundaries.  */
final.c:      switch_to_section (data_section);
final.c:  switch_to_section (current_function_section ());
final.c:	  in_cold_section_p = !in_cold_section_p;
final.c:	    dwarf2out_switch_text_section ();
final.c:	    debug_hooks->switch_text_section ();
final.c:	  switch_to_section (current_function_section ());
final.c:	  targetm.asm_out.function_switched_text_sections (asm_out_file,
final.c:							   in_cold_section_p);
final.c:	  /* Emit a label for the split cold section.  Form label name by
final.c:	  if (in_cold_section_p)
final.c:	 the label in the read-only section.  Also possibly write the
final.c:	      switch_to_section (targetm.asm_out.function_rodata_section
final.c:	    switch_to_section (current_function_section ());
final.c:	      switch_to_section (targetm.asm_out.function_rodata_section
final.c:	      switch_to_section (current_function_section ());
final.c:	    switch_to_section (current_function_section ());
final.c:  user_defined_section_attribute = false;
FSFChangeLog:	* varasm.c (assemble_variable): Never put decl with specified section
FSFChangeLog:	* dwarf2out.c: Don't assume `.section ".text"' causes assembler to
FSFChangeLog:	treat .text as label for start of section; instead, output
FSFChangeLog:	`.section ".text"; .LLtext0:' and use .LLtext0 in label contexts.
FSFChangeLog:	(dw_val_node): Rename val_section to val_section_label, as it's
FSFChangeLog:	now a label, not a section.
FSFChangeLog:	(add_AT_section_offset): Arg is now a label, not a section.
FSFChangeLog:	(print_die): In label contexts, output section label, not section.
FSFChangeLog:	* crtstuff.c (__do_global_ctors_aux): Switch back to text section
FSFChangeLog.10:	* rs6000/win-nt.h (EXTRA_SECTION_FUNCTIONS): Add ctors_section and
FSFChangeLog.10:	dtors_section.
FSFChangeLog.10:	the constructor/destructor in the appropriate section.
FSFChangeLog.10:	(*_SECTION_ASM_OP): Change tab after .section into a space.
FSFChangeLog.10:	(ASM_OUTPUT_ALIGNED_LOCAL): Rewrite to use bss_section.
FSFChangeLog.10:	* varasm.c (enum in_section): Define in_bss if BSS_SECTION_ASM_OP
FSFChangeLog.10:	(bss_section,asm_output_bss,asm_output_aligned_bss): New functions.
FSFChangeLog.10:	(EXTRA_SECTION_FUNCTIONS): Delete bss_section.
FSFChangeLog.10:	(EXTRA_SECTION_FUNCTIONS): Delete bss_section.
FSFChangeLog.10:	* arm.c (aof_text_section): Remove pseudo read-only hack.  Doesn't
FSFChangeLog.10:	readonly data sections.
FSFChangeLog.10:	* arm.md (consttable_end): Delete call to text_section.
FSFChangeLog.10:	(align_4): Delete call to readonly_data_section.
FSFChangeLog.10:	* rs6000.h (ASM_OUTPUT_EXTERNAL): Append section info
FSFChangeLog.10:	read-only section, not read-write.
FSFChangeLog.10:	(rs6000_select{,_rtx}_section): Don't put floating point constants
FSFChangeLog.10:	(READONLY_DATA_SECTION): Make text_section.
FSFChangeLog.10:	(rs6000_select{,_rtx}_section): New functions to determine whether
FSFChangeLog.10:	eabi defined small data sections.
FSFChangeLog.10:	sections.
FSFChangeLog.10:	(SELECT{,_RTX}_SECTION): Call (rs6000_select{,_rtx}_section).
FSFChangeLog.10:	from the .got section to the .sdata section.  Do not add 32768.
FSFChangeLog.10:	* rs6000/eabi-cn.asm (.got.blrl): Don't define this section any
FSFChangeLog.10:	* config/svr4.h (ASM_OUTPUT_SECTION_NAME): Define section attributes
FSFChangeLog.10:	only when a section is defined the first time.
FSFChangeLog.10:	Simplify pragma processing.  Delete support for `#pragma section'.
FSFChangeLog.10:	and "stabstr" sections.
FSFChangeLog.10:	* rs6000/eabi-c{i,n}.asm (.sbss2 section): Don't make .sbss2 a
FSFChangeLog.10:	.bss section just yet, because it confused the linker.
FSFChangeLog.10:	* varasm.c (in_data_section): New function.
FSFChangeLog.10:	eabi .sbss2/.sdata2 sections, loading up r13 and r2 respectively
FSFChangeLog.10:	if the sections were used, and we don't need to relocate the
FSFChangeLog.10:	* varasm.c (variable_section): New function.
FSFChangeLog.10:	for all special sections used by eabi as opposed to relying on GLD
FSFChangeLog.10:	sections are contiguous.
FSFChangeLog.10:	* pa.h (DBX_OUTPUT_MAIN_SOURCE_FILE_END): Call text_section.
FSFChangeLog.10:	exception table section.
FSFChangeLog.10:	on the section name.
FSFChangeLog.10:	* pa.h (ASM_OUTPUT_FUNCTION_PREFIX): Don't surround section names
FSFChangeLog.10:	(aof_text_section, aof_add_import, aof_delete_import,
FSFChangeLog.10:	* pa.h (ASM_OUTPUT_FUNCTION_PREFIX): Handle arbitrary sections.
FSFChangeLog.10:	(toc_section): Skip leading '*'.
FSFChangeLog.10:	(toc_section): Add support for -mcall-{nt,aixdesc}.
FSFChangeLog.10:	(toc_section): Eliminate use of AIX style full TOC.
FSFChangeLog.10:	we don't put the minimal toc pointer in the global toc section.
FSFChangeLog.10:	* pa.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Make sure to encode section
FSFChangeLog.10:	(output_function_epilogue): Align the data section before
FSFChangeLog.10:	* sdbout.c (sdbout_one_type): Don't switch to text section if
FSFChangeLog.10:	in function with section attribute.
FSFChangeLog.10:        (SELECT_RTX_SECTION) Put relocatable pic constants in data section
FSFChangeLog.10:	* config/svr4.h (ASM_OUTPUT_SECTION_NAME): Make the section
FSFChangeLog.10:	* varasm.c (make_decl_rtl): Allow section attribute if -fno-common
FSFChangeLog.10:	(mips_select_rtx_section, mips_select_section): Change rdata_section
FSFChangeLog.10:	to READONLY_DATA_SECTION and sdata_section to SMALL_DATA_SECTION.
FSFChangeLog.10:	* mips.c (mips_select_section): Apply constant DEC_INITIAL tests
FSFChangeLog.10:	section.  Jump to the __do_global_ctors function at the end of
FSFChangeLog.10:	(ASM_OUTPUT_COMMON): Call check_section.
FSFChangeLog.10:	into the .got2 section, which allows eabi.asm to be assembled with
FSFChangeLog.11:	FORCE_INIT_SECTION_ALIGN and go back to text section.
FSFChangeLog.11:	* libgcc2.c (_eh_compat): New section.
FSFChangeLog.11:	(EXTRA_SECTION_FUNCTIONS): Add literals_section.
FSFChangeLog.11:	* crtstuff.c: Wrap .eh_frame section, use EH_FRAME_SECTION_ASM_OP, 
FSFChangeLog.11:	* varasm.c (eh_frame_section): New fn if EH_FRAME_SECTION_ASM_OP.
FSFChangeLog.11:	* varasm.c (named_section): Set in section after writing directive.
FSFChangeLog.11:	* dwarf2out.c (output_call_frame_info): Call named_section.
FSFChangeLog.11:	* varasm.c (exception_section): Check EXCEPTION_SECTION first.
FSFChangeLog.11:	* arm/aof.h (COMMON_SECTION): New macro, define common_section.
FSFChangeLog.11:	(ASM_OUTPUT_COMMON): Call common_section() to indicate we've
FSFChangeLog.11:	variables in user specified sections unless they're .sbss/.sdata.
FSFChangeLog.11:	(toc_section): Make toc_initialized a global.
FSFChangeLog.11:	(toc_section): Make toc_initialized a global.
FSFChangeLog.11:	data section.
FSFChangeLog.11:	section after outputting constant pool.
FSFChangeLog.11:	* final.c (profile_function): Call function_section, not
FSFChangeLog.11:	text_section.
FSFChangeLog.11:	* output.h (named_section): Add reloc argument.
FSFChangeLog.11:	* varasm.c (named_section): Add reloc argument, pass it to
FSFChangeLog.11:	(function_section): Pass reloc argument to named_section.
FSFChangeLog.11:	(variable_section, exception_section): Likewise.
FSFChangeLog.11:	* i386/winnt.c (i386_pe_unique_section): Add reloc arg, 
FSFChangeLog.11:	* i386/winnt.c (i386_pe_unique_section): New fn.
FSFChangeLog.11:	functions that are in their own section, such as template
FSFChangeLog.11:	(ASM_OUTPUT_SECTION_NAME): Support section attribute.
FSFChangeLog.11:	* pa.h (ASM_OUTPUT_SECTION_NAME): Surround the section name
FSFChangeLog.11:	current-section variable to text.
FSFChangeLog.11:	(ASM_OUTPUT_SECTION_NAME): Handle alternate sections for COFF.
FSFChangeLog.11:	The OpenServer 5.0.0 assembler gives an error for section
FSFChangeLog.11:	for exception sections.  The 88k ABI specifies 'section'
FSFChangeLog.11:	instead of '.section'.
FSFChangeLog.11:	(ASM_OUTPUT_ALIGNED_LOCAL): Use sdata_section, not sbss_section.
FSFChangeLog.11:	Allow named sections for uninitialized variables.
FSFChangeLog.11: 	and .debug_aranges sections.
FSFChangeLog.11:	(size_of_aranges): Include function sections.
FSFChangeLog.11:	* varasm.c (bss_section): Delete unused parameters.
FSFChangeLog.11: 	information for functions defined in sections other than .text.
FSFChangeLog.11:	-mrelocatable-lib, don't make read-only sections.
FSFChangeLog.11:	vtable, don't put in the section name, just use the symbol.
FSFChangeLog.11:	* output.h (exception_section): Declare.
FSFChangeLog.11:	* varasm.c (exception_section): Define.
FSFChangeLog.11:	be section name rather than 0.
FSFChangeLog.11:	* varasm.c (function_section): Delete flag_function_sections support.
FSFChangeLog.11:	(rs6000_select_section): Likewise.
FSFChangeLog.11:	(rs6000_encode_section_info): Move here from sysv4.h, section
FSFChangeLog.11:	(h8300_adjust_insn_length): References to the tiny data section
FSFChangeLog.11:	change test from flag_function_sections to DECL_SECTION_NAME != NULL.
FSFChangeLog.11:	* varasm.c (named_section): Accept any decl.
FSFChangeLog.11:	(output_lcomm_directive): Use bss_section (), and use alignment
FSFChangeLog.11: 	make the section read/write data.
FSFChangeLog.11:	(rs6000_select_section): Ditto.
FSFChangeLog.11:	(.got section): Correct attribute.
FSFChangeLog.11:	style .init/.fini sections, that constructors and destructors
FSFChangeLog.11:	place a bl <func> in the appropriate section.
FSFChangeLog.11:	sections.
FSFChangeLog.11:	(EXTRA_SECTIONS): Add .init, .fini sections.
FSFChangeLog.11:	into the read-only data section if it requires a reloc.
FSFChangeLog.11:	* flags.h (flag_function_sections): Declare.
FSFChangeLog.11:	* toplev.c (flag_function_sections): Define.
FSFChangeLog.11:	(compile_file): Add warnings when -ffunction-sections is
FSFChangeLog.11:	used with -g, or profiling.  Disable -ffunction-sections
FSFChangeLog.11:	when profiling is used.  Add warning when -ffunction-sections
FSFChangeLog.11:	* varasm.c (named_section): Make a copy of the section name
FSFChangeLog.11:	(function_section): Set DECL_SECTION_NAME for each function
FSFChangeLog.11:	if flag_function_sections is on and the target supports it.
FSFChangeLog.11:	and flag_function_sections is on.
FSFChangeLog.11:	section's name with ".text%" when -ffunction-sections.
function.c:  decide_function_section (subr);
function.h:struct GTY(()) function_subsections {
function.h:  /* Assembly labels for the hot and cold text sections, to
function.h:     sections.  */
function.h:  const char *hot_section_label;
function.h:  const char *cold_section_label;
function.h:  const char *hot_section_end_label;
function.h:  const char *cold_section_end_label;
function.h:  struct function_subsections subsections;
gcc.c:	    any non-empty unwind section found.
gcov.c:               files.  This outputs a section to a *single* file.  */
gcov-io.h:   themselves, and is similar to the standard section numbering used
gcse.c:	      bitmap_intersection_of_succs (hoist_vbeout[bb->index],
genattrtab.c:/* Return EQ_ATTR_ALT expression representing intersection of S1 and S2.  */
genattrtab.c:attr_alt_intersection (rtx s1, rtx s2)
genattrtab.c:	  exp = attr_alt_intersection (left, right);
gengtype-lex.c: * down here because we want the user's section 1 to have been scanned first.
gengtype-lex.c: * section 1.
gengtype-lex.c:/* Redefine yyless() so it works in section 3 code. */
ggc-page.c:   (Proc. SIGPLAN PLDI, 1994), section 9 (Exact division by
gimple.c:/* Build a GIMPLE_OMP_SECTION statement for a sections statement.
gimple.c:   BODY is the sequence of statements in the section.  */
gimple.c:gimple_build_omp_section (gimple_seq body)
gimple.c:   BODY is a sequence of section statements.
gimple.c:   CLAUSES are any of the OMP sections contsruct's clauses: private,
gimple.c:gimple_build_omp_sections (gimple_seq body, tree clauses)
gimple.c:  gimple_omp_sections_set_clauses (p, clauses);
gimple.c:gimple_build_omp_sections_switch (void)
gimple.c:	  t = unshare_expr (gimple_omp_sections_clauses (stmt));
gimple.c:	  gimple_omp_sections_set_clauses (copy, t);
gimple.c:	  t = unshare_expr (gimple_omp_sections_control (stmt));
gimple.c:	  gimple_omp_sections_set_control (copy, t);
gimple.def:/* GIMPLE_OMP_CONTINUE marks the location of the loop or sections
gimple.def:   NAME is the name given to the critical section.
gimple.def:   BODY is the sequence of statements that are inside the critical section.  */
gimple.def:   BODY is the sequence of statements to execute in the master section.  */
gimple.def:   BODY is the sequence of statements to execute in the taskgroup section.  */
gimple.def:   BODY is the sequence of statements to execute in the ordered section.  */
gimple.def:/* OMP_SECTION <BODY> represents #pragma omp section.
gimple.def:   BODY is the sequence of statements in the section body.  */
gimple.def:DEFGSCODE(GIMPLE_OMP_SECTION, "gimple_omp_section", GSS_OMP)
gimple.def:/* OMP_SECTIONS <BODY, CLAUSES, CONTROL> represents #pragma omp sections.
gimple.def:   BODY is the sequence of statements in the sections body.
gimple.def:   CONTROL is a VAR_DECL used for deciding which of the sections
gimple.def:DEFGSCODE(GIMPLE_OMP_SECTIONS, "gimple_omp_sections", GSS_OMP_SECTIONS)
gimple.def:DEFGSCODE(GIMPLE_OMP_SECTIONS_SWITCH, "gimple_omp_sections_switch", GSS_BASE)
gimple.def:   BODY is the sequence of statements inside the single section.
gimple.def:   BODY is the sequence of statements inside the single section.
gimple.h:     Critical section name.  */
gimple.h:  gimple_statement_omp_sections : public gimple_statement_omp
gimple.h:     The control variable used for deciding which of the sections to
gimple.h:is_a_helper <gimple_statement_omp_sections>::test (gimple gs)
gimple.h:is_a_helper <const gimple_statement_omp_sections>::test (const_gimple gs)
gimple.h:gimple gimple_build_omp_section (gimple_seq);
gimple.h:gimple gimple_build_omp_sections (gimple_seq, tree);
gimple.h:gimple gimple_build_omp_sections_switch (void);
gimple.h:/* Return true if OMP section statement G has the GF_OMP_SECTION_LAST
gimple.h:gimple_omp_section_last_p (const_gimple g)
gimple.h:gimple_omp_section_set_last (gimple g)
gimple.h:gimple_omp_sections_clauses (const_gimple gs)
gimple.h:  const gimple_statement_omp_sections *omp_sections_stmt =
gimple.h:    as_a <const gimple_statement_omp_sections> (gs);
gimple.h:  return omp_sections_stmt->clauses;
gimple.h:gimple_omp_sections_clauses_ptr (gimple gs)
gimple.h:  gimple_statement_omp_sections *omp_sections_stmt =
gimple.h:    as_a <gimple_statement_omp_sections> (gs);
gimple.h:  return &omp_sections_stmt->clauses;
gimple.h:gimple_omp_sections_set_clauses (gimple gs, tree clauses)
gimple.h:  gimple_statement_omp_sections *omp_sections_stmt =
gimple.h:    as_a <gimple_statement_omp_sections> (gs);
gimple.h:  omp_sections_stmt->clauses = clauses;
gimple.h:gimple_omp_sections_control (const_gimple gs)
gimple.h:  const gimple_statement_omp_sections *omp_sections_stmt =
gimple.h:    as_a <const gimple_statement_omp_sections> (gs);
gimple.h:  return omp_sections_stmt->control;
gimple.h:gimple_omp_sections_control_ptr (gimple gs)
gimple.h:  gimple_statement_omp_sections *omp_sections_stmt =
gimple.h:    as_a <gimple_statement_omp_sections> (gs);
gimple.h:  return &omp_sections_stmt->control;
gimple.h:gimple_omp_sections_set_control (gimple gs, tree control)
gimple.h:  gimple_statement_omp_sections *omp_sections_stmt =
gimple.h:    as_a <gimple_statement_omp_sections> (gs);
gimple.h:  omp_sections_stmt->control = control;
gimple-pretty-print.c:dump_gimple_omp_sections (pretty_printer *buffer, gimple gs, int spc,
gimple-pretty-print.c:      dump_omp_clauses (buffer, gimple_omp_sections_clauses (gs), spc, flags);
gimple-pretty-print.c:      pp_string (buffer, "#pragma omp sections");
gimple-pretty-print.c:      if (gimple_omp_sections_control (gs))
gimple-pretty-print.c:	  dump_generic_node (buffer, gimple_omp_sections_control (gs), spc,
gimple-pretty-print.c:      dump_omp_clauses (buffer, gimple_omp_sections_clauses (gs), spc, flags);
gimple-pretty-print.c:	  pp_string (buffer, "#pragma omp section");
gimple-pretty-print.c:      dump_gimple_omp_sections (buffer, gs, spc, flags);
gimple-walk.c:      ret = walk_tree (gimple_omp_sections_clauses_ptr (stmt), callback_op,
gimple-walk.c:      ret = walk_tree (gimple_omp_sections_control_ptr (stmt), callback_op,
gimplify.c:     be put into a readonly data section.  */
gimplify.c:      stmt = gimple_build_omp_sections (body, OMP_CLAUSES (expr));
gimplify.c:	        g = gimple_build_omp_section (body);
graphds.c:         dom(v) = {v} union (intersection of dom(p) over all predecessors of v)
graphite-dependences.c:   when the intersection of LEX with the DEPS transformed by SCHEDULE
graphite-dependences.c:/* Return true when DEPS is non empty and the intersection of LEX with
gsstruct.def:DEFGSSTRUCT(GSS_OMP_SECTIONS, gimple_statement_omp_sections, false)
haifa-sched.c:	  && targetm_common.have_named_sections)
ifcvt.c:	    && decl_readonly_section (SYMBOL_REF_DECL (addr), 0))
ifcvt.c:     and cold sections.
ifcvt.c:     and cold sections.
ifcvt.c:	  /* Start off with the intersection of regs used to pass
insn-notes.def:   between hot and cold text sections.  */
ipa.c:	    /* Making variable in explicit section readonly can cause section
ipa.c:	 and moreover its section can not be discarded, replace all direct calls
ipa.c:	 - when it has specific section
ipa.c:	 - if declaration is local, it will get into .local common section
ipa.c:   for targets that do not support .ctors/.dtors sections.  These
ipa-inline-analysis.c:/* Stream in inline summaries from the section.  */
ipa-inline-analysis.c:inline_read_section (struct lto_file_decl_data *file_data, const char *data,
ipa-inline-analysis.c:  lto_free_section_data (file_data, LTO_section_inline_summary, NULL, data,
ipa-inline-analysis.c:      const char *data = lto_get_section_data (file_data,
ipa-inline-analysis.c:					       LTO_section_inline_summary,
ipa-inline-analysis.c:	inline_read_section (file_data, data, len);
ipa-inline-analysis.c:  struct output_block *ob = create_output_block (LTO_section_inline_summary);
ipa-profile.c:     .text.unlikely/.text.hot/.text.startup/.text.exit subsections).  */
ipa-profile.c:    = lto_create_simple_output_block (LTO_section_ipa_profile);
ipa-profile.c:					 LTO_section_ipa_profile,
ipa-profile.c:					  LTO_section_ipa_profile,
ipa-profile.c:	 errors can make us to push function into unlikely section even when
ipa-prop.c:   statement in the section 3, we try to detect whether the dynamic type has
ipa-prop.c:   backwards until we reach statements in section 2 because these calls cannot
ipa-prop.c:   must detect that statements in section 2 change the dynamic type and can try
ipa-prop.c:  ob = create_output_block (LTO_section_jump_functions);
ipa-prop.c:/* Read section in file FILE_DATA of length LEN with data DATA.  */
ipa-prop.c:ipa_prop_read_section (struct lto_file_decl_data *file_data, const char *data,
ipa-prop.c:  lto_free_section_data (file_data, LTO_section_jump_functions, NULL, data,
ipa-prop.c:      const char *data = lto_get_section_data (file_data, LTO_section_jump_functions, NULL, &len);
ipa-prop.c:        ipa_prop_read_section (file_data, data, len);
ipa-prop.c:  ob = create_output_block (LTO_section_ipcp_transform);
ipa-prop.c:/* Read replacements section in file FILE_DATA of length LEN with data
ipa-prop.c:read_replacements_section (struct lto_file_decl_data *file_data,
ipa-prop.c:  lto_free_section_data (file_data, LTO_section_jump_functions, NULL, data,
ipa-prop.c:      const char *data = lto_get_section_data (file_data,
ipa-prop.c:					       LTO_section_ipcp_transform,
ipa-prop.c:        read_replacements_section (file_data, data, len);
ipa-pure-const.c:    = lto_create_simple_output_block (LTO_section_ipa_pure_const);
ipa-pure-const.c:					 LTO_section_ipa_pure_const,
ipa-pure-const.c:					  LTO_section_ipa_pure_const,
ipa-reference.c:  /* See if the info has non-empty intersections with vars we want to encode.  */
ipa-reference.c:    = lto_create_simple_output_block (LTO_section_ipa_reference);
ipa-reference.c:					 LTO_section_ipa_reference,
ipa-reference.c:					  LTO_section_ipa_reference,
ira-build.c:	 intersection quickly because if the finish of subsequently
ira.c:	 intersection of classes of all insn operands in which a given
ira.c:  HARD_REG_SET intersection_set, union_set, temp_set2;
ira.c:	  COPY_HARD_REG_SET (intersection_set, reg_class_contents[cl1]);
ira.c:	  AND_HARD_REG_SET (intersection_set, reg_class_contents[cl2]);
ira.c:	  AND_COMPL_HARD_REG_SET (intersection_set, no_unit_alloc_regs);
ira.c:	      if (hard_reg_set_subset_p (temp_hard_regset, intersection_set))
ira.c:		     intersection of allocatable hard register sets
ira.c:	      && ira_hard_reg_set_intersection_p (hard_regno, ALLOCNO_MODE (a),
ira-color.c:		  && (ira_hard_reg_set_intersection_p
ira-color.c:		/* No intersection.  */
ira-color.c:	  && ira_hard_reg_set_intersection_p (hard_regno, ALLOCNO_MODE (a),
ira-color.c:	  if (ira_hard_reg_set_intersection_p (hard_regno, mode, conflict_hard_regs)
ira-costs.c:		  if (ira_hard_reg_set_intersection_p (regno, mode,
ira-costs.c:	      if (ira_hard_reg_set_intersection_p (regno, mode, call_used_reg_set)
ira.h:  /* The biggest class inside of intersection of the two classes (that
ira-int.h:  /* The biggest important class inside of intersection of the two
ira-int.h:ira_hard_reg_set_intersection_p (int hard_regno, enum machine_mode mode,
langhooks.c:/* Used to save and restore any previously active section.  */
langhooks.c:static section *saved_section;
langhooks.c:/* Begin a new LTO output section named NAME.  This default implementation
langhooks.c:   saves the old section and emits assembly code to switch to the new
langhooks.c:   section.  */
langhooks.c:lhd_begin_section (const char *name)
langhooks.c:  section *section;
langhooks.c:  /* Save the old section so we can restore it in lto_end_asm_section.  */
langhooks.c:  gcc_assert (!saved_section);
langhooks.c:  saved_section = in_section;
langhooks.c:  if (!saved_section)
langhooks.c:    saved_section = text_section;
langhooks.c:  /* Create a new section and switch to it.  */
langhooks.c:  section = get_section (name, SECTION_DEBUG, NULL);
langhooks.c:  switch_to_section (section);
langhooks.c:/* Write DATA of length LEN to the current LTO output section.  This default
langhooks.c:/* Finish the current LTO output section.  This default implementation emits
langhooks.c:   assembly code to switch to any section previously saved by
langhooks.c:   lhd_begin_section.  */
langhooks.c:lhd_end_section (void)
langhooks.c:  if (saved_section)
langhooks.c:      switch_to_section (saved_section);
langhooks.c:      saved_section = NULL;
langhooks-def.h:extern void lhd_begin_section (const char *);
langhooks-def.h:extern void lhd_end_section (void);
langhooks-def.h:#define LANG_HOOKS_BEGIN_SECTION lhd_begin_section
langhooks-def.h:#define LANG_HOOKS_END_SECTION lhd_end_section
langhooks.h:  /* Begin a new LTO section named NAME.  */
langhooks.h:  void (*begin_section) (const char *name);
langhooks.h:  /* Write DATA of length LEN to the currently open LTO section.  BLOCK is a
langhooks.h:  /* End the previously begun LTO section.  */
langhooks.h:  void (*end_section) (void);
lcm.c:	  bitmap_intersection_of_succs (antout[bb->index], antin, bb);
lcm.c:      /* Compute the intersection of LATERIN for each incoming edge to B.  */
lcm.c:	 intersection of avouts is the null set.  We can identify such blocks
lcm.c:	  bitmap_intersection_of_preds (avin[bb->index], avout, bb);
lcm.c:      /* Compute the intersection of NEARER for each outgoing edge from B.  */
lto-cgraph.c:  ob = lto_create_simple_output_block (LTO_section_refs);
lto-cgraph.c:  ob = lto_create_simple_output_block (LTO_section_symtab_nodes);
lto-cgraph.c:      ib = lto_create_simple_input_block (file_data, LTO_section_symtab_nodes,
lto-cgraph.c:      lto_destroy_simple_input_block (file_data, LTO_section_symtab_nodes,
lto-cgraph.c:      ib = lto_create_simple_input_block (file_data, LTO_section_refs,
lto-cgraph.c:	fatal_error ("cannot find LTO section refs in %s",
lto-cgraph.c:      lto_destroy_simple_input_block (file_data, LTO_section_refs,
lto-cgraph.c:  struct output_block *ob = create_output_block (LTO_section_cgraph_opt_sum);
lto-cgraph.c:/* Read section in file FILE_DATA of length LEN with data DATA.  */
lto-cgraph.c:input_cgraph_opt_section (struct lto_file_decl_data *file_data,
lto-cgraph.c:  lto_free_section_data (file_data, LTO_section_cgraph_opt_sum, NULL, data,
lto-cgraph.c:	lto_get_section_data (file_data, LTO_section_cgraph_opt_sum, NULL,
lto-cgraph.c:	input_cgraph_opt_section (file_data, data, len, nodes);
lto-opts.c:/* Write currently held options to an LTO IL section.  */
lto-opts.c:  char *section_name;
lto-opts.c:  section_name = lto_get_section_name (LTO_section_opts, NULL, NULL);
lto-opts.c:  lto_begin_section (section_name, false);
lto-opts.c:  lto_end_section ();
lto-opts.c:  free (section_name);
lto-section-in.c:/* Input functions for reading LTO sections.
lto-section-in.c:   enum lto_section_type.  */
lto-section-in.c:const char *lto_section_name[LTO_N_SECTION_TYPES] =
lto-section-in.c:   sections.  */
lto-section-in.c:static lto_get_section_data_f* get_section_f;
lto-section-in.c:static lto_free_section_data_f* free_section_f;
lto-section-in.c:		  lto_get_section_data_f* get_f,
lto-section-in.c:		  lto_free_section_data_f* free_f)
lto-section-in.c:  get_section_f = get_f;
lto-section-in.c:  free_section_f = free_f;
lto-section-in.c:   compressed data for use with free_section_f.  */
lto-section-in.c:lto_get_section_data (struct lto_file_decl_data *file_data,
lto-section-in.c:		      enum lto_section_type section_type,
lto-section-in.c:  const char *data = (get_section_f) (file_data, section_type, name, len);
lto-section-in.c:  lto_stats.section_size[section_type] += *len;
lto-section-in.c:  /* FIXME lto: WPA mode does not write compressed sections, so for now
lto-section-in.c:lto_free_section_data (struct lto_file_decl_data *file_data,
lto-section-in.c:		       enum lto_section_type section_type,
lto-section-in.c:  gcc_assert (free_section_f);
lto-section-in.c:  /* FIXME lto: WPA mode does not write compressed sections, so for now
lto-section-in.c:      (free_section_f) (file_data, section_type, name, data, len);
lto-section-in.c:  (free_section_f) (file_data, section_type, name, header->data, header->len);
lto-section-in.c:/* Load a section of type SECTION_TYPE from FILE_DATA, parse the
lto-section-in.c:   header and then return an input block pointing to the section.  The
lto-section-in.c:   raw pointer to the section is returned in DATAR and LEN.  These are
lto-section-in.c:   used to free the section.  Return NULL if the section is not present.  */
lto-section-in.c:			       enum lto_section_type section_type,
lto-section-in.c:  const char *data = lto_get_section_data (file_data, section_type, NULL, len);
lto-section-in.c:/* Close the section returned from a call to
lto-section-in.c:				enum lto_section_type section_type,
lto-section-in.c:  lto_free_section_data (file_data, section_type, NULL, data, len);
lto-section-in.c:/* Report read pass end of the section.  */
lto-section-in.c:lto_section_overrun (struct lto_input_block *ib)
lto-section-out.c:/* Functions for writing LTO sections.
lto-section-out.c:/* Begin a new output section named NAME. If COMPRESS is true, zlib compress
lto-section-out.c:   the section. */
lto-section-out.c:lto_begin_section (const char *name, bool compress)
lto-section-out.c:  lang_hooks.lto.begin_section (name);
lto-section-out.c:/* End the current output section.  */
lto-section-out.c:lto_end_section (void)
lto-section-out.c:  lang_hooks.lto.end_section ();
lto-section-out.c:lto_create_simple_output_block (enum lto_section_type section_type)
lto-section-out.c:  ob->section_type = section_type;
lto-section-out.c:/* Produce a simple section for one of the ipa passes.  */
lto-section-out.c:  char *section_name;
lto-section-out.c:  section_name = lto_get_section_name (ob->section_type, NULL, NULL);
lto-section-out.c:  lto_begin_section (section_name, !flag_wpa);
lto-section-out.c:  free (section_name);
lto-section-out.c:  /* Put back the assembly section that was there before we started
lto-section-out.c:  lto_end_section ();
lto-streamer.c:/* Get a section name for a particular type or name.  The NAME field
lto-streamer.c:   is only used if SECTION_TYPE is LTO_section_function_body. For all
lto-streamer.c:lto_get_section_name (int section_type, const char *name, struct lto_file_decl_data *f)
lto-streamer.c:  if (section_type == LTO_section_function_body)
lto-streamer.c:  else if (section_type < LTO_N_SECTION_TYPES)
lto-streamer.c:      add = lto_section_name[section_type];
lto-streamer.c:    internal_error ("bytecode stream: unexpected LTO section %s", name);
lto-streamer.c:  /* Make the section name unique so that ld -r combining sections
lto-streamer.c:     doesn't confuse the reader with merged sections.
lto-streamer.c:  if (section_type == LTO_section_opts)
lto-streamer.c:    fprintf (stderr, "[%s] Size of mmap'd section %s: "
lto-streamer.c:	     lto_section_name[i], lto_stats.section_size[i]);
lto-streamer.h:/* The encoding for a function consists of the following sections:
lto-streamer.h:      entry, there is word with the offset within the section to the
lto-streamer.h:      Since most labels do not have names, this section my be of zero
lto-streamer.h:/* The string that is the prefix on the section names we make for lto.
lto-streamer.h:   For decls the DECL_ASSEMBLER_NAME is appended to make the section
lto-streamer.h:   sections a '.' and the section type are appended.  */
lto-streamer.h:/* Set of section types that are in an LTO file.  This list will grow
lto-streamer.h:   own section type to store its summary information.
lto-streamer.h:   When adding a new section type, you must also extend the
lto-streamer.h:   LTO_SECTION_NAME array in lto-section-in.c.  */
lto-streamer.h:enum lto_section_type
lto-streamer.h:  LTO_section_decls = 0,
lto-streamer.h:  LTO_section_function_body,
lto-streamer.h:  LTO_section_static_initializer,
lto-streamer.h:  LTO_section_symtab,
lto-streamer.h:  LTO_section_refs,
lto-streamer.h:  LTO_section_asm,
lto-streamer.h:  LTO_section_jump_functions,
lto-streamer.h:  LTO_section_ipa_pure_const,
lto-streamer.h:  LTO_section_ipa_reference,
lto-streamer.h:  LTO_section_ipa_profile,
lto-streamer.h:  LTO_section_symtab_nodes,
lto-streamer.h:  LTO_section_opts,
lto-streamer.h:  LTO_section_cgraph_opt_sum,
lto-streamer.h:  LTO_section_inline_summary,
lto-streamer.h:  LTO_section_ipcp_transform,
lto-streamer.h:typedef const char* (lto_get_section_data_f) (struct lto_file_decl_data *,
lto-streamer.h:					      enum lto_section_type,
lto-streamer.h:typedef void (lto_free_section_data_f) (struct lto_file_decl_data *,
lto-streamer.h:					enum lto_section_type,
lto-streamer.h:  /* The header for all types of sections. */
lto-streamer.h:/* Structure describing a symbol section.  */
lto-streamer.h:  /* The header for all types of sections. */
lto-streamer.h:  /* The header for all types of sections. */
lto-streamer.h:  unsigned HOST_WIDE_INT section_size[LTO_N_SECTION_TYPES];
lto-streamer.h:  /* Hash table maps lto-related section names to location in file.  */
lto-streamer.h:  /* Hash table maps lto-related section names to location in file.  */
lto-streamer.h:  htab_t GTY((skip)) section_hash_table;
lto-streamer.h:  /* The header for all types of sections. */
lto-streamer.h:  enum lto_section_type section_type;
lto-streamer.h:  enum lto_section_type section_type;
lto-streamer.h:  /* Cache of nodes written in this section.  */
lto-streamer.h:/* In lto-section-in.c  */
lto-streamer.h:			       enum lto_section_type, const char **, size_t *);
lto-streamer.h:				enum lto_section_type,
lto-streamer.h:			      lto_get_section_data_f *,
lto-streamer.h:			      lto_free_section_data_f *);
lto-streamer.h:extern const char *lto_get_section_data (struct lto_file_decl_data *,
lto-streamer.h:					 enum lto_section_type,
lto-streamer.h:extern void lto_free_section_data (struct lto_file_decl_data *,
lto-streamer.h:				   enum lto_section_type,
lto-streamer.h:extern void lto_section_overrun (struct lto_input_block *) ATTRIBUTE_NORETURN;
lto-streamer.h:/* In lto-section-out.c  */
lto-streamer.h:extern void lto_begin_section (const char *, bool);
lto-streamer.h:extern void lto_end_section (void);
lto-streamer.h:				enum lto_section_type);
lto-streamer.h:extern char *lto_get_section_name (int, const char *, struct lto_file_decl_data *);
lto-streamer.h:extern struct output_block *create_output_block (enum lto_section_type);
lto-streamer.h:/* Section names corresponding to the values of enum lto_section_type.  */
lto-streamer.h:extern const char *lto_section_name[];
lto-streamer-in.c:   LTO_section_function_body or LTO_section_static_initializer.  If
lto-streamer-in.c:   section type is LTO_section_function_body, FN must be the decl for
lto-streamer-in.c:	       const char *data, enum lto_section_type section_type)
lto-streamer-in.c:  if (section_type == LTO_section_function_body)
lto-streamer-in.c:  lto_read_body (file_data, node, data, LTO_section_function_body);
lto-streamer-in.c:  const char *data = lto_get_section_data (file_data, LTO_section_asm,
lto-streamer-in.c:  lto_free_section_data (file_data, LTO_section_asm, NULL, data, len);
lto-streamer-out.c:   LTO_section_function_body or LTO_static_initializer.  */
lto-streamer-out.c:create_output_block (enum lto_section_type section_type)
lto-streamer-out.c:  ob->section_type = section_type;
lto-streamer-out.c:  if (section_type == LTO_section_function_body)
lto-streamer-out.c:  enum lto_section_type section_type = ob->section_type;
lto-streamer-out.c:  if (section_type == LTO_section_function_body)
lto-streamer-out.c:	 EXPR's bitfield section.  */
lto-streamer-out.c:/* Create the header in the file using OB.  If the section type is for
lto-streamer-out.c:  enum lto_section_type section_type = ob->section_type;
lto-streamer-out.c:  char *section_name;
lto-streamer-out.c:  if (section_type == LTO_section_function_body)
lto-streamer-out.c:      section_name = lto_get_section_name (section_type, name, NULL);
lto-streamer-out.c:    section_name = lto_get_section_name (section_type, NULL, NULL);
lto-streamer-out.c:  lto_begin_section (section_name, !flag_wpa);
lto-streamer-out.c:  free (section_name);
lto-streamer-out.c:  if (section_type == LTO_section_function_body)
lto-streamer-out.c:  if (section_type == LTO_section_function_body)
lto-streamer-out.c:  lto_end_section ();
lto-streamer-out.c:  ob = create_output_block (LTO_section_function_body);
lto-streamer-out.c:  /* Create a section to hold the pickled output of this function.   */
lto-streamer-out.c:  char *section_name;
lto-streamer-out.c:  ob = create_output_block (LTO_section_asm);
lto-streamer-out.c:  section_name = lto_get_section_name (LTO_section_asm, NULL, NULL);
lto-streamer-out.c:  lto_begin_section (section_name, !flag_wpa);
lto-streamer-out.c:  free (section_name);
lto-streamer-out.c:  lto_end_section ();
lto-streamer-out.c:  char *section_name =
lto-streamer-out.c:    lto_get_section_name (LTO_section_function_body, name, NULL);
lto-streamer-out.c:  lto_begin_section (section_name, !flag_wpa);
lto-streamer-out.c:  free (section_name);
lto-streamer-out.c:  data = lto_get_section_data (file_data, LTO_section_function_body,
lto-streamer-out.c:  lto_free_section_data (file_data, LTO_section_function_body, name,
lto-streamer-out.c:  lto_end_section ();
lto-streamer-out.c:  char *section_name = lto_get_section_name (LTO_section_symtab, NULL, NULL);
lto-streamer-out.c:  lto_begin_section (section_name, false);
lto-streamer-out.c:  free (section_name);
lto-streamer-out.c:  lto_end_section ();
lto-streamer-out.c:   this file to be written in to a section that can then be read in to
lto-streamer-out.c:  char *section_name;
lto-streamer-out.c:  ob = create_output_block (LTO_section_decls);
lto-streamer-out.c:  section_name = lto_get_section_name (LTO_section_decls, NULL, NULL);
lto-streamer-out.c:  lto_begin_section (section_name, !flag_wpa);
lto-streamer-out.c:  free (section_name);
lto-streamer-out.c:  lto_end_section ();
lto-wrapper.c:     -ffast-math is for intersection).  Most complaints
lto-wrapper.c:     we can neither safely handle by intersection nor
lto-wrapper.c:      if (!simple_object_find_section (sobj, LTO_SECTION_NAME_PREFIX "." "opts",
Makefile.in:	lto-section-in.o \
Makefile.in:	lto-section-out.o \
Makefile.in:	-($(POD2MAN) --section=1 $< > $(@).T$$$$ && \
Makefile.in:	-($(POD2MAN) --section=7 $< > $(@).T$$$$ && \
Makefile.in:	@echo "# add them to the last section" >> ./site.tmp
omp-builtins.def:DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_START, "GOMP_sections_start",
omp-builtins.def:DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_NEXT, "GOMP_sections_next",
omp-builtins.def:		  "GOMP_parallel_sections",
omp-builtins.def:DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_END, "GOMP_sections_end",
omp-builtins.def:		  "GOMP_sections_end_cancel",
omp-builtins.def:		  "GOMP_sections_end_nowait",
omp-low.c:      /* Number of sections is equal to the number of edges from the
omp-low.c:	 the exit of the sections region.  */
omp-low.c:  /* We only support parallel+for and parallel+sections.  */
omp-low.c:/* Scan an OpenMP sections directive.  */
omp-low.c:scan_omp_sections (gimple stmt, omp_context *outer_ctx)
omp-low.c:  scan_sharing_clauses (gimple_omp_sections_clauses (stmt), ctx);
omp-low.c:		bad = "#pragma omp sections";
omp-low.c:		      if (find_omp_clause (gimple_omp_sections_clauses
omp-low.c:				    "%<#pragma omp cancel sections%> inside "
omp-low.c:				    "%<nowait%> sections construct");
omp-low.c:		      if (find_omp_clause (gimple_omp_sections_clauses
omp-low.c:				    "%<#pragma omp cancel sections%> inside "
omp-low.c:				    "%<nowait%> sections construct");
omp-low.c:	      kind = "sections";
omp-low.c:      scan_omp_sections (stmt, ctx);
omp-low.c:/* Expand code for an OpenMP sections directive.  In pseudo code, we generate
omp-low.c:	v = GOMP_sections_start (n);
omp-low.c:	    section 1;
omp-low.c:	v = GOMP_sections_next ();
omp-low.c:    If this is a combined parallel sections, replace the call to
omp-low.c:    GOMP_sections_start with call to GOMP_sections_next.  */
omp-low.c:expand_omp_sections (struct omp_region *region)
omp-low.c:  gimple sections_stmt, stmt, cont;
omp-low.c:  /* The call to GOMP_sections_start goes in ENTRY_BB, replacing the
omp-low.c:  sections_stmt = gsi_stmt (si);
omp-low.c:  gcc_assert (gimple_code (sections_stmt) == GIMPLE_OMP_SECTIONS);
omp-low.c:  vin = gimple_omp_sections_control (sections_stmt);
omp-low.c:      /* If we are not inside a combined parallel+sections region,
omp-low.c:	 call GOMP_sections_start.  */
omp-low.c:      /* Otherwise, call GOMP_sections_next.  */
omp-low.c:      gcc_assert (i < len || gimple_omp_section_last_p (gsi_stmt (si)));
omp-low.c:      /* Code to get the next section goes in L1_BB.  */
omp-low.c:	  expand_omp_sections (region);
omp-low.c:	  /* Individual omp sections are handled together with their
omp-low.c:/* Lower the OpenMP sections directive in the current statement in GSI_P.
omp-low.c:lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)
omp-low.c:  lower_rec_input_clauses (gimple_omp_sections_clauses (stmt),
omp-low.c:	  lower_lastprivate_clauses (gimple_omp_sections_clauses (stmt), NULL,
omp-low.c:	  gimple_omp_section_set_last (sec_start);
omp-low.c:  lower_reduction_clauses (gimple_omp_sections_clauses (stmt), &olist, ctx);
omp-low.c:  gimple_seq_add_stmt (&new_body, gimple_build_omp_sections_switch ());
omp-low.c:  control = create_tmp_var (unsigned_type_node, ".section");
omp-low.c:  gimple_omp_sections_set_control (stmt, control);
omp-low.c:        (!!find_omp_clause (gimple_omp_sections_clauses (stmt),
omp-low.c:      lower_omp_sections (gsi_p, ctx);
omp-low.c:	  /* Wire up the edges into and out of the nested sections.  */
ONEWS:"transparent_union", "constructor", "destructor", "mode", "section",
ONEWS:signatures.  A short introduction on signatures is in the section
ONEWS:  type; many machines support the `section' attribute.
ONEWS:* The manual contains a new section ``Common Misunderstandings with
optabs.c:     are the flags assigned by targetm.encode_section_info.  */
optabs.c:	 targetm.encode_section_info.  */
opts.c:     section-anchors.  */
opts.c:      if (opts->x_flag_section_anchors && opts_set->x_flag_section_anchors)
opts.c:	error_at (loc, "section anchors must be disabled when unit-at-a-time "
opts.c:      opts->x_flag_section_anchors = 0;
opts.c:  /* Unless the user has asked for section anchors, we disable toplevel
opts.c:      && !(opts->x_flag_section_anchors && opts_set->x_flag_section_anchors))
opts.c:      opts->x_flag_section_anchors = 0;
opts.c:      if (opts->x_flag_section_anchors && opts_set->x_flag_section_anchors)
opts.c:	error_at (loc, "section anchors must be disabled when toplevel reorder"
opts.c:      opts->x_flag_section_anchors = 0;
opts.c:     sections of the .o and executable files does not work (currently)
opts.c:     support named sections.  */
opts.c:      && (!targetm_common.have_named_sections
opts.c:    opts->x_debug_generate_pub_sections = 1;
output.h:/* Return section for TEXT_SECITON_NAME if DECL or DECL_SECTION_NAME (DECL)
output.h:extern section *get_named_text_section (tree, const char *, const char *);
output.h:extern void assemble_addr_to_section (rtx, section *);
output.h:/* Decide whether DECL needs to be in a writable section.
output.h:extern bool decl_readonly_section (const_tree, int);
output.h:/* Default target function switched text sections.  */
output.h:extern void default_function_switched_text_sections (FILE *, tree, bool);
output.h:/* Flags controlling properties of a section.  */
output.h:#define SECTION_ENTSIZE	 0x000ff	/* entity size in section */
output.h:#define SECTION_FORGET	 0x04000	/* forget that we've entered the section */
output.h:#define SECTION_DECLARED 0x100000	/* section has been used */
output.h:/* This SECTION_STYLE is used for unnamed sections that we can switch
output.h:/* This SECTION_STYLE is used for named sections that we can switch
output.h:   to using a general section directive.  */
output.h:/* This SECTION_STYLE is used for sections that we cannot switch to at
output.h:   all.  The choice of section is implied by the directive that we use
output.h:/* A helper function for default_elf_select_section and
output.h:   default_elf_unique_section.  Categorizes the DECL.  */
output.h:enum section_category
output.h:  /* To optimize loading of shared programs, define following subsections
output.h:     of data section:
output.h:/* Information that is provided by all instances of the section type.  */
output.h:struct GTY(()) section_common {
output.h:  /* The set of SECTION_* flags that apply to this section.  */
output.h:/* Information about a SECTION_NAMED section.  */
output.h:struct GTY(()) named_section {
output.h:  struct section_common common;
output.h:  /* The name of the section.  */
output.h:     section is associated.  */
output.h:   section.  The argument provides callback-specific data.  */
output.h:typedef void (*unnamed_section_callback) (const void *);
output.h:/* Information about a SECTION_UNNAMED section.  */
output.h:struct GTY(()) unnamed_section {
output.h:  struct section_common common;
output.h:  /* The callback used to switch to the section, and the data that
output.h:  unnamed_section_callback GTY ((skip)) callback;
output.h:  /* The next entry in the chain of unnamed sections.  */
output.h:  section *next;
output.h:   SECTION_NOSWITCH section.  DECL is the decl that should be assembled
output.h:typedef bool (*noswitch_section_callback) (tree decl, const char *name,
output.h:/* Information about a SECTION_NOSWITCH section.  */
output.h:struct GTY(()) noswitch_section {
output.h:  struct section_common common;
output.h:  /* The callback used to assemble decls in this section.  */
output.h:  noswitch_section_callback GTY ((skip)) callback;
output.h:/* Information about a section, which may be named or unnamed.  */
output.h:union GTY ((desc ("SECTION_STYLE (&(%h))"))) section {
output.h:  struct section_common GTY ((skip)) common;
output.h:  struct named_section GTY ((tag ("SECTION_NAMED"))) named;
output.h:  struct unnamed_section GTY ((tag ("SECTION_UNNAMED"))) unnamed;
output.h:  struct noswitch_section GTY ((tag ("SECTION_NOSWITCH"))) noswitch;
output.h:/* Return the style of section SECT.  */
output.h:/* Special well-known sections.  */
output.h:extern GTY(()) section *text_section;
output.h:extern GTY(()) section *data_section;
output.h:extern GTY(()) section *readonly_data_section;
output.h:extern GTY(()) section *sdata_section;
output.h:extern GTY(()) section *ctors_section;
output.h:extern GTY(()) section *dtors_section;
output.h:extern GTY(()) section *bss_section;
output.h:extern GTY(()) section *sbss_section;
output.h:extern GTY(()) section *exception_section;
output.h:extern GTY(()) section *eh_frame_section;
output.h:extern GTY(()) section *tls_comm_section;
output.h:extern GTY(()) section *comm_section;
output.h:extern GTY(()) section *lcomm_section;
output.h:extern GTY(()) section *bss_noswitch_section;
output.h:extern GTY(()) section *in_section;
output.h:extern GTY(()) bool in_cold_section_p;
output.h:extern section *get_unnamed_section (unsigned int, void (*) (const void *),
output.h:extern section *get_section (const char *, unsigned int, tree);
output.h:extern section *get_named_section (tree, const char *, int);
output.h:extern section *get_variable_section (tree, bool);
output.h:extern rtx get_section_anchor (struct object_block *, HOST_WIDE_INT,
output.h:extern section *mergeable_constant_section (enum machine_mode,
output.h:extern section *function_section (tree);
output.h:extern section *unlikely_text_section (void);
output.h:extern section *current_function_section (void);
output.h:   not) section for PRIORITY.  */
output.h:extern section *get_cdtor_priority_section (int, bool);
output.h:extern bool unlikely_text_section_p (section *);
output.h:extern void switch_to_section (section *);
output.h:extern void output_section_asm_op (const void *);
output.h:extern unsigned int default_section_type_flags (tree, const char *, int);
output.h:extern void default_no_named_section (const char *, unsigned int, tree);
output.h:extern void default_elf_asm_named_section (const char *, unsigned int, tree);
output.h:extern enum section_category categorize_decl_for_section (const_tree, int);
output.h:extern void default_coff_asm_named_section (const char *, unsigned int, tree);
output.h:extern void default_pe_asm_named_section (const char *, unsigned int, tree);
output.h:extern void default_named_section_asm_out_destructor (rtx, int);
output.h:extern void default_dtor_section_asm_out_destructor (rtx, int);
output.h:extern void default_named_section_asm_out_constructor (rtx, int);
output.h:extern void default_ctor_section_asm_out_constructor (rtx, int);
output.h:extern section *default_select_section (tree, int, unsigned HOST_WIDE_INT);
output.h:extern section *default_elf_select_section (tree, int, unsigned HOST_WIDE_INT);
output.h:extern void default_unique_section (tree, int);
output.h:extern section *default_function_rodata_section (tree);
output.h:extern section *default_no_function_rodata_section (tree);
output.h:extern section *default_clone_table_section (void);
output.h:extern section *default_select_rtx_section (enum machine_mode, rtx,
output.h:extern section *default_elf_select_rtx_section (enum machine_mode, rtx,
output.h:extern void default_encode_section_info (tree, rtx, int);
print-tree.c:	fputs (" in-text-section", file);
real.c:   section 5.2.4.2.2 Characteristics of floating types.
real.c:   method" described in section 4.6.3 of Donald Knuth's "Seminumerical
reg-notes.def:/* Indicates that a jump crosses between hot and cold sections in a
regrename.c:/* Record the registers that are live but not tracked.  The intersection
reg-stack.c: * This section deals with stack register substitution, and forms the second
reload1.c:       whole instead of this little section as well as the backend issues.  */
reload.c:		      /* Since we don't have a way of forming the intersection,
rtl.h:  /* The section in which these objects should be placed.  */
rtl.h:  section *sect;
rtl.h:   are computed by the default version of targetm.encode_section_info.  */
rtl.h:/* Set if this symbol is a section anchor.  SYMBOL_REF_ANCHOR_P implies
rtl.h:extern void decide_function_section (tree);
sbitmap.h:     * set_intersection		: bitmap_and
sdbout.c:  debug_nothing_void,                    /* switch_text_section */
sdbout.c:    ; /* Don't change section amid function.  */
sdbout.c:    switch_to_section (current_function_section ());
sel-sched.c:	     restrictions and live range intersection.  */
sel-sched.c:        sel_print ("No intersection with av set of block %d\n", bb->index);
sparseset.h:     * set_intersection		: sparseset_and
stmt.c:   list into two equal sections plus a pivot.  The parts are
stmt.c:/* Search the parent sections of the case node tree
stmt.c:/* Search the parent sections of the case node tree
stmt.c:/* Search the parent sections of the
symtab.c:    fprintf (f, " section_name:%s",
target.def:/* Initialize target-specific sections.  */
target.def:(init_sections,
target.def:@file{varasm.c} sections, or if your target has some special sections\n\
target.def:any assembly code, and before calling any of the section-returning hooks\n\
target.def:/* Tell assembler to change to section NAME with attributes FLAGS.
target.def:   which this section is associated.  */
target.def:(named_section,
target.def: "Output assembly directives to switch to section @var{name}.  The section\n\
target.def:this section is associated.",
target.def: default_no_named_section)
target.def:/* Return preferred text (sub)section for function DECL.
target.def:   Return NULL if function should go to default text section.  */
target.def:(function_section,
target.def: "Return preferred text (sub)section for function @var{decl}.\n\
target.def:Return NULL if function should go to default text section.",
target.def: section *, (tree decl, enum node_frequency freq, bool startup, bool exit),
target.def: default_function_section)
target.def:(function_switched_text_sections,
target.def:  sections.  Output should be written to @var{file}.  The function\
target.def:  decl is available as @var{decl} and the new section is `cold' if\
target.def: default_function_switched_text_sections)
target.def:   selecting sections.  Bit 1 should be set if global relocations
target.def:   should be placed in a read-write section; bit 0 should be set if
target.def:   local relocations should be placed in a read-write section.  */
target.def:selecting sections.  Bit 1 should be set if global relocations\n\
target.def:should be placed in a read-write section; bit 0 should be set if\n\
target.def:local relocations should be placed in a read-write section.\n\
target.def:in read-only sections even in executables.",
target.def: /* Return a section for EXP.  It may be a DECL or a constant.  RELOC
target.def:(select_section,
target.def: "Return the section into which @var{exp} should be placed.  You can\n\
target.def:variables in @code{readonly_data_section}.\n\
target.def: section *, (tree exp, int reloc, unsigned HOST_WIDE_INT align),
target.def: default_select_section)
target.def:/* Return a section for X.  MODE is X's mode and ALIGN is its
target.def:(select_rtx_section,
target.def: "Return the section into which a constant @var{x}, of mode @var{mode},\n\
target.def:constants in @code{flag_pic} mode in @code{data_section} and everything\n\
target.def:else in @code{readonly_data_section}.",
target.def: section *, (enum machine_mode mode, rtx x, unsigned HOST_WIDE_INT align),
target.def: default_select_rtx_section)
target.def:/* Select a unique section name for DECL.  RELOC is the same as
target.def:(unique_section,
target.def: "Build up a unique section name, expressed as a @code{STRING_CST} node,\n\
target.def:ELF section name that would normally be used for the symbol.  For\n\
target.def: default_unique_section)
target.def:/* Return the readonly data section associated with function DECL.  */
target.def:(function_rodata_section,
target.def: "Return the readonly data section associated with\n\
target.def:the function's section is @code{.gnu.linkonce.t.name}, @code{.rodata.name}\n\
target.def:if function is in @code{.text.name}, and the normal readonly-data section\n\
target.def: section *, (tree decl),
target.def: default_function_rodata_section)
target.def:   for mergeable data sections.  */
target.def:section names for mergeable constant data.  Define this macro to override\n\
target.def:the string if a different section name should be used.",
target.def:/* Return the section to be used for transactional memory clone tables.  */
target.def:(tm_clone_table_section,
target.def: "Return the section that should be used for transactional memory clone\
target.def: section *, (void), default_clone_table_section)
target.def:be chosen if (1) the target supports arbitrary section names, (2) the\n\
target.def:to find at the start of an LTO section.  The default is to output\n\
target.def:to find at the end of an LTO section.  The default is to output\n\
target.def:section in the assembler output file.  The name of the new section is\n\
target.def:/* The name of the section that the example ELF implementation of
target.def:(record_gcc_switches_section,
target.def: "This is the name of the section that will be created by the example\n\
target.def:/* Output the definition of a section anchor.  */
target.def: "Write the assembly code to define section anchor @var{x}, which is a\n\
target.def:is @code{NULL}, which disables the use of section anchors altogether.",
target.def:/* Given a decl, a section name, and whether the decl initializer
target.def:   has relocs, choose attributes for the section.  */
target.def:(section_type_flags,
target.def: "Choose a set of section attributes for use by @code{TARGET_ASM_NAMED_SECTION}\n\
target.def:based on a variable or function decl, a section name, and whether or not the\n\
target.def: default_section_type_flags)
target.def:   section.  */
target.def:debug sections.",
target.def:the section that the address refers to.  On these machines, define the\n\
target.def:@code{symbol_ref} in order to determine the section.  @xref{Assembler\n\
target.def: "The minimum offset that should be applied to a section anchor.\n\
target.def:offset that should be applied to section anchors.  The default\n\
target.def:/* True if section anchors can be used to access the given symbol.  */
target.def:or target-specific sections.",
target.def:/* True if EXP should be placed in a "small data" section.  */
target.def: "Returns true if @var{exp} should be placed into a ``small data'' section.\n\
target.def:(encode_section_info,
target.def:function named by the symbol (such as what section it is in).\n\
target.def:The default definition of this hook, @code{default_encode_section_info}\n\
target.def: default_encode_section_info)
target.def:/* Undo the effects of encode_section_info on the symbol string.  */
target.def:@code{max(sizeof (size_t), alignof(type))}, as defined in section 2.7 of the\n\
target.def:(var_section,
target.def: "Contains the name of the section in which TLS control variables should\n\
target.def:any section.",
target.def:(tmpl_section,
target.def: "Contains the name of the section in which TLS initializers should be\n\
target.def:section.",
target.def:/* True if we can create zeroed data by switching to a BSS section
target.def:(have_switchable_bss_sections,
target.def:section and then using @code{ASM_OUTPUT_SKIP} to allocate the space.\n\
target.def:/* True if a small readonly data section is supported.  */
target.def:(have_srodata_section,
target.def:``small data'' into a separate section.  The default value is false.",
target.def:/* True if EH frame info sections should be zero-terminated.  */
target.def:end of a Dwarf-2 frame info section when used for exception handling.\n\
target.def:(want_debug_pub_sections,
target.def: "True if the @code{.debug_pubtypes} and @code{.debug_pubnames} sections\
target.def: should be emitted.  These sections are not used on most platforms, and\
target-def.h:#  define TARGET_ASM_CONSTRUCTOR default_ctor_section_asm_out_constructor
target-def.h:#   define TARGET_ASM_CONSTRUCTOR default_named_section_asm_out_constructor
target-def.h:#  define TARGET_ASM_DESTRUCTOR default_dtor_section_asm_out_destructor
target-def.h:#   define TARGET_ASM_DESTRUCTOR default_named_section_asm_out_destructor
targhooks.h:extern section * default_function_section(tree decl, enum node_frequency freq,
toplev.c:/* True if the user has tagged the function with the 'section'
toplev.c:bool user_defined_section_attribute = false;
toplev.c:/* Return true if the current target supports -fsection-anchors.  */
toplev.c:target_supports_section_anchors_p (void)
toplev.c:  if (flag_section_anchors && !target_supports_section_anchors_p ())
toplev.c:      warning (OPT_fsection_anchors,
toplev.c:	       "this target does not support %qs", "-fsection-anchors");
toplev.c:      flag_section_anchors = 0;
toplev.c:  if (!targetm_common.have_named_sections)
toplev.c:      if (flag_function_sections)
toplev.c:	  warning (0, "-ffunction-sections not supported for this target");
toplev.c:	  flag_function_sections = 0;
toplev.c:      if (flag_data_sections)
toplev.c:	  warning (0, "-fdata-sections not supported for this target");
toplev.c:	  flag_data_sections = 0;
toplev.h:/* True if the user has tagged the function with the 'section'
toplev.h:extern bool user_defined_section_attribute;
trans-mem.c:     the SSA web in the TODO section following this pass.  */
tree.c:  "sections",
tree-call-cdce.c:   error.  See IEEE Std 1003.1, section 2.3 Error Numbers, and section 7.5:3 of
tree-core.h:  /* OpenMP clause: sections.  */
tree-core.h:     array sections.  OMP_CLAUSE_SIZE for these is not the pointer size,
tree-core.h: tree section_name;
tree-core.h: unsigned in_text_section : 1;
tree-core.h: /* When SECTION_NAME is implied by -ffunction-section.  */
tree-core.h: unsigned implicit_section_name_p : 1;
tree-data-ref.c:/* This section contains the classic Banerjee tests.  */
tree-data-ref.c:  /* For determining the initial intersection, we have to solve a
tree-data-ref.c:     the iterations that hold the intersections.  */
tree.def:/* OpenMP - #pragma omp sections [clause1 ... clauseN]
tree.def:DEFTREECODE (OMP_SECTIONS, "omp_sections", tcc_statement, 2)
tree.def:   Operand 0: OMP_SINGLE_BODY: Single section body.
tree.def:/* OpenMP - #pragma omp section
tree.def:DEFTREECODE (OMP_SECTION, "omp_section", tcc_statement, 1)
tree.def:   Operand 0: OMP_MASTER_BODY: Master section body.  */
tree.def:   Operand 0: OMP_ORDERED_BODY: Master section body.  */
tree.def:   Operand 0: OMP_CRITICAL_BODY: Critical section body.
tree.def:   Operand 1: OMP_CRITICAL_NAME: Identifier for critical section.  */
tree-emutls.c:  if (targetm.emutls.tmpl_section)
tree-emutls.c:        = build_string (strlen (targetm.emutls.tmpl_section),
tree-emutls.c:			targetm.emutls.tmpl_section);
tree-emutls.c:  if (!DECL_COMMON (to) && targetm.emutls.var_section)
tree-emutls.c:        = build_string (strlen (targetm.emutls.var_section),
tree-emutls.c:			targetm.emutls.var_section);
tree.h:   section with zero bias.  Both the non-decl OMP_CLAUSE_MAP and
tree.h:   nonzero if the space is in the text section.  */
tree.h:  (VAR_DECL_CHECK (NODE)->decl_with_vis.in_text_section)
tree.h:/* Records the section name in a section attribute.  Used to pass
tree.h:  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.section_name)
tree.h:/* Specify whether the section name was set by user or by
tree.h:   compiler via -ffunction-sections.  */
tree.h:  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.implicit_section_name_p)
tree-inline.c:	  copy = gimple_build_omp_section (s1);
tree-inline.c:	  copy = gimple_build_omp_sections
tree-inline.c:	           (s1, gimple_omp_sections_clauses (stmt));
tree-loop-distribution.c:  /* First check whether in the intersection of the two partitions are
tree-nested.c:      convert_nonlocal_omp_clauses (gimple_omp_sections_clauses_ptr (stmt), wi);
tree-nested.c:      convert_local_omp_clauses (gimple_omp_sections_clauses_ptr (stmt), wi);
tree-pretty-print.c:      pp_string (buffer, "sections");
tree-pretty-print.c:      pp_string (buffer, "#pragma omp sections");
tree-pretty-print.c:      pp_string (buffer, "#pragma omp section");
tree-profile.c:   tag of the section for counters, BASE is offset of the counter position.  */
tree-profile.c:   of the section for counters, BASE is offset of the counter position.  */
tree-profile.c:   section for counters, BASE is offset of the counter position.  */
tree-profile.c:   TAG is the tag of the section for counters, BASE is offset of the
tree-profile.c:   TAG is the tag of the section for counters, BASE is offset of the
tree-profile.c:   section for counters, BASE is offset of the counter position.  */
tree-profile.c:   tag of the section for counters, BASE is offset of the counter position.  */
tree-profile.c:   tag of the section for counters, BASE is offset of the counter position.  */
tree-scalar-evolution.c:/* This section selects the loops that will be good candidates for the
tree-scalar-evolution.c:/* This section contains all the entry points:
tree-ssa-address.c:   random object __attribute__((section (".sdata"))).
tree-ssa-alias.c:  /* ???  This does not use TBAA to prune decls from the intersection
tree-ssa-copy.c:         copy chain is their intersection.  For now we do not bother
tree-ssa-dse.c:   Reviewing section 10.7.2 in Morgan's "Building an Optimizing Compiler"
tree-ssa-loop-ivopts.c:      targetm.encode_section_info (obj, x, true);
tree-ssa-loop-ivopts.c:		 targetm.encode_section_info.  By setting the local bit, we
tree-ssa-math-opts.c:   see section 4.6.3, "Evaluation of Powers" of Donald E. Knuth,
tree-ssa-pre.c:     ANTIC_OUT[BLOCK] = intersection of ANTIC_IN[b] for all succ(BLOCK)
tree-ssa-pre.c:  /* If we have multiple successors, we take the intersection of all of
tree-ssa-structalias.c:   intersection.  */
tree-streamer-in.c:     unpacking the bitfield section.  */
tree-streamer-out.c:	 to the global decls section as we do not want to have them
tree-streamer-out.c:     EXPR's bitfield section.  */
tree-vect-data-refs.c:	 flag_section_anchors is enabled as we already generated
tree-vect-data-refs.c:	  || (TREE_STATIC (base) && flag_section_anchors))
tree-vect-data-refs.c:     section name is also used.  This is a common idiom used by many
tree-vectorizer.c:  return flag_section_anchors && flag_tree_loop_vectorize;
tree-vrp.c:   intersection.
tree-vrp.c:  /* If the equivalence sets have a common intersection, then the two
tree-vrp.c:	 If the ranges have an empty intersection, result of the union
tree-vrp.c:	  /* For anti-range with range intersection the result is empty.  */
tree-vrp.c:	 If the ranges have an empty intersection, the result of the
tree-vrp.c:	  /* The intersection is empty.  */
tree-vrp.c:	  /* The intersection is empty.  */
tree-vrp.c:     result for the intersection.  That's always a conservative
tree-vrp.c:  /* Save the original vr0 so we can return it as conservative intersection
tree-vrp.c:  /* The resulting set of equivalences for range intersection is the union of
tree-vrp.c:  /* The resulting set of equivalences is always the intersection of
varasm.c:static bool decl_readonly_section_1 (enum section_category);
varasm.c:/* Well-known sections, each one associated with some sort of *_ASM_OP.  */
varasm.c:section *text_section;
varasm.c:section *data_section;
varasm.c:section *readonly_data_section;
varasm.c:section *sdata_section;
varasm.c:section *ctors_section;
varasm.c:section *dtors_section;
varasm.c:section *bss_section;
varasm.c:section *sbss_section;
varasm.c:/* Various forms of common section.  All are guaranteed to be nonnull.  */
varasm.c:section *tls_comm_section;
varasm.c:section *comm_section;
varasm.c:section *lcomm_section;
varasm.c:/* A SECTION_NOSWITCH section used for declaring global BSS variables.
varasm.c:section *bss_noswitch_section;
varasm.c:/* The section that holds the main exception table, when known.  The section
varasm.c:   is set either by the target's init_sections hook or by the first call to
varasm.c:   switch_to_exception_section.  */
varasm.c:section *exception_section;
varasm.c:/* The section that holds the DWARF2 frame unwind information, when known.
varasm.c:   The section is set either by the target's init_sections hook or by the
varasm.c:   first call to switch_to_eh_frame_section.  */
varasm.c:section *eh_frame_section;
varasm.c:/* asm_out_file's current section.  This is NULL if no section has yet
varasm.c:   been selected or if we lose track of what the current section is.  */
varasm.c:section *in_section;
varasm.c:   at the cold section.  */
varasm.c:bool in_cold_section_p;
varasm.c:/* A linked list of all the unnamed sections.  */
varasm.c:static GTY(()) section *unnamed_sections;
varasm.c:/* Return a nonzero value if DECL has a section attribute.  */
varasm.c:/* Hash table of named sections.  */
varasm.c:static GTY((param_is (section))) htab_t section_htab;
varasm.c:/* A table of object_blocks, indexed by section.  */
varasm.c:/* Helper routines for maintaining section_htab.  */
varasm.c:section_entry_eq (const void *p1, const void *p2)
varasm.c:  const section *old = (const section *) p1;
varasm.c:section_entry_hash (const void *p)
varasm.c:  const section *old = (const section *) p;
varasm.c:/* Return a hash value for section SECT.  */
varasm.c:hash_section (section *sect)
varasm.c:  const section *new_section = (const section *) p2;
varasm.c:  return old->sect == new_section;
varasm.c:  return hash_section (old->sect);
varasm.c:/* Return a new unnamed section with the given fields.  */
varasm.c:section *
varasm.c:get_unnamed_section (unsigned int flags, void (*callback) (const void *),
varasm.c:  section *sect;
varasm.c:  sect = ggc_alloc_section ();
varasm.c:  sect->unnamed.next = unnamed_sections;
varasm.c:  unnamed_sections = sect;
varasm.c:/* Return a SECTION_NOSWITCH section with the given fields.  */
varasm.c:static section *
varasm.c:get_noswitch_section (unsigned int flags, noswitch_section_callback callback)
varasm.c:  section *sect;
varasm.c:  sect = ggc_alloc_section ();
varasm.c:/* Return the named section structure associated with NAME.  Create
varasm.c:   a new section with the given fields if no such structure exists.  */
varasm.c:section *
varasm.c:get_section (const char *name, unsigned int flags, tree decl)
varasm.c:  section *sect, **slot;
varasm.c:  slot = (section **)
varasm.c:    htab_find_slot_with_hash (section_htab, name,
varasm.c:      sect = ggc_alloc_section ();
varasm.c:	  /* It is fine if one of the section flags is
varasm.c:	     flags (i.e. read-only) in named sections and either the
varasm.c:	     section hasn't been declared yet or has been declared as writable.
varasm.c:		error ("%+D causes a section type conflict with %D",
varasm.c:		error ("section type conflict with %D", sect->named.decl);
varasm.c:	    error ("%+D causes a section type conflict", decl);
varasm.c:	    error ("section type conflict");
varasm.c:	  /* Make sure we don't error about one section multiple times.  */
varasm.c:  return flag_section_anchors;
varasm.c:/* Return the object_block structure for section SECT.  Create a new
varasm.c:get_block_for_section (section *sect)
varasm.c:				   hash_section (sect), INSERT);
varasm.c:/* Return a section with a particular name and with whatever SECTION_*
varasm.c:   flags section_type_flags deems appropriate.  The name of the section
varasm.c:   DECL_SECTION_NAME.  DECL is the decl associated with the section
varasm.c:   (see the section comment for details) and RELOC is as for
varasm.c:   section_type_flags.  */
varasm.c:section *
varasm.c:get_named_section (tree decl, const char *name, int reloc)
varasm.c:  flags = targetm.section_type_flags (decl, name, reloc);
varasm.c:  return get_section (name, flags, decl);
varasm.c:resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,
varasm.c:			int flag_function_or_data_sections)
varasm.c:      && targetm_common.have_named_sections
varasm.c:      && (flag_function_or_data_sections
varasm.c:      targetm.asm_out.unique_section (decl, reloc);
varasm.c:  switch_to_section (bss_section);
varasm.c:/* Return the hot section for function DECL.  Return text_section for
varasm.c:static section *
varasm.c:hot_function_section (tree decl)
varasm.c:      && targetm_common.have_named_sections)
varasm.c:    return get_named_section (decl, NULL, 0);
varasm.c:    return text_section;
varasm.c:/* Return section for TEXT_SECTION_NAME if DECL or DECL_SECTION_NAME (DECL)
varasm.c:   When DECL_SECTION_NAME is non-NULL and it is implicit section and
varasm.c:   NAMED_SECTION_SUFFIX is non-NULL, then produce section called
varasm.c:section *
varasm.c:get_named_text_section (tree decl,
varasm.c:		        const char *text_section_name,
varasm.c:		        const char *named_section_suffix)
varasm.c:      if (named_section_suffix)
varasm.c:	  buffer = ACONCAT ((stripped_name, named_section_suffix, NULL));
varasm.c:	  return get_named_section (decl, buffer, 0);
varasm.c:	  return get_named_section (decl, ACONCAT ((text_section_name, ".",
varasm.c:  return get_named_section (decl, text_section_name, 0);
varasm.c:/* Choose named function section based on its frequency.  */
varasm.c:section *
varasm.c:default_function_section (tree decl, enum node_frequency freq,
varasm.c:  /* Old GNU linkers have buggy --gc-section support, which sometimes
varasm.c:     results in .gcc_except_table* sections being garbage collected.  */
varasm.c:      || !targetm_common.have_named_sections)
varasm.c:  /* Startup code should go to startup subsection unless it is
varasm.c:       these ELF section.  */
varasm.c:      return get_named_text_section (decl, ".text.startup", NULL);
varasm.c:    return get_named_text_section (decl, ".text.exit", NULL);
varasm.c:	return get_named_text_section (decl, ".text.unlikely", NULL);
varasm.c:           these ELF section.  */
varasm.c:          return get_named_text_section (decl, ".text.hot", NULL);
varasm.c:/* Return the section for function DECL.
varasm.c:   If DECL is NULL_TREE, return the text section.  We can be passed
varasm.c:   If FORCE_COLD is true, return cold function section ignoring
varasm.c:static section *
varasm.c:function_section_1 (tree decl, bool force_cold)
varasm.c:  section *section = NULL;
varasm.c:      if (targetm.asm_out.function_section)
varasm.c:	section = targetm.asm_out.function_section (decl, freq,
varasm.c:      if (section)
varasm.c:	return section;
varasm.c:      return get_named_section (decl, NULL, 0);
varasm.c:    return targetm.asm_out.select_section
varasm.c:  if (targetm.asm_out.function_section)
varasm.c:    section = targetm.asm_out.function_section (decl, freq, startup, exit);
varasm.c:  if (section)
varasm.c:    return section;
varasm.c:  return hot_function_section (decl);
varasm.c:/* Return the section for function DECL.
varasm.c:   If DECL is NULL_TREE, return the text section.  We can be passed
varasm.c:section *
varasm.c:function_section (tree decl)
varasm.c:     to put function entry point into unlikely executed section
varasm.c:     better to live in hot subsection for the code locality).  */
varasm.c:  return function_section_1 (decl,
varasm.c:/* Return the section for the current function, take IN_COLD_SECTION_P
varasm.c:section *
varasm.c:current_function_section (void)
varasm.c:  return function_section_1 (current_function_decl, in_cold_section_p);
varasm.c:/* Tell assembler to switch to unlikely-to-be-executed text section.  */
varasm.c:section *
varasm.c:unlikely_text_section (void)
varasm.c:  return function_section_1 (current_function_decl, true);
varasm.c:   has been assigned a cold text section and if SECT is that section.
varasm.c:   default cold section.  */
varasm.c:unlikely_text_section_p (section *sect)
varasm.c:  return sect == function_section_1 (current_function_decl, true);
varasm.c:/* Return the read-only data section associated with function DECL.  */
varasm.c:section *
varasm.c:default_function_rodata_section (tree decl)
varasm.c:	  return get_section (rname, SECTION_LINKONCE, decl);
varasm.c:	  return get_section (rname, SECTION_LINKONCE, decl);
varasm.c:      else if (flag_function_sections && flag_data_sections
varasm.c:	  return get_section (rname, 0, decl);
varasm.c:  return readonly_data_section;
varasm.c:/* Return the read-only data section associated with function DECL
varasm.c:   for targets where that section should be always the single
varasm.c:   readonly data section.  */
varasm.c:section *
varasm.c:default_no_function_rodata_section (tree decl ATTRIBUTE_UNUSED)
varasm.c:  return readonly_data_section;
varasm.c:/* Return the section to use for string merging.  */
varasm.c:static section *
varasm.c:mergeable_string_section (tree decl ATTRIBUTE_UNUSED,
varasm.c:	      return get_section (name, flags, NULL);
varasm.c:  return readonly_data_section;
varasm.c:/* Return the section to use for constant merging.  */
varasm.c:section *
varasm.c:mergeable_constant_section (enum machine_mode mode ATTRIBUTE_UNUSED,
varasm.c:      return get_section (name, flags, NULL);
varasm.c:  return readonly_data_section;
varasm.c:/* Return true if DECL's initializer is suitable for a BSS section.  */
varasm.c:/* Return the section into which the given VAR_DECL or CONST_DECL
varasm.c:   section should be used wherever possible.  */
varasm.c:section *
varasm.c:get_variable_section (tree decl, bool prefer_noswitch_p)
varasm.c:      /* If the decl has been given an explicit section name, or it resides
varasm.c:	return tls_comm_section;
varasm.c:	return comm_section;
varasm.c:  resolve_unique_section (decl, reloc, flag_data_sections);
varasm.c:    return get_named_section (decl, NULL, reloc);
varasm.c:      && !(prefer_noswitch_p && targetm.have_switchable_bss_sections)
varasm.c:	return lcomm_section;
varasm.c:      if (bss_noswitch_section)
varasm.c:	return bss_noswitch_section;
varasm.c:  return targetm.asm_out.select_section (decl, reloc,
varasm.c:  section *sect;
varasm.c:  /* Find out which section should contain DECL.  We cannot put it into
varasm.c:  sect = get_variable_section (decl, true);
varasm.c:  return get_block_for_section (sect);
varasm.c:      targetm.encode_section_info (decl, DECL_RTL (decl), false);
varasm.c:	  /* As a register variable, it has no section.  */
varasm.c:  /* Specifying a section attribute on a variable forces it into a
varasm.c:     non-.bss section, and thus it cannot be common.  */
varasm.c:  targetm.encode_section_info (decl, DECL_RTL (decl), true);
varasm.c:assemble_addr_to_section (rtx symbol, section *sec)
varasm.c:  switch_to_section (sec);
varasm.c:   not) section for PRIORITY.  */
varasm.c:section *
varasm.c:get_cdtor_priority_section (int priority, bool constructor_p)
varasm.c:  return get_section (buf, SECTION_WRITE, NULL);
varasm.c:default_named_section_asm_out_destructor (rtx symbol, int priority)
varasm.c:  section *sec;
varasm.c:    sec = get_cdtor_priority_section (priority,
varasm.c:    sec = get_section (".dtors", SECTION_WRITE, NULL);
varasm.c:  assemble_addr_to_section (symbol, sec);
varasm.c:default_dtor_section_asm_out_destructor (rtx symbol,
varasm.c:  assemble_addr_to_section (symbol, dtors_section);
varasm.c:default_named_section_asm_out_constructor (rtx symbol, int priority)
varasm.c:  section *sec;
varasm.c:    sec = get_cdtor_priority_section (priority,
varasm.c:    sec = get_section (".ctors", SECTION_WRITE, NULL);
varasm.c:  assemble_addr_to_section (symbol, sec);
varasm.c:default_ctor_section_asm_out_constructor (rtx symbol,
varasm.c:  assemble_addr_to_section (symbol, ctors_section);
varasm.c:   current function goes into the cold section, so that targets can use
varasm.c:   current_function_section during RTL expansion.  DECL describes the
varasm.c:decide_function_section (tree decl)
varasm.c:      /* Calls to function_section rely on first_function_block_is_cold
varasm.c:  in_cold_section_p = first_function_block_is_cold;
varasm.c:      crtl->subsections.hot_section_label = ggc_strdup (tmp_label);
varasm.c:      crtl->subsections.cold_section_label = ggc_strdup (tmp_label);
varasm.c:      crtl->subsections.hot_section_end_label = ggc_strdup (tmp_label);
varasm.c:      crtl->subsections.cold_section_end_label = ggc_strdup (tmp_label);
varasm.c:      crtl->subsections.hot_section_label = NULL;
varasm.c:      crtl->subsections.cold_section_label = NULL;
varasm.c:      crtl->subsections.hot_section_end_label = NULL;
varasm.c:      crtl->subsections.cold_section_end_label = NULL;
varasm.c:  /* Make sure the not and cold text (code) sections are properly
varasm.c:     has both hot and cold sections, because we don't want to re-set
varasm.c:     the alignment when the section switch happens mid-function.  */
varasm.c:      switch_to_section (unlikely_text_section ());
varasm.c:      ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.cold_section_label);
varasm.c:      /* When the function starts with a cold section, we need to explicitly
varasm.c:	 align the hot section and write out the hot section label.
varasm.c:	  switch_to_section (text_section);
varasm.c:	  ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.hot_section_label);
varasm.c:      in_cold_section_p = first_function_block_is_cold;
varasm.c:  /* Switch to the correct text section for the start of the function.  */
varasm.c:  switch_to_section (function_section (decl));
varasm.c:    ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.hot_section_label);
varasm.c:  /* We could have switched section in the middle of the function.  */
varasm.c:    switch_to_section (function_section (decl));
varasm.c:      switch_to_section (function_section (decl)); /* need to switch back */
varasm.c:  /* Output labels for end of hot/cold text sections (to be used by
varasm.c:      section *save_text_section;
varasm.c:      save_text_section = in_section;
varasm.c:      switch_to_section (unlikely_text_section ());
varasm.c:      ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.cold_section_end_label);
varasm.c:	switch_to_section (text_section);
varasm.c:	switch_to_section (function_section (decl));
varasm.c:      ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.hot_section_end_label);
varasm.c:      switch_to_section (save_text_section);
varasm.c:  /* The `space' pseudo in the text section outputs nop insns rather than 0s,
varasm.c:     so we must output 0s explicitly in the text section.  */
varasm.c:  if (ASM_NO_SKIP_IN_TEXT && (in_section->common.flags & SECTION_CODE) != 0)
varasm.c:/* A noswitch_section_callback for lcomm_section.  */
varasm.c:/* A noswitch_section_callback for bss_noswitch_section.  */
varasm.c:/* A noswitch_section_callback for comm_section.  */
varasm.c:/* A noswitch_section_callback for tls_comm_section.  */
varasm.c:/* Assemble DECL given that it belongs in SECTION_NOSWITCH section SECT.
varasm.c:assemble_noswitch_variable (tree decl, const char *name, section *sect,
varasm.c:  section *sect;
varasm.c:  /* Make sure targetm.encode_section_info is invoked before we set
varasm.c:  sect = get_variable_section (decl, false);
varasm.c:         variables are not only in the comdat section, but that
varasm.c:         code is removed, the variables end up in the same section
varasm.c:         FIXME:  resolve_unique_section needs to deal better with
varasm.c:         a single call to "switch_to_section (sect)".  */
varasm.c:          targetm.asm_out.named_section (sect->named.name,
varasm.c:          in_section = sect;
varasm.c:          switch_to_section (sect);
varasm.c:	switch_to_section (sect);
varasm.c:   function into the .preinit_array section.  */
varasm.c:  section *sect;
varasm.c:  sect = get_section (".preinit_array", flags, fn_decl);
varasm.c:  switch_to_section (sect);
varasm.c:  assemble_addr_to_section (symbol, sect);
varasm.c:  /* By default, put trampoline templates in read-only data section.  */
varasm.c:  switch_to_section (TRAMPOLINE_SECTION);
varasm.c:  switch_to_section (readonly_data_section);
varasm.c:/* Return the section into which constant EXP should be placed.  */
varasm.c:static section *
varasm.c:get_constant_section (tree exp, unsigned int align)
varasm.c:  return targetm.asm_out.select_section (exp,
varasm.c:      section *sect = get_constant_section (exp, DECL_ALIGN (decl));
varasm.c:				    get_block_for_section (sect), -1);
varasm.c:  targetm.encode_section_info (exp, rtl, true);
varasm.c:      switch_to_section (get_constant_section (exp, align));
varasm.c:      section *sect = targetm.asm_out.select_rtx_section (mode, x, align);
varasm.c:				    get_block_for_section (sect), -1);
varasm.c:     sections have proper size.  */
varasm.c:      && in_section
varasm.c:      && (in_section->common.flags & SECTION_MERGE))
varasm.c:	    switch_to_section (targetm.asm_out.select_rtx_section
varasm.c:/* Dump the actual pairs to the .tm_clone_table section.  */
varasm.c:	  switch_to_section (targetm.asm_out.tm_clone_table_section ());
varasm.c:/* Provide a default for the tm_clone_table section.  */
varasm.c:section *
varasm.c:default_clone_table_section (void)
varasm.c:  return get_named_section (NULL, ".tm_clone_table", 3);
varasm.c:  section_htab = htab_create_ggc (31, section_entry_hash,
varasm.c:				  section_entry_eq, NULL);
varasm.c:  text_section = get_unnamed_section (SECTION_CODE, output_section_asm_op,
varasm.c:  data_section = get_unnamed_section (SECTION_WRITE, output_section_asm_op,
varasm.c:  sdata_section = get_unnamed_section (SECTION_WRITE, output_section_asm_op,
varasm.c:  readonly_data_section = get_unnamed_section (0, output_section_asm_op,
varasm.c:  ctors_section = get_unnamed_section (0, output_section_asm_op,
varasm.c:  dtors_section = get_unnamed_section (0, output_section_asm_op,
varasm.c:  bss_section = get_unnamed_section (SECTION_WRITE | SECTION_BSS,
varasm.c:				     output_section_asm_op,
varasm.c:  sbss_section = get_unnamed_section (SECTION_WRITE | SECTION_BSS,
varasm.c:				      output_section_asm_op,
varasm.c:  tls_comm_section = get_noswitch_section (SECTION_WRITE | SECTION_BSS
varasm.c:  lcomm_section = get_noswitch_section (SECTION_WRITE | SECTION_BSS
varasm.c:  comm_section = get_noswitch_section (SECTION_WRITE | SECTION_BSS
varasm.c:  bss_noswitch_section = get_noswitch_section (SECTION_WRITE | SECTION_BSS,
varasm.c:  targetm.asm_out.init_sections ();
varasm.c:  if (readonly_data_section == NULL)
varasm.c:    readonly_data_section = text_section;
varasm.c:/* Select a set of attributes for section NAME based on the properties
varasm.c:   We make the section read-only and executable for a function decl,
varasm.c:default_section_type_flags (tree decl, const char *name, int reloc)
varasm.c:      enum section_category category
varasm.c:	= categorize_decl_for_section (decl, reloc);
varasm.c:      if (decl_readonly_section_1 (category))
varasm.c:  /* These three sections have special ELF types.  They are neither
varasm.c:     SHT_PROGBITS nor SHT_NOBITS, so when changing sections we don't
varasm.c:     want to print a section type (@progbits or @nobits).  If someone
varasm.c:     sections, then don't handle them specially.  */
varasm.c:   either through bss_noswitch_section, or by selecting a BSS
varasm.c:   section in TARGET_ASM_SELECT_SECTION.  */
varasm.c:  return bss_noswitch_section || targetm.have_switchable_bss_sections;
varasm.c:/* Output assembly to switch to section NAME with attribute FLAGS.
varasm.c:default_no_named_section (const char *name ATTRIBUTE_UNUSED,
varasm.c:  /* Some object formats don't support named sections at all.  The
varasm.c:default_elf_asm_named_section (const char *name, unsigned int flags,
varasm.c:  /* If we have already declared this section, we can use an
varasm.c:     abbreviated form to switch back to it -- unless this section is
varasm.c:      fprintf (asm_out_file, "\t.section\t%s\n", name);
varasm.c:  fprintf (asm_out_file, "\t.section\t%s,\"%s\"", name, flagchars);
varasm.c:default_coff_asm_named_section (const char *name, unsigned int flags,
varasm.c:  fprintf (asm_out_file, "\t.section\t%s,\"%s\"\n", name, flagchars);
varasm.c:default_pe_asm_named_section (const char *name, unsigned int flags,
varasm.c:  default_coff_asm_named_section (name, flags, decl);
varasm.c:/* The lame default section selector.  */
varasm.c:section *
varasm.c:default_select_section (tree decl, int reloc,
varasm.c:      if (decl_readonly_section (decl, reloc))
varasm.c:	return readonly_data_section;
varasm.c:	return readonly_data_section;
varasm.c:    return readonly_data_section;
varasm.c:    return readonly_data_section;
varasm.c:  return data_section;
varasm.c:enum section_category
varasm.c:categorize_decl_for_section (const_tree decl, int reloc)
varasm.c:  enum section_category ret;
varasm.c:	  /* Here the reloc_rw_mask is not testing whether the section should
varasm.c:  /* There are no read-only thread-local sections.  */
varasm.c:	 no concept of a read-only thread-local-data section.  */
varasm.c:  /* If the target uses small data sections, select it.  */
varasm.c:      else if (targetm.have_srodata_section && ret == SECCAT_RODATA)
varasm.c:decl_readonly_section_1 (enum section_category category)
varasm.c:decl_readonly_section (const_tree decl, int reloc)
varasm.c:  return decl_readonly_section_1 (categorize_decl_for_section (decl, reloc));
varasm.c:/* Select a section based on the above categorization.  */
varasm.c:section *
varasm.c:default_elf_select_section (tree decl, int reloc,
varasm.c:  switch (categorize_decl_for_section (decl, reloc))
varasm.c:      return readonly_data_section;
varasm.c:      return mergeable_string_section (decl, align, 0);
varasm.c:      return mergeable_string_section (DECL_INITIAL (decl), align, 0);
varasm.c:      return mergeable_constant_section (DECL_MODE (decl), align, 0);
varasm.c:      return data_section;
varasm.c:      if (bss_section)
varasm.c:	return bss_section;
varasm.c:  return get_named_section (decl, sname, reloc);
varasm.c:/* Construct a unique section name based on the decl name and the
varasm.c:default_unique_section (tree decl, int reloc)
varasm.c:  switch (categorize_decl_for_section (decl, reloc))
varasm.c:     prefix to the section name.  */
varasm.c:section *
varasm.c:default_select_rtx_section (enum machine_mode mode ATTRIBUTE_UNUSED,
varasm.c:    return data_section;
varasm.c:    return readonly_data_section;
varasm.c:section *
varasm.c:default_elf_select_rtx_section (enum machine_mode mode, rtx x,
varasm.c:	return get_named_section (NULL, ".data.rel.ro.local", 1);
varasm.c:	return get_named_section (NULL, ".data.rel.ro", 3);
varasm.c:  return mergeable_constant_section (mode, align, 0);
varasm.c:default_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)
varasm.c:/* By default, we do nothing for encode_section_info, so we need not
varasm.c:   anchor relative to ".", the current section position.  */
varasm.c:  section *sect;
varasm.c:  /* Don't use anchors for mergeable sections.  The linker might move
varasm.c:  /* Don't use anchors for small data sections.  The small data register
varasm.c:     acts as an anchor for such sections.  */
varasm.c:      /* Don't use section anchors for decls that might be defined or
varasm.c:      /* Don't use section anchors for decls that will be placed in a
varasm.c:	 small data section.  */
varasm.c:	 sections that should be marked as small in the section directive.  */
varasm.c:   which emits a special section directive used to indicate whether or
varasm.c:  switch_to_section (get_section (".note.GNU-stack", flags, NULL));
varasm.c:/* Emit a special section directive to indicate that this object file
varasm.c:   large stack.  We emit another special section if there are any
varasm.c:      switch_to_section (get_section (".note.GNU-split-stack", SECTION_DEBUG,
varasm.c:	switch_to_section (get_section (".note.GNU-no-split-stack",
varasm.c:   a get_unnamed_section callback.  */
varasm.c:output_section_asm_op (const void *directive)
varasm.c:/* Emit assembly code to switch to section NEW_SECTION.  Do nothing if
varasm.c:   the current section is NEW_SECTION.  */
varasm.c:switch_to_section (section *new_section)
varasm.c:  if (in_section == new_section)
varasm.c:  if (new_section->common.flags & SECTION_FORGET)
varasm.c:    in_section = NULL;
varasm.c:    in_section = new_section;
varasm.c:  switch (SECTION_STYLE (new_section))
varasm.c:      targetm.asm_out.named_section (new_section->named.name,
varasm.c:				     new_section->named.common.flags,
varasm.c:				     new_section->named.decl);
varasm.c:      new_section->unnamed.callback (new_section->unnamed.data);
varasm.c:  new_section->common.flags |= SECTION_DECLARED;
varasm.c:get_section_anchor (struct object_block *block, HOST_WIDE_INT offset,
varasm.c:  /* Switch to the section and make sure that the first byte is
varasm.c:  switch_to_section (block->sect);
varasm.c:  /* Define the values of all anchors relative to the current section
varasm.c:   by -frecord-gcc-switches it creates a new mergeable, string section in the
varasm.c:	      section * sec;
varasm.c:	      sec = get_section (targetm.asm_out.record_gcc_switches_section,
varasm.c:	      switch_to_section (sec);
varasm.c:static GTY(()) section *elf_init_array_section;
varasm.c:static GTY(()) section *elf_fini_array_section;
varasm.c:static section *
varasm.c:get_elf_initfini_array_priority_section (int priority,
varasm.c:  section *sec;
varasm.c:      sec = get_section (buf, SECTION_WRITE | SECTION_NOTYPE, NULL_TREE);
varasm.c:	  if (elf_init_array_section == NULL)
varasm.c:	    elf_init_array_section
varasm.c:	      = get_section (".init_array",
varasm.c:	  sec = elf_init_array_section;
varasm.c:	  if (elf_fini_array_section == NULL)
varasm.c:	    elf_fini_array_section
varasm.c:	      = get_section (".fini_array",
varasm.c:	  sec = elf_fini_array_section;
varasm.c:/* Use .init_array section for constructors. */
varasm.c:  section *sec = get_elf_initfini_array_priority_section (priority,
varasm.c:  assemble_addr_to_section (symbol, sec);
varasm.c:/* Use .fini_array section for destructors. */
varasm.c:  section *sec = get_elf_initfini_array_priority_section (priority,
varasm.c:  assemble_addr_to_section (symbol, sec);
varasm.h:extern void resolve_unique_section (tree, int, int);
varpool.c:     because the variable itself is in readonly section.  
varpool.c:/* For variables in named sections make sure get_variable_section
varpool.c:   is called before we switch to those sections.  Then section
varpool.c:   sections can be resolved.  */
varpool.c:varpool_finalize_named_section_flags (varpool_node *node)
varpool.c:    get_variable_section (node->decl, false);
varpool.c:    varpool_finalize_named_section_flags (node);
var-tracking.c:insert_into_intersection (location_chain *nodep, rtx loc,
var-tracking.c:/* Insert in DEST the intersection of the locations present in both
var-tracking.c:	      insert_into_intersection (dest, s1node->loc,
var-tracking.c:	  insert_into_intersection (dest, s1node->loc,
var-tracking.c:   intersection.  */
var-tracking.c:     the intersection will be just as empty.  For other variables,
var-tracking.c:   intersections of one-part ones will be handled in
var-tracking.c:		  /* Calculate the IN set as the intersection of
vmsdbgout.c:   debug_nothing_void,            /* switch_text_section */
vmsdbgout.c:   pseudo-ops and section names.  */
vmsdbgout.c:  /* Set starting address to beginning of text section.  */
vmsdbgout.c:   'line_info_table' for later output of the .debug_line section.  */
vmsdbgout.c:  /* Output a terminator label for the .text section.  */
vmsdbgout.c:  switch_to_section (text_section);
vmsdbgout.c:     Warning! Do not change the name of the .vmsdebug section without
vmsdbgout.c:  switch_to_section (get_named_section (NULL, ".vmsdebug", 0));
xcoffout.c:/* Names of bss and data sections.  These should be unique names for each
xcoffout.c:char *xcoff_bss_section_name;
xcoffout.c:char *xcoff_private_data_section_name;
xcoffout.c:char *xcoff_tls_data_section_name;
xcoffout.c:char *xcoff_tbss_section_name;
xcoffout.c:char *xcoff_read_only_section_name;
xcoffout.h:/* Must use N_STSYM for static const variables (those in the text section)
xcoffout.h:    fprintf ((ASMFILE), "\t.bs\t%s[RW]\n", xcoff_private_data_section_name);\
xcoffout.h:    fprintf ((ASMFILE), "\t.bs\t%s\n", xcoff_bss_section_name);	\
xcoffout.h:/* Names of bss and data sections.  These should be unique names for each
xcoffout.h:extern char *xcoff_bss_section_name;
xcoffout.h:extern char *xcoff_private_data_section_name;
xcoffout.h:extern char *xcoff_tls_data_section_name;
xcoffout.h:extern char *xcoff_tbss_section_name;
xcoffout.h:extern char *xcoff_read_only_section_name;
xcoffout.h:/* We must put stabs in the text section.  If we don't the assembler
