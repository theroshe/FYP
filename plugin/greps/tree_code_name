ChangeLog-1997:	tree_code_name from pointers to arrays.
ChangeLog-1997:	* print-tree.c: Remove declaration of tree_code_name.
ChangeLog-1999:	objc_tree_code_name, synth_id_with_class_suffix, warn_with_method,
ChangeLog-1999:	* tree.c (tree_code_name): Constify a char*.
ChangeLog-1999:	* tree.h (tree_code_name, decl_printable_name): Likewise.
ChangeLog-2000:	(c_tree_code_name): Likewise.
ChangeLog-2001:	* c-common.c (c_tree_code_name): Const-ification.
ChangeLog-2002:	c_tree_code_name, add_c_tree_codes): Delete.
ChangeLog-2002:	* c-lang.c (tree_code_type, tree_code_length, tree_code_name):
ChangeLog-2002:	objc_tree_code_name, add_objc_tree_codes): Delete.
ChangeLog-2002:	tree_code_name): Define.
ChangeLog-2002:	* tree.c (tree_code_type, tree_code_length, tree_code_name):
ChangeLog-2002:	* tree.h (tree_code_type, tree_code_length, tree_code_name):
ChangeLog-2008:	(tree_code_length, tree_code_name): Likewise.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2008:	(tree_code_length, tree_code_name): Remove.
ChangeLog-2013:	* tree-core.h (tree_code_name): Remove.
ChangeLog-2013:	* tree.h (get_tree_code_name): New prototype.
ChangeLog-2013:	* tree.c (tree_code_name): Make static.
ChangeLog-2013:	(get_tree_code_name): New function.
ChangeLog-2013:	wrapper get_tree_code_name instead of calling tree_code_name directly.
ChangeLog.tuples:	(dump_gimple_cond): use op_symbol_code instead of tree_code_name.
gdbhooks.py:        # tree_code_name[(int) TREE_CODE (node)])
gdbhooks.py:        val_tree_code_name = gdb.parse_and_eval('tree_code_name')
gdbhooks.py:        val_code_name = val_tree_code_name[long(val_TREE_CODE)]
gimple.c:		  get_tree_code_name (subcode),
gimple.c:		    ? get_tree_code_name ((enum tree_code) gs->subcode)
gimple-pretty-print.c:	  pp_string (buffer, get_tree_code_name (rhs_code));
gimple-pretty-print.c:      for (p = get_tree_code_name (code); *p; p++)
gimple-pretty-print.c:      for (p = get_tree_code_name (code); *p; p++)
gimple-pretty-print.c:		       get_tree_code_name (gimple_assign_rhs_code (gs)),
gimple-pretty-print.c:		     get_tree_code_name (gimple_cond_code (gs)),
gimple-pretty-print.c:			 get_tree_code_name (gimple_omp_for_cond (gs, i)),
ipa-prop.c:		   get_tree_code_name(jump_func->value.pass_through.operation));
lto-streamer.c:      return get_tree_code_name (lto_tag_to_tree_code (tag));
lto-streamer.c:	       get_tree_code_name ((enum tree_code) i), lto_stats.num_trees[i]);
lto-streamer-out.c:		    get_tree_code_name (TREE_CODE (expr)));
lto-streamer-out.c:				    get_tree_code_name (TREE_CODE (t)));
print-tree.c:  fprintf (file, "%s <%s", prefix, get_tree_code_name (TREE_CODE (node)));
print-tree.c:  fprintf (file, "%s <%s", prefix, get_tree_code_name (code));
tree.c:static const char *const tree_code_name[] = {
tree.c:	fprintf (stderr, "%-20s %7d\n", get_tree_code_name ((enum tree_code) i),
tree.c:    length += 4 + strlen (get_tree_code_name (code));
tree.c:	  strcpy (tmp + length, get_tree_code_name (code));
tree.c:	  length += strlen (get_tree_code_name (code));
tree.c:		  buffer, get_tree_code_name (TREE_CODE (node)),
tree.c:    length += 4 + strlen (get_tree_code_name (code));
tree.c:      strcpy (buffer + length, get_tree_code_name (code));
tree.c:      length += strlen (get_tree_code_name (code));
tree.c:		  buffer, get_tree_code_name (TREE_CODE (node)),
tree.c:     get_tree_code_name (TREE_CODE (node)), function, trim_filename (file), line);
tree.c:    length += 4 + strlen (get_tree_code_name ((enum tree_code) c));
tree.c:      strcpy (buffer + length, get_tree_code_name ((enum tree_code) c));
tree.c:      length += strlen (get_tree_code_name ((enum tree_code) c));
tree.c:		  buffer, get_tree_code_name (TREE_CODE (node)),
tree.c:     get_tree_code_name (TREE_CODE (node)), function, trim_filename (file), line);
tree.c:		  omp_clause_code_name[code], get_tree_code_name (TREE_CODE (node)),
tree.c:     get_tree_code_name (TREE_CODE (node)), function, trim_filename (file), line);
tree.c:     idx + 1, get_tree_code_name (code), TREE_OPERAND_LENGTH (exp),
tree.c:/* Wrapper for tree_code_name to ensure that tree code is valid */
tree.c:get_tree_code_name (enum tree_code code)
tree.c:  return tree_code_name[code];
tree-dump.c:    code_name = get_tree_code_name (TREE_CODE (t));
tree.h:extern const char *get_tree_code_name (enum tree_code);
tree-pretty-print.c:  pp_string (buffer, get_tree_code_name (TREE_CODE (node)));
tree-pretty-print.c:      for (str = get_tree_code_name (code); *str; str++)
tree-pretty-print.h:	       get_tree_code_name (TREE_CODE (T)), __FUNCTION__)
tree-ssa-dom.c:	fprintf (stream, "%s ", get_tree_code_name (element->expr.ops.unary.op));
tree-ssa-dom.c:	fprintf (stream, " %s ", get_tree_code_name (element->expr.ops.binary.op));
tree-ssa-dom.c:	fprintf (stream, " %s <", get_tree_code_name (element->expr.ops.ternary.op));
tree-ssa-pre.c:	fprintf (outfile, "{%s,", get_tree_code_name (nary->opcode));
tree-ssa-pre.c:		fprintf (outfile, "%s", get_tree_code_name (vro->opcode));
tree-vect-data-refs.c:		       get_tree_code_name (TREE_CODE (aggr_type)));
tree-vrp.c:      fprintf (file, " %s ", get_tree_code_name (loc->comp_code));
